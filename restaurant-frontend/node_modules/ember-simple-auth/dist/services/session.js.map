{"version":3,"file":"session.js","sources":["../../src/-internals/routing.js","../../src/services/session.js"],"sourcesContent":["import isFastBoot from '../utils/is-fastboot';\nimport location from '../utils/location';\nimport { isTesting } from '@embroider/macros';\n\nexport function requireAuthentication(owner, transition) {\n  let sessionService = owner.lookup('service:session');\n  let isAuthenticated = sessionService.get('isAuthenticated');\n  if (!isAuthenticated) {\n    if (transition && isFastBoot(owner)) {\n      const fastbootService = owner.lookup('service:fastboot');\n      const cookiesService = owner.lookup('service:cookies');\n      cookiesService.write('ember_simple_auth-redirectTarget', transition.intent.url, {\n        path: '/',\n        secure: fastbootService.get('request.protocol') === 'https'\n      });\n    } else if (transition) {\n      sessionService.set('attemptedTransition', transition);\n    }\n  }\n  return isAuthenticated;\n}\n\nexport function triggerAuthentication(owner, authenticationRoute) {\n  let authRouter = owner.lookup('service:router') || owner.lookup('router:main');\n  authRouter.transitionTo(authenticationRoute);\n}\n\nexport function prohibitAuthentication(owner, routeIfAlreadyAuthenticated) {\n  let authRouter = owner.lookup('service:router') || owner.lookup('router:main');\n  authRouter.transitionTo(routeIfAlreadyAuthenticated);\n}\n\nexport function handleSessionAuthenticated(owner, routeAfterAuthentication) {\n  let sessionService = owner.lookup('service:session');\n  let attemptedTransition = sessionService.get('attemptedTransition');\n  let cookiesService = owner.lookup('service:cookies');\n  const redirectTarget = cookiesService.read('ember_simple_auth-redirectTarget');\n\n  let routerService = owner.lookup('service:router');\n\n  if (attemptedTransition) {\n    attemptedTransition.retry();\n    sessionService.set('attemptedTransition', null);\n  } else if (redirectTarget) {\n    routerService.transitionTo(redirectTarget);\n    cookiesService.clear('ember_simple_auth-redirectTarget');\n  } else {\n    routerService.transitionTo(routeAfterAuthentication);\n  }\n}\n\nexport function handleSessionInvalidated(owner, routeAfterInvalidation) {\n  if (isFastBoot(owner)) {\n    let routerService = owner.lookup('service:router');\n    routerService.transitionTo(routeAfterInvalidation);\n  } else {\n    if (!isTesting()) {\n      location.replace(routeAfterInvalidation);\n    }\n  }\n}\n","import { alias, readOnly } from '@ember/object/computed';\nimport Service from '@ember/service';\nimport { getOwner } from '@ember/application';\nimport { assert } from '@ember/debug';\nimport Configuration from '../configuration';\n\nimport {\n  requireAuthentication,\n  triggerAuthentication,\n  prohibitAuthentication,\n  handleSessionAuthenticated,\n  handleSessionInvalidated,\n} from '../-internals/routing';\n\nconst SESSION_DATA_KEY_PREFIX = /^data\\./;\n\nfunction assertSetupHasBeenCalled(isSetupCalled) {\n  if (!isSetupCalled) {\n    assert(\n      \"Ember Simple Auth: session#setup wasn't called. Make sure to call session#setup in your application route's beforeModel hook.\",\n      false\n    );\n  }\n}\n\n/**\n  __The session service provides access to the current session as well as\n  methods to authenticate it, invalidate it, etc.__ It is the main interface for\n  the application to Ember Simple Auth's functionality. It can be injected via\n\n  ```js\n  // app/components/login-form.js\n  import Component from '@ember/component';\n  import { inject as service } from '@ember/service';\n\n  export default class LoginFormComponent extends Component {\n    @service session;\n  }\n  ```\n\n  @class SessionService\n  @module ember-simple-auth/services/session\n  @extends Service\n  @public\n*/\nexport default Service.extend({\n  /**\n    Triggered whenever the session is successfully authenticated. This happens\n    when the session gets authenticated via\n    {{#crossLink \"SessionService/authenticate:method\"}}{{/crossLink}} but also\n    when the session is authenticated in another tab or window of the same\n    application and the session state gets synchronized across tabs or windows\n    via the store (see\n    {{#crossLink \"BaseStore/sessionDataUpdated:event\"}}{{/crossLink}}).\n\n    @event authenticationSucceeded\n    @public\n  */\n\n  /**\n    Triggered whenever the session is successfully invalidated. This happens\n    when the session gets invalidated via\n    {{#crossLink \"SessionService/invalidate:method\"}}{{/crossLink}} but also\n    when the session is invalidated in another tab or window of the same\n    application and the session state gets synchronized across tabs or windows\n    via the store (see\n    {{#crossLink \"BaseStore/sessionDataUpdated:event\"}}{{/crossLink}}).\n\n    @event invalidationSucceeded\n    @public\n  */\n\n  /**\n    Returns whether the session is currently authenticated.\n\n    @property isAuthenticated\n    @type Boolean\n    @readOnly\n    @default false\n    @public\n  */\n  isAuthenticated: readOnly('session.isAuthenticated'),\n\n  /**\n    The current session data as a plain object. The\n    `authenticated` key holds the session data that the authenticator resolved\n    with when the session was authenticated (see\n    {{#crossLink \"BaseAuthenticator/authenticate:method\"}}{{/crossLink}}) and\n    that will be cleared when the session is invalidated. This data cannot be\n    written. All other session data is writable and will not be cleared when\n    the session is invalidated.\n\n    @property data\n    @type Object\n    @readOnly\n    @default { authenticated: {} }\n    @public\n  */\n  data: readOnly('session.content'),\n\n  /**\n    The session store.\n\n    @property store\n    @type BaseStore\n    @readOnly\n    @default null\n    @public\n  */\n  store: readOnly('session.store'),\n\n  /**\n    A previously attempted but intercepted transition (e.g. by the\n    {{#crossLink \"SessionService/requireAuthentication:method\"}}{{/crossLink}}\n    If an attempted transition is present it will be retried.\n\n    @property attemptedTransition\n    @type Transition\n    @default null\n    @public\n  */\n  attemptedTransition: alias('session.attemptedTransition'),\n\n  session: null,\n\n  init() {\n    this._super(...arguments);\n\n    this.set('session', getOwner(this).lookup('session:main'));\n  },\n\n  set(key, value) {\n    const setsSessionData = SESSION_DATA_KEY_PREFIX.test(key);\n    if (setsSessionData) {\n      const sessionDataKey = `session.${key.replace(\n        SESSION_DATA_KEY_PREFIX,\n        ''\n      )}`;\n      return this._super(sessionDataKey, value);\n    } else {\n      return this._super(...arguments);\n    }\n  },\n\n  _setupHandlers() {\n    this.get('session').on('authenticationSucceeded', () =>\n      this.handleAuthentication(Configuration.routeAfterAuthentication)\n    );\n    this.get('session').on('invalidationSucceeded', () =>\n      this.handleInvalidation(Configuration.rootURL)\n    );\n  },\n\n  /**\n    __Authenticates the session with an `authenticator`__ and appropriate\n    arguments. The authenticator implements the actual steps necessary to\n    authenticate the session (see\n    {{#crossLink \"BaseAuthenticator/authenticate:method\"}}{{/crossLink}}) and\n    returns a promise after doing so. The session handles the returned promise\n    and when it resolves becomes authenticated, otherwise remains\n    unauthenticated. All data the authenticator resolves with will be\n    accessible via the\n    {{#crossLink \"SessionService/data:property\"}}session data's{{/crossLink}}\n    `authenticated` property.\n\n    __This method returns a promise. A resolving promise indicates that the\n    session was successfully authenticated__ while a rejecting promise\n    indicates that authentication failed and the session remains\n    unauthenticated. The promise does not resolve with a value; instead, the\n    data returned from the authenticator is available via the\n    {{#crossLink \"SessionService/data:property\"}}{{/crossLink}} property.\n\n    When authentication succeeds this will trigger the\n    {{#crossLink \"SessionService/authenticationSucceeded:event\"}}{{/crossLink}}\n    event.\n\n    @method authenticate\n    @param {String} authenticator The authenticator to use to authenticate the session\n    @param {Any} [...args] The arguments to pass to the authenticator; depending on the type of authenticator these might be a set of credentials, a Facebook OAuth Token, etc.\n    @return {RSVP.Promise} A promise that resolves when the session was authenticated successfully and rejects otherwise\n    @public\n  */\n  authenticate() {\n    const session = this.get('session');\n\n    return session.authenticate(...arguments);\n  },\n\n  /**\n    __Invalidates the session with the authenticator it is currently\n    authenticated with__ (see\n    {{#crossLink \"SessionService/authenticate:method\"}}{{/crossLink}}). This\n    invokes the authenticator's\n    {{#crossLink \"BaseAuthenticator/invalidate:method\"}}{{/crossLink}} method\n    and handles the returned promise accordingly.\n\n    This method returns a promise. A resolving promise indicates that the\n    session was successfully invalidated while a rejecting promise indicates\n    that invalidation failed and the session remains authenticated. Once the\n    session is successfully invalidated it clears all of its authenticated data\n    (see {{#crossLink \"SessionService/data:property\"}}{{/crossLink}}).\n\n    When invalidation succeeds this will trigger the\n    {{#crossLink \"SessionService/invalidationSucceeded:event\"}}{{/crossLink}}\n    event.\n\n    When calling the {{#crossLink \"BaseAuthenticator/invalidate:method\"}}{{/crossLink}}\n    on an already unauthenticated session, the method will return a resolved Promise\n    immediately.\n\n    @method invalidate\n    @param {Array} ...args arguments that will be passed to the authenticator\n    @return {RSVP.Promise} A promise that resolves when the session was invalidated successfully and rejects otherwise\n    @public\n  */\n  invalidate() {\n    const session = this.get('session');\n\n    return session.invalidate(...arguments);\n  },\n\n  /**\n    Checks whether the session is authenticated and if it is not, transitions\n    to the specified route or invokes the specified callback.\n\n    If a transition is in progress and is aborted, this method will save it in the\n    session service's\n    {{#crossLink \"SessionService/attemptedTransition:property\"}}{{/crossLink}}\n    property so that  it can be retried after the session is authenticated. If\n    the transition is aborted in Fastboot mode, the transition's target URL\n    will be saved in a `ember_simple_auth-redirectTarget` cookie for use by the\n    browser after authentication is complete.\n\n    @method requireAuthentication\n    @param {Transition} transition A transition that triggered the authentication requirement or null if the requirement originated independently of a transition\n    @param {String|Function} routeOrCallback The route to transition to in case that the session is not authenticated or a callback function to invoke in that case\n    @return {Boolean} true when the session is authenticated, false otherwise\n    @public\n  */\n  requireAuthentication(transition, routeOrCallback) {\n    assertSetupHasBeenCalled(this._setupIsCalled);\n    let isAuthenticated = requireAuthentication(getOwner(this), transition);\n    if (!isAuthenticated) {\n      let argType = typeof routeOrCallback;\n      if (argType === 'string') {\n        triggerAuthentication(getOwner(this), routeOrCallback);\n      } else if (argType === 'function') {\n        routeOrCallback();\n      } else {\n        assert(\n          `The second argument to requireAuthentication must be a String or Function, got \"${argType}\"!`,\n          false\n        );\n      }\n    }\n    return isAuthenticated;\n  },\n\n  /**\n    Checks whether the session is authenticated and if it is, transitions\n    to the specified route or invokes the specified callback.\n\n    @method prohibitAuthentication\n    @param {String|Function} routeOrCallback The route to transition to in case that the session is authenticated or a callback function to invoke in that case\n    @return {Boolean} true when the session is not authenticated, false otherwise\n    @public\n  */\n  prohibitAuthentication(routeOrCallback) {\n    assertSetupHasBeenCalled(this._setupIsCalled);\n    let isAuthenticated = this.get('isAuthenticated');\n    if (isAuthenticated) {\n      let argType = typeof routeOrCallback;\n      if (argType === 'string') {\n        prohibitAuthentication(getOwner(this), routeOrCallback);\n      } else if (argType === 'function') {\n        routeOrCallback();\n      } else {\n        assert(\n          `The first argument to prohibitAuthentication must be a String or Function, got \"${argType}\"!`,\n          false\n        );\n      }\n    }\n    return !isAuthenticated;\n  },\n\n  /**\n    This method is called whenever the session goes from being unauthenticated\n    to being authenticated. If there is a transition that was previously\n    intercepted by the\n    {{#crossLink \"SessionService/requireAuthentication:method\"}}{{/crossLink}},\n    it will retry it. If there is no such transition, the\n    `ember_simple_auth-redirectTarget` cookie will be checked for a url that\n    represents an attemptedTransition that was aborted in Fastboot mode,\n    otherwise this action transitions to the specified\n    routeAfterAuthentication.\n\n    @method handleAuthentication\n    @param {String} routeAfterAuthentication The route to transition to\n    @public\n  */\n  handleAuthentication(routeAfterAuthentication) {\n    handleSessionAuthenticated(getOwner(this), routeAfterAuthentication);\n  },\n\n  /**\n    This method is called whenever the session goes from being authenticated to\n    not being authenticated. __It reloads the Ember.js application__ by\n    redirecting the browser to the specified route so that all in-memory data\n    (such as Ember Data stores etc.) gets cleared.\n\n    If the Ember.js application will be used in an environment where the users\n    don't have direct access to any data stored on the client (e.g.\n    [cordova](http://cordova.apache.org)) this action can be overridden to e.g.\n    simply transition to the index route.\n\n    @method handleInvalidation\n    @param {String} routeAfterInvalidation The route to transition to\n    @public\n  */\n  handleInvalidation(routeAfterInvalidation) {\n    handleSessionInvalidated(getOwner(this), routeAfterInvalidation);\n  },\n\n  /**\n    Sets up the session service.\n\n    This method must be called when the application starts up,\n    usually as the first thing in the `application` route's `beforeModel`\n    method.\n\n    @method setup\n    @public\n  */\n  setup() {\n    this._setupIsCalled = true;\n    this._setupHandlers();\n\n    return this.session.restore().catch(() => {\n      // If it raises an error then it means that restore didn't find any restorable state.\n    });\n  },\n});\n"],"names":["requireAuthentication","owner","transition","sessionService","lookup","isAuthenticated","get","isFastBoot","fastbootService","cookiesService","write","intent","url","path","secure","set","triggerAuthentication","authenticationRoute","authRouter","transitionTo","prohibitAuthentication","routeIfAlreadyAuthenticated","handleSessionAuthenticated","routeAfterAuthentication","attemptedTransition","redirectTarget","read","routerService","retry","clear","handleSessionInvalidated","routeAfterInvalidation","isTesting","location","replace","SESSION_DATA_KEY_PREFIX","assertSetupHasBeenCalled","isSetupCalled","assert","Service","extend","readOnly","data","store","alias","session","init","_super","arguments","getOwner","key","value","setsSessionData","test","sessionDataKey","_setupHandlers","on","handleAuthentication","Configuration","handleInvalidation","rootURL","authenticate","invalidate","routeOrCallback","_setupIsCalled","argType","setup","restore","catch"],"mappings":"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"}