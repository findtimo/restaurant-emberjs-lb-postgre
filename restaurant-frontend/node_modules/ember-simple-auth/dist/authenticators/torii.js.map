{"version":3,"file":"torii.js","sources":["../../src/authenticators/torii.js"],"sourcesContent":["import RSVP from 'rsvp';\nimport { assert, deprecate } from '@ember/debug';\nimport { isPresent, isEmpty } from '@ember/utils';\nimport BaseAuthenticator from './base';\n\ndeprecate('Ember Simple Auth: The Torii authenticator is deprecated.', false, {\n  id: 'ember-simple-auth.authenticators.torii',\n  until: '7.0.0',\n  for: 'ember-simple-auth',\n  since: {\n    enabled: '4.2.0'\n  }\n});\n\n/**\n  Authenticator that wraps the\n  [Torii library](https://github.com/Vestorly/torii) and thus allows to connect\n  any external authentication provider that torii defines a provider for.\n\n  In order to use this authenticator, __the application needs to have the\n  [torii addon](https://github.com/Vestorly/torii) installed and must inject\n  the torii service into the authenticator__:\n\n  ```js\n  // app/authenticators/torii.js\n  import Torii from 'ember-simple-auth/authenticators/torii';\n  import { inject as service } from '@ember/service';\n\n  export default class ToriiAuthenticator extends Torii {\n    @service torii;\n  }\n  ```\n\n  @class ToriiAuthenticator\n  @deprecated Implement an authenticator that wraps Torii in application code instead\n  @module ember-simple-auth/authenticators/torii\n  @extends BaseAuthenticator\n  @public\n*/\nexport default BaseAuthenticator.extend({\n  _provider: null,\n\n  /**\n    Restores the session by calling the torii provider's `fetch` method.\n\n    __Many torii providers do not implement the `fetch` method__. If the\n    provider in use does not implement the method simply add it as follows:\n\n    ```js\n    // app/torii-providers/facebook.js\n    import FacebookOauth2Provider from 'torii/providers/facebook-oauth2';\n\n    export default class FacebookToriiProvider extends FacebookOauth2Provider {\n      fetch(data) {\n        return data;\n      }\n    }\n    ```\n\n    @method restore\n    @param {Object} data The data to restore the session from\n    @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated\n    @public\n  */\n  restore(data) {\n    this._assertToriiIsPresent();\n\n    data = data || {};\n    if (!isEmpty(data.provider)) {\n      const { provider } = data;\n\n      return this.get('torii').fetch(data.provider, data).then(\n        (fetchedData) => {\n          this._authenticateWithProvider(provider, fetchedData);\n          return Object.assign(data, fetchedData);\n        },\n        (err) => {\n          delete this._provider;\n          throw err;\n        }\n      );\n    } else {\n      delete this._provider;\n      return RSVP.reject();\n    }\n  },\n\n  /**\n    Authenticates the session by opening the specified torii provider. For more\n    documentation on torii and its providers abstraction, see the\n    [project's README](https://github.com/Vestorly/torii#readme), specifically\n    the\n    [section on providers](https://github.com/Vestorly/torii#configuring-a-torii-provider).\n\n    @method authenticate\n    @param {String} provider The torii provider to authenticate the session with\n    @param {Object} options The options to pass to the torii provider\n    @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated\n    @public\n  */\n  authenticate(provider, options) {\n    this._assertToriiIsPresent();\n\n    return this.get('torii').open(provider, options || {}).then((data) => {\n      this._authenticateWithProvider(provider, data);\n      return data;\n    });\n  },\n\n  /**\n    Closes the torii provider. If the provider is successfully closed, this\n    method returns a resolving promise, otherwise it will return a rejecting\n    promise, thus intercepting session invalidation.\n\n    @method invalidate\n    @return {Ember.RSVP.Promise} A promise that when it resolves results in the session being invalidated\n    @public\n  */\n  invalidate(data) {\n    return this.get('torii').close(this._provider, data).then(() => {\n      delete this._provider;\n    });\n  },\n\n  _authenticateWithProvider(provider, data) {\n    data.provider = provider;\n    this._provider = data.provider;\n  },\n\n  _assertToriiIsPresent() {\n    const torii = this.get('torii');\n    assert('You are trying to use the torii authenticator but torii is not available. Inject torii into the authenticator with \"torii: Ember.inject.service()\".', isPresent(torii));\n  }\n});\n"],"names":["deprecate","id","until","for","since","enabled","BaseAuthenticator","extend","_provider","restore","data","_assertToriiIsPresent","isEmpty","provider","get","fetch","then","fetchedData","_authenticateWithProvider","Object","assign","err","RSVP","reject","authenticate","options","open","invalidate","close","torii","assert","isPresent"],"mappings":"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"}