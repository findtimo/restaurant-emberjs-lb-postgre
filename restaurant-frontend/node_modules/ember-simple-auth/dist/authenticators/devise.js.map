{"version":3,"file":"devise.js","sources":["../../src/authenticators/devise.js"],"sourcesContent":["import { Promise } from 'rsvp';\nimport { isEmpty } from '@ember/utils';\nimport { run } from '@ember/runloop';\nimport BaseAuthenticator from './base';\nimport { waitFor } from '@ember/test-waiters';\n\nconst JSON_CONTENT_TYPE = 'application/json';\n\n/**\n  Authenticator that works with the Ruby gem\n  [devise](https://github.com/plataformatec/devise).\n\n  __As token authentication is not actually part of devise anymore, the server\n  needs to implement some customizations__ to work with this authenticator -\n  see [this gist](https://gist.github.com/josevalim/fb706b1e933ef01e4fb6).\n\n  @class DeviseAuthenticator\n  @module ember-simple-auth/authenticators/devise\n  @extends BaseAuthenticator\n  @public\n*/\nexport default BaseAuthenticator.extend({\n  /**\n    The endpoint on the server that the authentication request is sent to.\n\n    @property serverTokenEndpoint\n    @type String\n    @default '/users/sign_in'\n    @public\n  */\n  serverTokenEndpoint: '/users/sign_in',\n\n  /**\n    The devise resource name. __This will be used in the request and also be\n    expected in the server's response.__\n\n    @property resourceName\n    @type String\n    @default 'user'\n    @public\n  */\n  resourceName: 'user',\n\n  /**\n    The token attribute name. __This will be used in the request and also be\n    expected in the server's response.__\n\n    @property tokenAttributeName\n    @type String\n    @default 'token'\n    @public\n  */\n  tokenAttributeName: 'token',\n\n  /**\n    The identification attribute name. __This will be used in the request and\n    also be expected in the server's response.__\n\n    @property identificationAttributeName\n    @type String\n    @default 'email'\n    @public\n  */\n  identificationAttributeName: 'email',\n\n  /**\n    Restores the session from a session data object; __returns a resolving\n    promise when there are non-empty\n    {{#crossLink \"DeviseAuthenticator/tokenAttributeName:property\"}}token{{/crossLink}}\n    and\n    {{#crossLink \"DeviseAuthenticator/identificationAttributeName:property\"}}identification{{/crossLink}}\n    values in `data`__ and a rejecting promise otherwise.\n\n    @method restore\n    @param {Object} data The data to restore the session from\n    @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming or remaining authenticated\n    @public\n  */\n  restore(data) {\n    // eslint-disable-next-line prefer-promise-reject-errors\n    return this._validate(data) ? Promise.resolve(data) : Promise.reject();\n  },\n\n  /**\n    Authenticates the session with the specified `identification` and\n    `password`; the credentials are `POST`ed to the\n    {{#crossLink \"DeviseAuthenticator/serverTokenEndpoint:property\"}}server{{/crossLink}}.\n    If the credentials are valid the server will responds with a\n    {{#crossLink \"DeviseAuthenticator/tokenAttributeName:property\"}}token{{/crossLink}}\n    and\n    {{#crossLink \"DeviseAuthenticator/identificationAttributeName:property\"}}identification{{/crossLink}}.\n    __If the credentials are valid and authentication succeeds, a promise that\n    resolves with the server's response is returned__, otherwise a promise that\n    rejects with the server error is returned.\n\n    @method authenticate\n    @param {String} identification The user's identification\n    @param {String} password The user's password\n    @return {Ember.RSVP.Promise} A promise that when it resolves results in the session becoming authenticated. If authentication fails, the promise will reject with the server response; however, the authenticator reads that response already so if you need to read it again you need to clone the response object first\n    @public\n  */\n  authenticate(identification, password) {\n    return new Promise((resolve, reject) => {\n      const { resourceName, identificationAttributeName, tokenAttributeName } = this.getProperties('resourceName', 'identificationAttributeName', 'tokenAttributeName');\n      const data = {};\n      data[resourceName] = { password };\n      data[resourceName][identificationAttributeName] = identification;\n\n      this.makeRequest(data).then((response) => {\n        if (response.ok) {\n          response.json().then((json) => {\n            if (this._validate(json)) {\n              const resourceName = this.get('resourceName');\n              const _json = json[resourceName] ? json[resourceName] : json;\n              run(null, resolve, _json);\n            } else {\n              run(null, reject, `Check that server response includes ${tokenAttributeName} and ${identificationAttributeName}`);\n            }\n          });\n        } else {\n          run(null, reject, response);\n        }\n      }).catch((error) => run(null, reject, error));\n    });\n  },\n\n  /**\n    Does nothing\n\n    @method invalidate\n    @return {Ember.RSVP.Promise} A resolving promise\n    @public\n  */\n  invalidate() {\n    return Promise.resolve();\n  },\n\n  /**\n    Makes a request to the Devise server using\n    [ember-fetch](https://github.com/stefanpenner/ember-fetch).\n\n    @method makeRequest\n    @param {Object} data The request data\n    @param {Object} options request options that are passed to `fetch`\n    @return {Promise} The promise returned by `fetch`\n    @protected\n  */\n  makeRequest: waitFor(function(data, options = {}) {\n    let url = options.url || this.get('serverTokenEndpoint');\n    let requestOptions = {};\n    let body = JSON.stringify(data);\n    Object.assign(requestOptions, {\n      body,\n      method:   'POST',\n      headers:  {\n        'accept':       JSON_CONTENT_TYPE,\n        'content-type': JSON_CONTENT_TYPE\n      }\n    });\n    Object.assign(requestOptions, options || {});\n\n    return fetch(url, requestOptions);\n  }),\n\n  _validate(data) {\n    const tokenAttributeName = this.get('tokenAttributeName');\n    const identificationAttributeName = this.get('identificationAttributeName');\n    const resourceName = this.get('resourceName');\n    const _data = data[resourceName] ? data[resourceName] : data;\n\n    return !isEmpty(_data[tokenAttributeName]) && !isEmpty(_data[identificationAttributeName]);\n  }\n});\n"],"names":["JSON_CONTENT_TYPE","BaseAuthenticator","extend","serverTokenEndpoint","resourceName","tokenAttributeName","identificationAttributeName","restore","data","_validate","Promise","resolve","reject","authenticate","identification","password","getProperties","makeRequest","then","response","ok","json","get","_json","run","catch","error","invalidate","waitFor","options","url","requestOptions","body","JSON","stringify","Object","assign","method","headers","fetch","_data","isEmpty"],"mappings":"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"}