"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reporterForClient = void 0;
const operators_1 = require("rxjs/operators");
const reportBigTarballsProgress_1 = require("./reportBigTarballsProgress");
const reportContext_1 = require("./reportContext");
const reportExecutionTime_1 = require("./reportExecutionTime");
const reportDeprecations_1 = require("./reportDeprecations");
const reportHooks_1 = require("./reportHooks");
const reportInstallChecks_1 = require("./reportInstallChecks");
const reportLifecycleScripts_1 = require("./reportLifecycleScripts");
const reportMisc_1 = require("./reportMisc");
const reportPeerDependencyIssues_1 = require("./reportPeerDependencyIssues");
const reportProgress_1 = require("./reportProgress");
const reportRequestRetry_1 = require("./reportRequestRetry");
const reportScope_1 = require("./reportScope");
const reportSkippedOptionalDependencies_1 = require("./reportSkippedOptionalDependencies");
const reportStats_1 = require("./reportStats");
const reportSummary_1 = require("./reportSummary");
const reportUpdateCheck_1 = require("./reportUpdateCheck");
const PRINT_EXECUTION_TIME_IN_COMMANDS = {
    install: true,
    update: true,
    add: true,
    remove: true,
};
function reporterForClient(log$, opts) {
    const width = opts.width ?? process.stdout.columns ?? 80;
    const cwd = opts.pnpmConfig?.dir ?? process.cwd();
    const throttle = typeof opts.throttleProgress === 'number' && opts.throttleProgress > 0
        ? (0, operators_1.throttleTime)(opts.throttleProgress, undefined, { leading: true, trailing: true })
        : undefined;
    const outputs = [
        (0, reportLifecycleScripts_1.reportLifecycleScripts)(log$, {
            appendOnly: opts.appendOnly === true || opts.streamLifecycleOutput,
            aggregateOutput: opts.aggregateOutput,
            cwd,
            width,
        }),
        (0, reportMisc_1.reportMisc)(log$, {
            appendOnly: opts.appendOnly === true,
            config: opts.config,
            cwd,
            logLevel: opts.logLevel,
            zoomOutCurrent: opts.isRecursive,
        }),
        (0, reportInstallChecks_1.reportInstallChecks)(log$.installCheck, { cwd }),
        (0, reportScope_1.reportScope)(log$.scope, { isRecursive: opts.isRecursive, cmd: opts.cmd }),
        (0, reportSkippedOptionalDependencies_1.reportSkippedOptionalDependencies)(log$.skippedOptionalDependency, { cwd }),
        (0, reportHooks_1.reportHooks)(log$.hook, { cwd, isRecursive: opts.isRecursive }),
        (0, reportUpdateCheck_1.reportUpdateCheck)(log$.updateCheck, opts),
    ];
    if (opts.cmd !== 'dlx') {
        outputs.push((0, reportContext_1.reportContext)(log$, { cwd }));
    }
    if (opts.cmd in PRINT_EXECUTION_TIME_IN_COMMANDS) {
        outputs.push((0, reportExecutionTime_1.reportExecutionTime)(log$.executionTime));
    }
    // logLevelNumber: 0123 = error warn info debug
    const logLevelNumber = reportMisc_1.LOG_LEVEL_NUMBER[opts.logLevel ?? 'info'] ?? reportMisc_1.LOG_LEVEL_NUMBER['info'];
    if (logLevelNumber >= reportMisc_1.LOG_LEVEL_NUMBER.warn) {
        outputs.push((0, reportPeerDependencyIssues_1.reportPeerDependencyIssues)(log$), (0, reportDeprecations_1.reportDeprecations)(log$.deprecation, { cwd, isRecursive: opts.isRecursive }), (0, reportRequestRetry_1.reportRequestRetry)(log$.requestRetry));
    }
    if (logLevelNumber >= reportMisc_1.LOG_LEVEL_NUMBER.info) {
        outputs.push((0, reportProgress_1.reportProgress)(log$, {
            cwd,
            throttle,
        }), ...(0, reportStats_1.reportStats)(log$, {
            cmd: opts.cmd,
            cwd,
            isRecursive: opts.isRecursive,
            width,
        }));
    }
    if (!opts.appendOnly) {
        outputs.push((0, reportBigTarballsProgress_1.reportBigTarballProgress)(log$));
    }
    if (!opts.isRecursive) {
        outputs.push((0, reportSummary_1.reportSummary)(log$, {
            cwd,
            env: opts.env,
            filterPkgsDiff: opts.filterPkgsDiff,
            pnpmConfig: opts.pnpmConfig,
        }));
    }
    return outputs;
}
exports.reporterForClient = reporterForClient;
//# sourceMappingURL=index.js.map