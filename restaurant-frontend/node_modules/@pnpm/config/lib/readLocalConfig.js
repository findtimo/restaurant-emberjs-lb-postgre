"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readLocalConfig = void 0;
const path_1 = __importDefault(require("path"));
const camelcase_keys_1 = __importDefault(require("camelcase-keys"));
const config_env_replace_1 = require("@pnpm/config.env-replace");
const read_ini_file_1 = require("read-ini-file");
async function readLocalConfig(prefix) {
    try {
        const ini = await (0, read_ini_file_1.readIniFile)(path_1.default.join(prefix, '.npmrc'));
        const config = (0, camelcase_keys_1.default)(ini);
        if (config.shamefullyFlatten) {
            config.hoistPattern = '*';
            // TODO: print a warning
        }
        if (config.hoist === false) {
            config.hoistPattern = '';
        }
        for (const [key, val] of Object.entries(config)) {
            if (typeof val === 'string') {
                try {
                    config[key] = (0, config_env_replace_1.envReplace)(val, process.env);
                }
                catch (err) {
                    // ignore
                }
            }
        }
        return config;
    }
    catch (err) { // eslint-disable-line
        if (err.code !== 'ENOENT')
            throw err;
        return {};
    }
}
exports.readLocalConfig = readLocalConfig;
//# sourceMappingURL=readLocalConfig.js.map