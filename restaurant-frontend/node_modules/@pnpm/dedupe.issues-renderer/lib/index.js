"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderDedupeCheckIssues = void 0;
const archy_1 = __importDefault(require("archy"));
const chalk_1 = __importDefault(require("chalk"));
function renderDedupeCheckIssues(dedupeCheckIssues) {
    const importersReport = report(dedupeCheckIssues.importerIssuesByImporterId);
    const packagesReport = report(dedupeCheckIssues.packageIssuesByDepPath);
    const lines = [];
    if (importersReport !== '') {
        lines.push(chalk_1.default.blueBright.underline('Importers'));
        lines.push(importersReport);
        lines.push('');
    }
    if (packagesReport !== '') {
        lines.push(chalk_1.default.blueBright.underline('Packages'));
        lines.push(packagesReport);
        lines.push('');
    }
    return lines.join('\n');
}
exports.renderDedupeCheckIssues = renderDedupeCheckIssues;
/**
 * Render snapshot changes. Expected to return an empty string for no changes.
 */
function report(snapshotChanges) {
    return [
        ...Object.entries(snapshotChanges.updated).map(([alias, updates]) => (0, archy_1.default)(toArchy(alias, updates))),
        ...snapshotChanges.added.map((id) => `${chalk_1.default.green('+')} ${id}`),
        ...snapshotChanges.removed.map((id) => `${chalk_1.default.red('-')} ${id}`),
    ].join('\n');
}
function toArchy(name, issue) {
    return {
        label: name,
        nodes: Object.entries(issue).map(([alias, change]) => toArchyResolution(alias, change)),
    };
}
function toArchyResolution(alias, change) {
    switch (change.type) {
        case 'added':
            return { label: `${chalk_1.default.green('+')} ${alias} ${chalk_1.default.gray(change.next)}` };
        case 'removed':
            return { label: `${chalk_1.default.red('-')} ${alias} ${chalk_1.default.gray(change.prev)}` };
        case 'updated':
            return { label: `${alias} ${chalk_1.default.red(change.prev)} ${chalk_1.default.gray('â†’')} ${chalk_1.default.green(change.next)}` };
    }
}
//# sourceMappingURL=index.js.map