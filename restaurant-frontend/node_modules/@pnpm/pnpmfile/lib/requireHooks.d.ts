import type { PreResolutionHook } from '@pnpm/hooks.types';
import type { Lockfile } from '@pnpm/lockfile-types';
import type { Log } from '@pnpm/core-loggers';
import type { CustomFetchers } from '@pnpm/fetcher-base';
import { type ImportIndexedPackage } from '@pnpm/store-controller-types';
interface HookContext {
    log: (message: string) => void;
}
interface Hooks {
    readPackage?: (pkg: any, context: HookContext) => any;
    preResolution?: PreResolutionHook;
    afterAllResolved?: (lockfile: Lockfile, context: HookContext) => Lockfile | Promise<Lockfile>;
    filterLog?: (log: Log) => boolean;
    importPackage?: ImportIndexedPackage;
    fetchers?: CustomFetchers;
}
type Cook<T extends (...args: any[]) => any> = (arg: Parameters<T>[0], ...otherArgs: any[]) => ReturnType<T>;
export interface CookedHooks {
    readPackage?: Array<Cook<Required<Hooks>['readPackage']>>;
    preResolution?: Cook<Required<Hooks>['preResolution']>;
    afterAllResolved?: Array<Cook<Required<Hooks>['afterAllResolved']>>;
    filterLog?: Array<Cook<Required<Hooks>['filterLog']>>;
    importPackage?: ImportIndexedPackage;
    fetchers?: CustomFetchers;
}
export declare function requireHooks(prefix: string, opts: {
    globalPnpmfile?: string;
    pnpmfile?: string;
}): CookedHooks;
export {};
