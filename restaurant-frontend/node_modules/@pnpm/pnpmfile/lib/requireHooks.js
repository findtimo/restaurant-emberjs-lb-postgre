"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.requireHooks = void 0;
const path_1 = __importDefault(require("path"));
const core_loggers_1 = require("@pnpm/core-loggers");
const path_absolute_1 = __importDefault(require("path-absolute"));
const requirePnpmfile_1 = require("./requirePnpmfile");
function requireHooks(prefix, opts) {
    const globalPnpmfile = opts.globalPnpmfile && (0, requirePnpmfile_1.requirePnpmfile)((0, path_absolute_1.default)(opts.globalPnpmfile, prefix), prefix);
    let globalHooks = globalPnpmfile?.hooks;
    const pnpmFile = opts.pnpmfile && (0, requirePnpmfile_1.requirePnpmfile)((0, path_absolute_1.default)(opts.pnpmfile, prefix), prefix) ||
        (0, requirePnpmfile_1.requirePnpmfile)(path_1.default.join(prefix, '.pnpmfile.cjs'), prefix);
    let hooks = pnpmFile?.hooks;
    if (!globalHooks && !hooks)
        return { afterAllResolved: [], filterLog: [], readPackage: [] };
    globalHooks = globalHooks || {};
    hooks = hooks || {};
    const cookedHooks = {
        afterAllResolved: [],
        filterLog: [],
        readPackage: [],
    };
    for (const hookName of ['readPackage', 'afterAllResolved']) {
        if (globalHooks[hookName]) {
            const globalHook = globalHooks[hookName];
            const context = createReadPackageHookContext(globalPnpmfile.filename, prefix, hookName);
            cookedHooks[hookName].push((pkg) => globalHook(pkg, context)); // eslint-disable-line @typescript-eslint/no-explicit-any
        }
        if (hooks[hookName]) {
            const hook = hooks[hookName];
            const context = createReadPackageHookContext(pnpmFile.filename, prefix, hookName);
            cookedHooks[hookName].push((pkg) => hook(pkg, context)); // eslint-disable-line @typescript-eslint/no-explicit-any
        }
    }
    if (globalHooks.filterLog != null) {
        cookedHooks.filterLog.push(globalHooks.filterLog);
    }
    if (hooks.filterLog != null) {
        cookedHooks.filterLog.push(hooks.filterLog);
    }
    // `importPackage`, `preResolution` and `fetchers` can only be defined via a global pnpmfile
    cookedHooks.importPackage = globalHooks.importPackage;
    const preResolutionHook = globalHooks.preResolution;
    cookedHooks.preResolution = preResolutionHook
        ? (ctx) => preResolutionHook(ctx, createPreResolutionHookLogger(prefix))
        : undefined;
    cookedHooks.fetchers = globalHooks.fetchers;
    return cookedHooks;
}
exports.requireHooks = requireHooks;
function createReadPackageHookContext(calledFrom, prefix, hook) {
    return {
        log: (message) => {
            core_loggers_1.hookLogger.debug({
                from: calledFrom,
                hook,
                message,
                prefix,
            });
        },
    };
}
function createPreResolutionHookLogger(prefix) {
    const hook = 'preResolution';
    return {
        info: (message) => core_loggers_1.hookLogger.info({ message, prefix, hook }),
        warn: (message) => core_loggers_1.hookLogger.warn({ message, prefix, hook }), // eslint-disable-line
    };
}
//# sourceMappingURL=requireHooks.js.map