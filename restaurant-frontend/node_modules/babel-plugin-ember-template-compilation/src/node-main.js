"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const plugin_1 = require("./plugin");
const ember_template_compiler_1 = require("./ember-template-compiler");
__exportStar(require("./public-types"), exports);
function cwdRequire(moduleName) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    return require(require.resolve(moduleName, { paths: [process.cwd()] }));
}
function handleNodeSpecificOptions(opts) {
    let compiler = undefined;
    if (opts.compilerPath) {
        let mod = cwdRequire(opts.compilerPath);
        (0, ember_template_compiler_1.assertTemplateCompiler)(mod);
        compiler = mod;
    }
    else if (opts.compiler) {
        (0, ember_template_compiler_1.assertTemplateCompiler)(opts.compiler);
        compiler = opts.compiler;
    }
    let transforms = [];
    if (opts.transforms) {
        transforms = opts.transforms.map((t) => {
            if (typeof t === 'string') {
                return esCompat(cwdRequire(t)).default;
            }
            else if (Array.isArray(t) && typeof t[0] === 'string') {
                return esCompat(cwdRequire(t[0])).default.call(undefined, t[1]);
            }
            else {
                return t;
            }
        });
    }
    return Object.assign(Object.assign({}, opts), { transforms, compiler });
}
const htmlbarsInlinePrecompile = (0, plugin_1.makePlugin)(handleNodeSpecificOptions);
htmlbarsInlinePrecompile._parallelBabel = {
    requireFile: __filename,
};
htmlbarsInlinePrecompile.baseDir = function () {
    return (0, path_1.resolve)(__dirname, '..');
};
exports.default = htmlbarsInlinePrecompile;
function esCompat(m) {
    return (m === null || m === void 0 ? void 0 : m.__esModule) ? m : { default: m };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS1tYWluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibm9kZS1tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwrQkFBK0I7QUFDL0IscUNBQXNDO0FBR3RDLHVFQUEwRjtBQUcxRixpREFBK0I7QUF1Qi9CLFNBQVMsVUFBVSxDQUFDLFVBQWtCO0lBQ3BDLDhEQUE4RDtJQUM5RCxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzFFLENBQUM7QUFFRCxTQUFTLHlCQUF5QixDQUFDLElBQWE7SUFDOUMsSUFBSSxRQUFRLEdBQXNDLFNBQVMsQ0FBQztJQUM1RCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7UUFDckIsSUFBSSxHQUFHLEdBQVEsVUFBVSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUM3QyxJQUFBLGdEQUFzQixFQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLFFBQVEsR0FBRyxHQUFHLENBQUM7S0FDaEI7U0FBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFDeEIsSUFBQSxnREFBc0IsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDMUI7SUFFRCxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDcEIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1FBQ25CLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3JDLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUN6QixPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7YUFDeEM7aUJBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDdkQsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDakU7aUJBQU07Z0JBQ0wsT0FBTyxDQUFDLENBQUM7YUFDVjtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCx1Q0FBWSxJQUFJLEtBQUUsVUFBVSxFQUFFLFFBQVEsSUFBRztBQUMzQyxDQUFDO0FBRUQsTUFBTSx3QkFBd0IsR0FBRyxJQUFBLG1CQUFVLEVBQUMseUJBQXlCLENBQUMsQ0FBQztBQUV0RSx3QkFBZ0MsQ0FBQyxjQUFjLEdBQUc7SUFDakQsV0FBVyxFQUFFLFVBQVU7Q0FDeEIsQ0FBQztBQUVELHdCQUFnQyxDQUFDLE9BQU8sR0FBRztJQUMxQyxPQUFPLElBQUEsY0FBTyxFQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFFRixrQkFBZSx3QkFHZCxDQUFDO0FBRUYsU0FBUyxRQUFRLENBQUMsQ0FBc0I7SUFDdEMsT0FBTyxDQUFBLENBQUMsYUFBRCxDQUFDLHVCQUFELENBQUMsQ0FBRSxVQUFVLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJztcbmltcG9ydCB7IG1ha2VQbHVnaW4gfSBmcm9tICcuL3BsdWdpbic7XG5cbmltcG9ydCB7IE9wdGlvbnMgYXMgU2hhcmVkT3B0aW9ucyB9IGZyb20gJy4vcGx1Z2luJztcbmltcG9ydCB7IGFzc2VydFRlbXBsYXRlQ29tcGlsZXIsIEVtYmVyVGVtcGxhdGVDb21waWxlciB9IGZyb20gJy4vZW1iZXItdGVtcGxhdGUtY29tcGlsZXInO1xuaW1wb3J0IHsgRXh0ZW5kZWRQbHVnaW5CdWlsZGVyIH0gZnJvbSAnLi9qcy11dGlscyc7XG5cbmV4cG9ydCAqIGZyb20gJy4vcHVibGljLXR5cGVzJztcblxuZXhwb3J0IHR5cGUgVHJhbnNmb3JtID0gRXh0ZW5kZWRQbHVnaW5CdWlsZGVyIHwgc3RyaW5nIHwgW3N0cmluZywgdW5rbm93bl07XG5cbmV4cG9ydCB0eXBlIE9wdGlvbnMgPSBPbWl0PFNoYXJlZE9wdGlvbnMsICd0cmFuc2Zvcm1zJyB8ICdjb21waWxlcic+ICYge1xuICAvLyBUaGUgb24tZGlzayBwYXRoIHRvIHRoZSBlbWJlci10ZW1wbGF0ZS1jb21pcGxlci5qcyBtb2R1bGUgZm9yIG91ciBjdXJyZW50XG4gIC8vIGVtYmVyIHZlcnNpb24uIFlvdSBuZWVkIHRvIGVpdGhlciBzZXQgYGNvbXBpbGVyUGF0aGAgb3Igc2V0IGBjb21waWxlcmAuXG4gIGNvbXBpbGVyUGF0aD86IHN0cmluZztcblxuICAvLyBUaGUgZW1iZXItdGVtcGxhdGUtY29tcGlsZXIuanMgbW9kdWxlIHRoYXQgc2hpcHMgd2l0aGluIHlvdXIgZW1iZXItc291cmNlXG4gIC8vIHZlcnNpb24uIFlvdSBuZWVkIHRvIHNldCBlaXRoZXIgYGNvbXBpbGVyUGF0aGAgb3IgYGNvbXBpbGVyYC5cbiAgY29tcGlsZXI/OiBFbWJlclRlbXBsYXRlQ29tcGlsZXI7XG5cbiAgLy8gTGlzdCBvZiBjdXN0b20gdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSBoYW5kbGViYXJzIEFTVCBiZWZvcmVcbiAgLy8gY29tcGlsYXRpb24uIFRoZXNlIGNhbiBiZVxuICAvLyAgIC0gdGhlIGFjdHVhbCBmdW5jdGlvbnNcbiAgLy8gICAtIHJlc29sdmFibGUgbW9kdWxlIG5hbWVzXG4gIC8vICAgLSBwYWlycyBvZiBbcmVzb2x2YWJsZU1vZHVsZU5hbWUsIG9wdGlvbnNdLCBpbiB3aGljaCBjYXNlIHdlIHdpbGwgaW52b2tlXG4gIC8vICAgICB0aGUgZGVmYXVsdCBleHBvcnQgb2YgdGhlIG1vZHVsZSB3aXRoIHRoZSBvcHRpb25zIGFzIGFyZ3VtZW50LCBhbmQgdGhlXG4gIC8vICAgICBhY3R1YWwgYXN0IHRyYW5zZm9ybSBmdW5jdGlvbiBzaG91bGQgYmUgcmV0dXJuZWQuXG4gIHRyYW5zZm9ybXM/OiBUcmFuc2Zvcm1bXTtcbn07XG5cbmZ1bmN0aW9uIGN3ZFJlcXVpcmUobW9kdWxlTmFtZTogc3RyaW5nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdmFyLXJlcXVpcmVzXG4gIHJldHVybiByZXF1aXJlKHJlcXVpcmUucmVzb2x2ZShtb2R1bGVOYW1lLCB7IHBhdGhzOiBbcHJvY2Vzcy5jd2QoKV0gfSkpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVOb2RlU3BlY2lmaWNPcHRpb25zKG9wdHM6IE9wdGlvbnMpOiBTaGFyZWRPcHRpb25zIHtcbiAgbGV0IGNvbXBpbGVyOiBFbWJlclRlbXBsYXRlQ29tcGlsZXIgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIGlmIChvcHRzLmNvbXBpbGVyUGF0aCkge1xuICAgIGxldCBtb2Q6IGFueSA9IGN3ZFJlcXVpcmUob3B0cy5jb21waWxlclBhdGgpO1xuICAgIGFzc2VydFRlbXBsYXRlQ29tcGlsZXIobW9kKTtcbiAgICBjb21waWxlciA9IG1vZDtcbiAgfSBlbHNlIGlmIChvcHRzLmNvbXBpbGVyKSB7XG4gICAgYXNzZXJ0VGVtcGxhdGVDb21waWxlcihvcHRzLmNvbXBpbGVyKTtcbiAgICBjb21waWxlciA9IG9wdHMuY29tcGlsZXI7XG4gIH1cblxuICBsZXQgdHJhbnNmb3JtcyA9IFtdO1xuICBpZiAob3B0cy50cmFuc2Zvcm1zKSB7XG4gICAgdHJhbnNmb3JtcyA9IG9wdHMudHJhbnNmb3Jtcy5tYXAoKHQpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGVzQ29tcGF0KGN3ZFJlcXVpcmUodCkpLmRlZmF1bHQ7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodCkgJiYgdHlwZW9mIHRbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBlc0NvbXBhdChjd2RSZXF1aXJlKHRbMF0pKS5kZWZhdWx0LmNhbGwodW5kZWZpbmVkLCB0WzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7IC4uLm9wdHMsIHRyYW5zZm9ybXMsIGNvbXBpbGVyIH07XG59XG5cbmNvbnN0IGh0bWxiYXJzSW5saW5lUHJlY29tcGlsZSA9IG1ha2VQbHVnaW4oaGFuZGxlTm9kZVNwZWNpZmljT3B0aW9ucyk7XG5cbihodG1sYmFyc0lubGluZVByZWNvbXBpbGUgYXMgYW55KS5fcGFyYWxsZWxCYWJlbCA9IHtcbiAgcmVxdWlyZUZpbGU6IF9fZmlsZW5hbWUsXG59O1xuXG4oaHRtbGJhcnNJbmxpbmVQcmVjb21waWxlIGFzIGFueSkuYmFzZURpciA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHJlc29sdmUoX19kaXJuYW1lLCAnLi4nKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGh0bWxiYXJzSW5saW5lUHJlY29tcGlsZSBhcyB0eXBlb2YgaHRtbGJhcnNJbmxpbmVQcmVjb21waWxlICYge1xuICBiYXNlRGlyKCk6IHN0cmluZztcbiAgX3BhcmFsbGVsQmFiZWw6IHsgcmVxdWlyZUZpbGU6IHN0cmluZyB9O1xufTtcblxuZnVuY3Rpb24gZXNDb21wYXQobTogUmVjb3JkPHN0cmluZywgYW55Pikge1xuICByZXR1cm4gbT8uX19lc01vZHVsZSA/IG0gOiB7IGRlZmF1bHQ6IG0gfTtcbn1cbiJdfQ==