"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _JSUtils_instances, _JSUtils_babel, _JSUtils_state, _JSUtils_template, _JSUtils_scopeLocals, _JSUtils_importer, _JSUtils_emitStatement, _JSUtils_parseExpression, _ExpressionContext_importer, _ExpressionContext_target;
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSUtils = void 0;
// This exists to give AST plugins a controlled interface for influencing the
// surrounding Javascript scope
class JSUtils {
    constructor(babel, state, template, 
    // mapping of handlebars identifiers to javascript identifiers, as appears
    // in the `scope` argument to precompileTemplate. This is both read and
    // write -- we might put more stuff into it.
    scopeLocals, importer) {
        _JSUtils_instances.add(this);
        _JSUtils_babel.set(this, void 0);
        _JSUtils_state.set(this, void 0);
        _JSUtils_template.set(this, void 0);
        _JSUtils_scopeLocals.set(this, void 0);
        _JSUtils_importer.set(this, void 0);
        __classPrivateFieldSet(this, _JSUtils_babel, babel, "f");
        __classPrivateFieldSet(this, _JSUtils_state, state, "f");
        __classPrivateFieldSet(this, _JSUtils_template, template, "f");
        __classPrivateFieldSet(this, _JSUtils_scopeLocals, scopeLocals, "f");
        __classPrivateFieldSet(this, _JSUtils_importer, importer, "f");
        if (!__classPrivateFieldGet(this, _JSUtils_state, "f").lastInsertedPath) {
            let target;
            for (let statement of __classPrivateFieldGet(this, _JSUtils_state, "f").program.get('body')) {
                if (!statement.isImportDeclaration()) {
                    break;
                }
                target = statement;
            }
            if (target) {
                __classPrivateFieldGet(this, _JSUtils_state, "f").lastInsertedPath = target;
            }
        }
    }
    /**
     * Create a new binding that you can use in your template, initialized with
     * the given Javascript expression.
     *
     * @param { Expression } expression A javascript expression whose value will
     * initialize your new binding. See docs on the Expression type for details.
     * @param target The location within your template where the binding will be
     * used. This matters so we can avoid naming collisions.
     * @param opts.nameHint Optionally, provide a descriptive name for your new
     * binding. We will mangle this name as needed to avoid collisions, but
     * picking a good name here can aid in debugging.
     *
     * @return The name you can use in your template to access the binding.
     */
    bindExpression(expression, target, opts) {
        var _a;
        let name = unusedNameLike((_a = opts === null || opts === void 0 ? void 0 : opts.nameHint) !== null && _a !== void 0 ? _a : 'a', (candidate) => __classPrivateFieldGet(this, _JSUtils_template, "f").scope.hasBinding(candidate) ||
            __classPrivateFieldGet(this, _JSUtils_scopeLocals, "f").has(candidate) ||
            astNodeHasBinding(target, candidate));
        let t = __classPrivateFieldGet(this, _JSUtils_babel, "f").types;
        let declaration = __classPrivateFieldGet(this, _JSUtils_instances, "m", _JSUtils_emitStatement).call(this, t.variableDeclaration('let', [
            t.variableDeclarator(t.identifier(name), __classPrivateFieldGet(this, _JSUtils_instances, "m", _JSUtils_parseExpression).call(this, __classPrivateFieldGet(this, _JSUtils_state, "f").program, expression)),
        ]));
        declaration.scope.registerBinding('module', declaration.get('declarations.0'));
        __classPrivateFieldGet(this, _JSUtils_scopeLocals, "f").add(name);
        return name;
    }
    /**
     * Gain access to an imported value within your template.
     *
     * @param moduleSpecifier The path to import from.
     * @param exportedName The named export you wish to access, or "default" for
     * the default export, or "*" for the namespace export.
     * @param target The location within your template where the binding will be
     * used. This matters so we can avoid naming collisions.
     * @param opts.nameHint Optionally, provide a descriptive name for your new
     * binding. We will mangle this name as needed to avoid collisions, but
     * picking a good name here can aid in debugging.
     *
     * @return The name you can use in your template to access the imported value.
     */
    bindImport(moduleSpecifier, exportedName, target, opts) {
        // This will discover or create the local name for accessing the given import.
        let importedIdentifier = __classPrivateFieldGet(this, _JSUtils_importer, "f").import(__classPrivateFieldGet(this, _JSUtils_template, "f"), moduleSpecifier, exportedName, opts === null || opts === void 0 ? void 0 : opts.nameHint);
        // If we're already referencing the imported name from the outer scope and
        // it's not shadowed at our target location in the template, we can reuse
        // the existing import.
        if (__classPrivateFieldGet(this, _JSUtils_scopeLocals, "f").has(importedIdentifier.name) &&
            !astNodeHasBinding(target, importedIdentifier.name)) {
            return importedIdentifier.name;
        }
        let identifier = unusedNameLike(importedIdentifier.name, (candidate) => __classPrivateFieldGet(this, _JSUtils_scopeLocals, "f").has(candidate) || astNodeHasBinding(target, candidate));
        if (identifier !== importedIdentifier.name) {
            // The importedIdentifier that we have in Javascript is not usable within
            // our HBS because it's shadowed by a block param. So we will introduce a
            // second name via a variable declaration.
            //
            // The reason we don't force the import itself to have this name is that
            // we might be re-using an existing import, and we don't want to go
            // rewriting all of its callsites that are unrelated to us.
            let t = __classPrivateFieldGet(this, _JSUtils_babel, "f").types;
            __classPrivateFieldGet(this, _JSUtils_instances, "m", _JSUtils_emitStatement).call(this, t.variableDeclaration('let', [
                t.variableDeclarator(t.identifier(identifier), importedIdentifier),
            ]));
        }
        __classPrivateFieldGet(this, _JSUtils_scopeLocals, "f").add(identifier);
        return identifier;
    }
    /**
     * Add an import statement purely for side effect.
     *
     * @param moduleSpecifier the module to import
     */
    importForSideEffect(moduleSpecifier) {
        __classPrivateFieldGet(this, _JSUtils_importer, "f").importForSideEffect(moduleSpecifier);
    }
    /**
     * Emit a javascript expresison for side-effect. This only accepts
     * expressions, not statements, because you should not introduce new bindings.
     * To introduce a binding see bindExpression or bindImport instead.
     *
     * @param { Expression } expression A javascript expression whose value will
     * initialize your new binding. See docs on the Expression type below for
     * details.
     */
    emitExpression(expression) {
        let t = __classPrivateFieldGet(this, _JSUtils_babel, "f").types;
        __classPrivateFieldGet(this, _JSUtils_instances, "m", _JSUtils_emitStatement).call(this, t.expressionStatement(__classPrivateFieldGet(this, _JSUtils_instances, "m", _JSUtils_parseExpression).call(this, __classPrivateFieldGet(this, _JSUtils_state, "f").program, expression)));
    }
}
exports.JSUtils = JSUtils;
_JSUtils_babel = new WeakMap(), _JSUtils_state = new WeakMap(), _JSUtils_template = new WeakMap(), _JSUtils_scopeLocals = new WeakMap(), _JSUtils_importer = new WeakMap(), _JSUtils_instances = new WeakSet(), _JSUtils_emitStatement = function _JSUtils_emitStatement(statement) {
    if (__classPrivateFieldGet(this, _JSUtils_state, "f").lastInsertedPath) {
        __classPrivateFieldGet(this, _JSUtils_state, "f").lastInsertedPath = __classPrivateFieldGet(this, _JSUtils_state, "f").lastInsertedPath.insertAfter(statement)[0];
    }
    else {
        __classPrivateFieldGet(this, _JSUtils_state, "f").lastInsertedPath = __classPrivateFieldGet(this, _JSUtils_state, "f").program.unshiftContainer('body', statement)[0];
    }
    return __classPrivateFieldGet(this, _JSUtils_state, "f").lastInsertedPath;
}, _JSUtils_parseExpression = function _JSUtils_parseExpression(target, expression) {
    let expressionString;
    if (typeof expression === 'string') {
        expressionString = expression;
    }
    else {
        expressionString = expression(new ExpressionContext(__classPrivateFieldGet(this, _JSUtils_importer, "f"), target));
    }
    let parsed = __classPrivateFieldGet(this, _JSUtils_babel, "f").parse(expressionString);
    if (!parsed) {
        throw new Error(`JSUtils.bindExpression could not understand the expression: ${expressionString}`);
    }
    let statements = body(parsed);
    if (statements.length !== 1) {
        throw new Error(`JSUtils.bindExpression expected to find exactly one expression but found ${statements.length} in: ${expressionString}`);
    }
    let statement = statements[0];
    if (statement.type !== 'ExpressionStatement') {
        throw new Error(`JSUtils.bindExpression expected to find an expression but found ${statement.type} in: ${expressionString}`);
    }
    return statement.expression;
};
function unusedNameLike(desiredName, isUsed) {
    let candidate = desiredName;
    let counter = 0;
    while (isUsed(candidate)) {
        candidate = `${desiredName}${counter++}`;
    }
    return candidate;
}
function astNodeHasBinding(target, name) {
    var _a;
    let cursor = target;
    while (cursor) {
        let parentNode = (_a = cursor.parent) === null || _a === void 0 ? void 0 : _a.node;
        if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === 'ElementNode' &&
            parentNode.blockParams.includes(name) &&
            // an ElementNode's block params are valid only within its children
            parentNode.children.includes(cursor.node)) {
            return true;
        }
        if ((parentNode === null || parentNode === void 0 ? void 0 : parentNode.type) === 'Block' &&
            parentNode.blockParams.includes(name) &&
            // a Block's blockParams are valid only within its body
            parentNode.body.includes(cursor.node)) {
            return true;
        }
        cursor = cursor.parent;
    }
    return false;
}
function body(node) {
    if (node.type === 'File') {
        return node.program.body;
    }
    else {
        return node.body;
    }
}
/**
 * Allows you to construct an expression that relies on imported values.
 */
class ExpressionContext {
    constructor(importer, target) {
        _ExpressionContext_importer.set(this, void 0);
        _ExpressionContext_target.set(this, void 0);
        __classPrivateFieldSet(this, _ExpressionContext_importer, importer, "f");
        __classPrivateFieldSet(this, _ExpressionContext_target, target, "f");
    }
    /**
     * Find or create a local binding for the given import.
     *
     * @param moduleSpecifier The path to import from.
     * @param exportedName The named export you wish to access, or "default" for
     * the default export, or "*" for the namespace export.
     * @param nameHint Optionally, provide a descriptive name for your new
     * binding. We will mangle this name as needed to avoid collisions, but
     * picking a good name here can aid in debugging.
  
     * @return the local identifier for the imported value
     */
    import(moduleSpecifier, exportedName, nameHint) {
        return __classPrivateFieldGet(this, _ExpressionContext_importer, "f").import(__classPrivateFieldGet(this, _ExpressionContext_target, "f"), moduleSpecifier, exportedName, nameHint).name;
    }
}
_ExpressionContext_importer = new WeakMap(), _ExpressionContext_target = new WeakMap();
//# sourceMappingURL=data:application/json;base64,