import { VmMachineOp, VmOp } from "@glimmer/interfaces";
declare const ContentType: {
    readonly Component: 0;
    readonly Helper: 1;
    readonly String: 2;
    readonly Empty: 3;
    readonly SafeString: 4;
    readonly Fragment: 5;
    readonly Node: 6;
    readonly Other: 8;
};
declare const CurriedTypes: {
    readonly Component: 0;
    readonly Helper: 1;
    readonly Modifier: 2;
};
declare const InternalComponentCapabilities: {
    readonly Empty: 0;
    readonly dynamicLayout: 1;
    readonly dynamicTag: 2;
    readonly prepareArgs: 4;
    readonly createArgs: 8;
    readonly attributeHook: 16;
    readonly elementHook: 32;
    readonly dynamicScope: 64;
    readonly createCaller: 128;
    readonly updateHook: 256;
    readonly createInstance: 512;
    readonly wrapped: 1024;
    readonly willDestroy: 2048;
    readonly hasSubOwner: 4096;
};
declare const ARG_SHIFT: 8;
declare const MAX_SIZE: 2147483647;
declare const TYPE_SIZE: 255;
declare const TYPE_MASK: 255;
declare const OPERAND_LEN_MASK: 768;
declare const MACHINE_MASK: 1024;
declare const MachineOp: {
    readonly PushFrame: 0;
    readonly PopFrame: 1;
    readonly InvokeVirtual: 2;
    readonly InvokeStatic: 3;
    readonly Jump: 4;
    readonly Return: 5;
    readonly ReturnTo: 6;
    readonly Size: 7;
};
declare const Op: {
    readonly Helper: 16;
    readonly SetNamedVariables: 17;
    readonly SetBlocks: 18;
    readonly SetVariable: 19;
    readonly SetBlock: 20;
    readonly GetVariable: 21;
    readonly GetProperty: 22;
    readonly GetBlock: 23;
    readonly SpreadBlock: 24;
    readonly HasBlock: 25;
    readonly HasBlockParams: 26;
    readonly Concat: 27;
    readonly Constant: 28;
    readonly ConstantReference: 29;
    readonly Primitive: 30;
    readonly PrimitiveReference: 31;
    readonly ReifyU32: 32;
    readonly Dup: 33;
    readonly Pop: 34;
    readonly Load: 35;
    readonly Fetch: 36;
    readonly RootScope: 37;
    readonly VirtualRootScope: 38;
    readonly ChildScope: 39;
    readonly PopScope: 40;
    readonly Text: 41;
    readonly Comment: 42;
    readonly AppendHTML: 43;
    readonly AppendSafeHTML: 44;
    readonly AppendDocumentFragment: 45;
    readonly AppendNode: 46;
    readonly AppendText: 47;
    readonly OpenElement: 48;
    readonly OpenDynamicElement: 49;
    readonly PushRemoteElement: 50;
    readonly StaticAttr: 51;
    readonly DynamicAttr: 52;
    readonly ComponentAttr: 53;
    readonly FlushElement: 54;
    readonly CloseElement: 55;
    readonly PopRemoteElement: 56;
    readonly Modifier: 57;
    readonly BindDynamicScope: 58;
    readonly PushDynamicScope: 59;
    readonly PopDynamicScope: 60;
    readonly CompileBlock: 61;
    readonly PushBlockScope: 62;
    readonly PushSymbolTable: 63;
    readonly InvokeYield: 64;
    readonly JumpIf: 65;
    readonly JumpUnless: 66;
    readonly JumpEq: 67;
    readonly AssertSame: 68;
    readonly Enter: 69;
    readonly Exit: 70;
    readonly ToBoolean: 71;
    readonly EnterList: 72;
    readonly ExitList: 73;
    readonly Iterate: 74;
    readonly Main: 75;
    readonly ContentType: 76;
    readonly Curry: 77;
    readonly PushComponentDefinition: 78;
    readonly PushDynamicComponentInstance: 79;
    readonly ResolveDynamicComponent: 80;
    readonly ResolveCurriedComponent: 81;
    readonly PushArgs: 82;
    readonly PushEmptyArgs: 83;
    readonly PopArgs: 84;
    readonly PrepareArgs: 85;
    readonly CaptureArgs: 86;
    readonly CreateComponent: 87;
    readonly RegisterComponentDestructor: 88;
    readonly PutComponentOperations: 89;
    readonly GetComponentSelf: 90;
    readonly GetComponentTagName: 91;
    readonly GetComponentLayout: 92;
    readonly BindEvalScope: 93;
    readonly SetupForEval: 94;
    readonly PopulateLayout: 95;
    readonly InvokeComponentLayout: 96;
    readonly BeginComponentTransaction: 97;
    readonly CommitComponentTransaction: 98;
    readonly DidCreateElement: 99;
    readonly DidRenderLayout: 100;
    readonly ResolveMaybeLocal: 102;
    readonly Debugger: 103;
    readonly Size: 104;
    readonly StaticComponentAttr: 105;
    readonly DynamicContentType: 106;
    readonly DynamicHelper: 107;
    readonly DynamicModifier: 108;
    readonly IfInline: 109;
    readonly Not: 110;
    readonly GetDynamicVar: 111;
    readonly Log: 112;
};
declare function isMachineOp(value: number): value is VmMachineOp;
declare function isOp(value: number): value is VmOp;
/**
 * Registers
 *
 * For the most part, these follows MIPS naming conventions, however the
 * register numbers are different.
 */
// $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit
declare const $pc: MachineRegister.pc;
// $1 or $ra (return address): pointer into `program` for the return
declare const $ra: MachineRegister.ra;
// $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack
declare const $fp: MachineRegister.fp;
// $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack
declare const $sp: MachineRegister.sp;
// $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers
declare const $s0: SavedRegister.s0;
declare const $s1: SavedRegister.s1;
// $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers
declare const $t0: TemporaryRegister.t0;
declare const $t1: TemporaryRegister.t1;
// $8 or $v0 (return value)
declare const $v0 = 8;
declare enum MachineRegister {
    // These must be in sync with the computed values
    // above, but TypeScript doesn't like it
    "pc" = 0,
    "ra" = 1,
    "fp" = 2,
    "sp" = 3
}
declare function isLowLevelRegister(register: Register | MachineRegister): register is Register & MachineRegister;
declare enum SavedRegister {
    "s0" = 4,
    "s1" = 5
}
declare enum TemporaryRegister {
    "t0" = 6,
    "t1" = 7
}
type Register = MachineRegister | SavedRegister | TemporaryRegister | typeof $v0;
type SyscallRegister = SavedRegister | TemporaryRegister | typeof $v0;
export { ContentType, ARG_SHIFT, CurriedTypes as CurriedType, CurriedTypes, InternalComponentCapabilities, InternalComponentCapabilities as InternalComponentCapability, MACHINE_MASK, MAX_SIZE, OPERAND_LEN_MASK, TYPE_MASK, TYPE_SIZE, isMachineOp, isOp, MachineOp, Op, $fp, $pc, $ra, $s0, $s1, $sp, $t0, $t1, $v0, isLowLevelRegister, MachineRegister, Register, SavedRegister, SyscallRegister, TemporaryRegister };
//# sourceMappingURL=index.d.cts.map