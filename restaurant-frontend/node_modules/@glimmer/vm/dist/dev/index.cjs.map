{"version":3,"file":"index.cjs","sources":["../../lib/content.ts","../../lib/registers.ts"],"sourcesContent":["export const ContentType = {\n  Component: 0,\n  Helper: 1,\n  String: 2,\n  Empty: 3,\n  SafeString: 4,\n  Fragment: 5,\n  Node: 6,\n  Other: 8,\n} as const;\n","/**\n * Registers\n *\n * For the most part, these follows MIPS naming conventions, however the\n * register numbers are different.\n */\n\n// $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit\nexport const $pc: MachineRegister.pc = 0;\n// $1 or $ra (return address): pointer into `program` for the return\nexport const $ra: MachineRegister.ra = 1;\n// $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack\nexport const $fp: MachineRegister.fp = 2;\n// $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack\nexport const $sp: MachineRegister.sp = 3;\n// $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers\nexport const $s0: SavedRegister.s0 = 4;\nexport const $s1: SavedRegister.s1 = 5;\n// $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers\nexport const $t0: TemporaryRegister.t0 = 6;\nexport const $t1: TemporaryRegister.t1 = 7;\n// $8 or $v0 (return value)\nexport const $v0 = 8;\n\nexport enum MachineRegister {\n  // These must be in sync with the computed values\n  // above, but TypeScript doesn't like it\n\n  'pc' = 0,\n  'ra' = 1,\n  'fp' = 2,\n  'sp' = 3,\n}\n\nexport function isLowLevelRegister(\n  register: Register | MachineRegister\n): register is Register & MachineRegister {\n  return (register as number) <= $sp;\n}\n\nexport enum SavedRegister {\n  's0' = 4,\n  's1' = 5,\n}\n\nexport enum TemporaryRegister {\n  't0' = 6,\n  't1' = 7,\n}\n\nexport type Register = MachineRegister | SavedRegister | TemporaryRegister | typeof $v0;\nexport type SyscallRegister = SavedRegister | TemporaryRegister | typeof $v0;\n"],"names":["ContentType"],"mappings":";;AAAA,MAAAA,WAAA,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}