import { Bounds, Nullable, SimpleDocument, SimpleElement, SimpleNode, ElementBuilder, Environment } from "@glimmer/interfaces";
import { DOMTreeConstruction } from "@glimmer/runtime";
declare class NodeDOMTreeConstruction extends DOMTreeConstruction {
    protected document: SimpleDocument; // Hides property on base class
    constructor(doc: Nullable<SimpleDocument>);
    // override to prevent usage of `this.document` until after the constructor
    protected setupUselessElement(): void;
    insertHTMLBefore(parent: SimpleElement, reference: Nullable<SimpleNode>, html: string): Bounds;
    // override to avoid SVG detection/work when in node (this is not needed in SSR)
    createElement(tag: string): SimpleElement;
    // override to avoid namespace shenanigans when in node (this is not needed in SSR)
    setAttribute(element: SimpleElement, name: string, value: string): void;
}
declare function serializeBuilder(env: Environment, cursor: {
    element: SimpleElement;
    nextSibling: Nullable<SimpleNode>;
}): ElementBuilder;
export { NodeDOMTreeConstruction, serializeBuilder };
//# sourceMappingURL=index.d.ts.map