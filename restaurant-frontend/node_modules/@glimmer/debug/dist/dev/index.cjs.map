{"version":3,"file":"index.cjs","sources":["../../lib/opcode-metadata.ts"],"sourcesContent":["/* This file is generated by build/debug.js */\n\nimport type { Nullable, VmMachineOp, VmOp } from '@glimmer/interfaces';\nimport { MachineOp, Op } from '@glimmer/vm';\n\nimport type { NormalizedMetadata } from './metadata';\n\nexport function opcodeMetadata(\n  op: VmMachineOp | VmOp,\n  isMachine: 0 | 1\n): Nullable<NormalizedMetadata> {\n  let value = isMachine ? MACHINE_METADATA[op] : METADATA[op];\n\n  return value || null;\n}\n\nconst METADATA: Nullable<NormalizedMetadata>[] = new Array(Op.Size).fill(null);\nconst MACHINE_METADATA: Nullable<NormalizedMetadata>[] = new Array(Op.Size).fill(null);\nMACHINE_METADATA[MachineOp.PushFrame] = {\n  name: 'PushFrame',\n  mnemonic: 'pushf',\n  before: null,\n  stackChange: 2,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMACHINE_METADATA[MachineOp.PopFrame] = {\n  name: 'PopFrame',\n  mnemonic: 'popf',\n  before: null,\n  stackChange: -2,\n  ops: [],\n  operands: 0,\n  check: false,\n};\n\nMACHINE_METADATA[MachineOp.InvokeVirtual] = {\n  name: 'InvokeVirtual',\n  mnemonic: 'vcall',\n  before: null,\n  stackChange: -1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMACHINE_METADATA[MachineOp.InvokeStatic] = {\n  name: 'InvokeStatic',\n  mnemonic: 'scall',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'offset',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMACHINE_METADATA[MachineOp.Jump] = {\n  name: 'Jump',\n  mnemonic: 'goto',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'to',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMACHINE_METADATA[MachineOp.Return] = {\n  name: 'Return',\n  mnemonic: 'ret',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: false,\n};\n\nMACHINE_METADATA[MachineOp.ReturnTo] = {\n  name: 'ReturnTo',\n  mnemonic: 'setra',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'offset',\n      type: 'i32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\nMETADATA[Op.Helper] = {\n  name: 'Helper',\n  mnemonic: 'ncall',\n  before: null,\n  stackChange: null,\n  ops: [\n    {\n      name: 'helper',\n      type: 'handle',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.DynamicHelper] = {\n  name: 'DynamicHelper',\n  mnemonic: 'dynamiccall',\n  before: null,\n  stackChange: null,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.SetNamedVariables] = {\n  name: 'SetNamedVariables',\n  mnemonic: 'vsargs',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'register',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.SetBlocks] = {\n  name: 'SetBlocks',\n  mnemonic: 'vbblocks',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'register',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.SetVariable] = {\n  name: 'SetVariable',\n  mnemonic: 'sbvar',\n  before: null,\n  stackChange: -1,\n  ops: [\n    {\n      name: 'symbol',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.SetBlock] = {\n  name: 'SetBlock',\n  mnemonic: 'sblock',\n  before: null,\n  stackChange: -3,\n  ops: [\n    {\n      name: 'symbol',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.GetVariable] = {\n  name: 'GetVariable',\n  mnemonic: 'symload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'symbol',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.GetProperty] = {\n  name: 'GetProperty',\n  mnemonic: 'getprop',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'property',\n      type: 'str',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.GetBlock] = {\n  name: 'GetBlock',\n  mnemonic: 'blockload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'block',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.SpreadBlock] = {\n  name: 'SpreadBlock',\n  mnemonic: 'blockspread',\n  before: null,\n  stackChange: 2,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.HasBlock] = {\n  name: 'HasBlock',\n  mnemonic: 'hasblockload',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.HasBlockParams] = {\n  name: 'HasBlockParams',\n  mnemonic: 'hasparamsload',\n  before: null,\n  stackChange: -2,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.Concat] = {\n  name: 'Concat',\n  mnemonic: 'concat',\n  before: null,\n  stackChange: null,\n  ops: [\n    {\n      name: 'count',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.IfInline] = {\n  name: 'IfInline',\n  mnemonic: 'ifinline',\n  before: null,\n  stackChange: -2,\n  ops: [\n    {\n      name: 'count',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.Not] = {\n  name: 'Not',\n  mnemonic: 'not',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'count',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.Constant] = {\n  name: 'Constant',\n  mnemonic: 'rconstload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'constant',\n      type: 'unknown',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.ConstantReference] = {\n  name: 'ConstantReference',\n  mnemonic: 'rconstrefload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'constant',\n      type: 'unknown',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.Primitive] = {\n  name: 'Primitive',\n  mnemonic: 'pconstload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'constant',\n      type: 'primitive',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.PrimitiveReference] = {\n  name: 'PrimitiveReference',\n  mnemonic: 'ptoref',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.ReifyU32] = {\n  name: 'ReifyU32',\n  mnemonic: 'reifyload',\n  before: null,\n  stackChange: 1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.Dup] = {\n  name: 'Dup',\n  mnemonic: 'dup',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'register',\n      type: 'u32',\n    },\n    {\n      name: 'offset',\n      type: 'u32',\n    },\n  ],\n  operands: 2,\n  check: true,\n};\n\nMETADATA[Op.Pop] = {\n  name: 'Pop',\n  mnemonic: 'pop',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'count',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: false,\n};\n\nMETADATA[Op.Load] = {\n  name: 'Load',\n  mnemonic: 'put',\n  before: null,\n  stackChange: -1,\n  ops: [\n    {\n      name: 'register',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.Fetch] = {\n  name: 'Fetch',\n  mnemonic: 'regload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'register',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.RootScope] = {\n  name: 'RootScope',\n  mnemonic: 'rscopepush',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'symbols',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.VirtualRootScope] = {\n  name: 'VirtualRootScope',\n  mnemonic: 'vrscopepush',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'register',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.ChildScope] = {\n  name: 'ChildScope',\n  mnemonic: 'cscopepush',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.PopScope] = {\n  name: 'PopScope',\n  mnemonic: 'scopepop',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.Text] = {\n  name: 'Text',\n  mnemonic: 'apnd_text',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'contents',\n      type: 'str',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.Comment] = {\n  name: 'Comment',\n  mnemonic: 'apnd_comment',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'contents',\n      type: 'str',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.AppendHTML] = {\n  name: 'AppendHTML',\n  mnemonic: 'apnd_dynhtml',\n  before: null,\n  stackChange: -1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.AppendSafeHTML] = {\n  name: 'AppendSafeHTML',\n  mnemonic: 'apnd_dynshtml',\n  before: null,\n  stackChange: -1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.AppendDocumentFragment] = {\n  name: 'AppendDocumentFragment',\n  mnemonic: 'apnd_dynfrag',\n  before: null,\n  stackChange: -1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.AppendNode] = {\n  name: 'AppendNode',\n  mnemonic: 'apnd_dynnode',\n  before: null,\n  stackChange: -1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.AppendText] = {\n  name: 'AppendText',\n  mnemonic: 'apnd_dyntext',\n  before: null,\n  stackChange: -1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.OpenElement] = {\n  name: 'OpenElement',\n  mnemonic: 'apnd_tag',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'tag',\n      type: 'str',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.OpenDynamicElement] = {\n  name: 'OpenDynamicElement',\n  mnemonic: 'apnd_dyntag',\n  before: null,\n  stackChange: -1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.PushRemoteElement] = {\n  name: 'PushRemoteElement',\n  mnemonic: 'apnd_remotetag',\n  before: null,\n  stackChange: -3,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.StaticAttr] = {\n  name: 'StaticAttr',\n  mnemonic: 'apnd_attr',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'name',\n      type: 'str',\n    },\n    {\n      name: 'value',\n      type: 'str',\n    },\n    {\n      name: 'namespace',\n      type: 'option-str',\n    },\n  ],\n  operands: 3,\n  check: true,\n};\n\nMETADATA[Op.DynamicAttr] = {\n  name: 'DynamicAttr',\n  mnemonic: 'apnd_dynattr',\n  before: null,\n  stackChange: -1,\n  ops: [\n    {\n      name: 'name',\n      type: 'str',\n    },\n    {\n      name: 'trusting',\n      type: 'bool',\n    },\n    {\n      name: 'namespace',\n      type: 'option-str',\n    },\n  ],\n  operands: 3,\n  check: true,\n};\n\nMETADATA[Op.ComponentAttr] = {\n  name: 'ComponentAttr',\n  mnemonic: 'apnd_cattr',\n  before: null,\n  stackChange: -1,\n  ops: [\n    {\n      name: 'name',\n      type: 'str',\n    },\n    {\n      name: 'trusting',\n      type: 'bool',\n    },\n    {\n      name: 'namespace',\n      type: 'option-str',\n    },\n  ],\n  operands: 3,\n  check: true,\n};\n\nMETADATA[Op.FlushElement] = {\n  name: 'FlushElement',\n  mnemonic: 'apnd_flushtag',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.CloseElement] = {\n  name: 'CloseElement',\n  mnemonic: 'apnd_closetag',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.PopRemoteElement] = {\n  name: 'PopRemoteElement',\n  mnemonic: 'apnd_closeremotetag',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.Modifier] = {\n  name: 'Modifier',\n  mnemonic: 'apnd_modifier',\n  before: null,\n  stackChange: -1,\n  ops: [\n    {\n      name: 'helper',\n      type: 'handle',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.BindDynamicScope] = {\n  name: 'BindDynamicScope',\n  mnemonic: 'setdynscope',\n  before: null,\n  stackChange: null,\n  ops: [\n    {\n      name: 'names',\n      type: 'str-array',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.PushDynamicScope] = {\n  name: 'PushDynamicScope',\n  mnemonic: 'dynscopepush',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.PopDynamicScope] = {\n  name: 'PopDynamicScope',\n  mnemonic: 'dynscopepop',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.CompileBlock] = {\n  name: 'CompileBlock',\n  mnemonic: 'cmpblock',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.PushBlockScope] = {\n  name: 'PushBlockScope',\n  mnemonic: 'scopeload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'scope',\n      type: 'scope',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.PushSymbolTable] = {\n  name: 'PushSymbolTable',\n  mnemonic: 'dsymload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'table',\n      type: 'symbol-table',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.InvokeYield] = {\n  name: 'InvokeYield',\n  mnemonic: 'invokeyield',\n  before: null,\n  stackChange: null,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.JumpIf] = {\n  name: 'JumpIf',\n  mnemonic: 'iftrue',\n  before: null,\n  stackChange: -1,\n  ops: [\n    {\n      name: 'to',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.JumpUnless] = {\n  name: 'JumpUnless',\n  mnemonic: 'iffalse',\n  before: null,\n  stackChange: -1,\n  ops: [\n    {\n      name: 'to',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.JumpEq] = {\n  name: 'JumpEq',\n  mnemonic: 'ifeq',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'to',\n      type: 'i32',\n    },\n    {\n      name: 'comparison',\n      type: 'i32',\n    },\n  ],\n  operands: 2,\n  check: true,\n};\n\nMETADATA[Op.AssertSame] = {\n  name: 'AssertSame',\n  mnemonic: 'assert_eq',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.Enter] = {\n  name: 'Enter',\n  mnemonic: 'blk_start',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'args',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.Exit] = {\n  name: 'Exit',\n  mnemonic: 'blk_end',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.ToBoolean] = {\n  name: 'ToBoolean',\n  mnemonic: 'anytobool',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.EnterList] = {\n  name: 'EnterList',\n  mnemonic: 'list_start',\n  before: null,\n  stackChange: null,\n  ops: [\n    {\n      name: 'address',\n      type: 'u32',\n    },\n    {\n      name: 'address',\n      type: 'u32',\n    },\n  ],\n  operands: 2,\n  check: true,\n};\n\nMETADATA[Op.ExitList] = {\n  name: 'ExitList',\n  mnemonic: 'list_end',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.Iterate] = {\n  name: 'Iterate',\n  mnemonic: 'iter',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'end',\n      type: 'u32',\n    },\n  ],\n  operands: 1,\n  check: false,\n};\n\nMETADATA[Op.Main] = {\n  name: 'Main',\n  mnemonic: 'main',\n  before: null,\n  stackChange: -2,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.ContentType] = {\n  name: 'ContentType',\n  mnemonic: 'ctload',\n  before: null,\n  stackChange: 1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.DynamicContentType] = {\n  name: 'DynamicContentType',\n  mnemonic: 'dctload',\n  before: null,\n  stackChange: 1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.Curry] = {\n  name: 'Curry',\n  mnemonic: 'curry',\n  before: null,\n  stackChange: null,\n  ops: [\n    {\n      name: 'type',\n      type: 'u32',\n    },\n    {\n      name: 'is-strict',\n      type: 'bool',\n    },\n  ],\n  operands: 2,\n  check: true,\n};\n\nMETADATA[Op.PushComponentDefinition] = {\n  name: 'PushComponentDefinition',\n  mnemonic: 'cmload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'spec',\n      type: 'handle',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.PushDynamicComponentInstance] = {\n  name: 'PushDynamicComponentInstance',\n  mnemonic: 'dciload',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.ResolveDynamicComponent] = {\n  name: 'ResolveDynamicComponent',\n  mnemonic: 'cdload',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'owner',\n      type: 'owner',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.PushArgs] = {\n  name: 'PushArgs',\n  mnemonic: 'argsload',\n  before: null,\n  stackChange: null,\n  ops: [\n    {\n      name: 'names',\n      type: 'str-array',\n    },\n    {\n      name: 'block-names',\n      type: 'str-array',\n    },\n    {\n      name: 'flags',\n      type: 'u32',\n    },\n  ],\n  operands: 3,\n  check: true,\n};\n\nMETADATA[Op.PushEmptyArgs] = {\n  name: 'PushEmptyArgs',\n  mnemonic: 'emptyargsload',\n  before: null,\n  stackChange: 1,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.PopArgs] = {\n  name: 'PopArgs',\n  mnemonic: 'argspop',\n  before: null,\n  stackChange: null,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.PrepareArgs] = {\n  name: 'PrepareArgs',\n  mnemonic: 'argsprep',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: false,\n};\n\nMETADATA[Op.CaptureArgs] = {\n  name: 'CaptureArgs',\n  mnemonic: 'argscapture',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.CreateComponent] = {\n  name: 'CreateComponent',\n  mnemonic: 'comp_create',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'flags',\n      type: 'u32',\n    },\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 2,\n  check: true,\n};\n\nMETADATA[Op.RegisterComponentDestructor] = {\n  name: 'RegisterComponentDestructor',\n  mnemonic: 'comp_dest',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.PutComponentOperations] = {\n  name: 'PutComponentOperations',\n  mnemonic: 'comp_elops',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.GetComponentSelf] = {\n  name: 'GetComponentSelf',\n  mnemonic: 'comp_selfload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.GetComponentTagName] = {\n  name: 'GetComponentTagName',\n  mnemonic: 'comp_tagload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.GetComponentLayout] = {\n  name: 'GetComponentLayout',\n  mnemonic: 'comp_layoutload',\n  before: null,\n  stackChange: 2,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.BindEvalScope] = {\n  name: 'BindEvalScope',\n  mnemonic: 'eval_scope',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.SetupForEval] = {\n  name: 'SetupForEval',\n  mnemonic: 'eval_setup',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.PopulateLayout] = {\n  name: 'PopulateLayout',\n  mnemonic: 'comp_layoutput',\n  before: null,\n  stackChange: -2,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.InvokeComponentLayout] = {\n  name: 'InvokeComponentLayout',\n  mnemonic: 'comp_invokelayout',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.BeginComponentTransaction] = {\n  name: 'BeginComponentTransaction',\n  mnemonic: 'comp_begin',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.CommitComponentTransaction] = {\n  name: 'CommitComponentTransaction',\n  mnemonic: 'comp_commit',\n  before: null,\n  stackChange: 0,\n  ops: [],\n  operands: 0,\n  check: true,\n};\n\nMETADATA[Op.DidCreateElement] = {\n  name: 'DidCreateElement',\n  mnemonic: 'comp_created',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.DidRenderLayout] = {\n  name: 'DidRenderLayout',\n  mnemonic: 'comp_rendered',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'state',\n      type: 'register',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.ResolveMaybeLocal] = {\n  name: 'ResolveMaybeLocal',\n  mnemonic: 'eval_varload',\n  before: null,\n  stackChange: 1,\n  ops: [\n    {\n      name: 'local',\n      type: 'str',\n    },\n  ],\n  operands: 1,\n  check: true,\n};\n\nMETADATA[Op.Debugger] = {\n  name: 'Debugger',\n  mnemonic: 'debugger',\n  before: null,\n  stackChange: 0,\n  ops: [\n    {\n      name: 'symbols',\n      type: 'str-array',\n    },\n    {\n      name: 'debugInfo',\n      type: 'array',\n    },\n  ],\n  operands: 2,\n  check: true,\n};\n"],"names":[],"mappings}