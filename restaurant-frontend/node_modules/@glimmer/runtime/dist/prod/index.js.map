{"version":3,"file":"index.js","sources":["../../../local-debug-flags/index.ts","../../lib/scope.ts","../../lib/symbols.ts","../../lib/bounds.ts","../../lib/dom/normalize.ts","../../lib/dom/props.ts","../../lib/dom/sanitized-values.ts","../../lib/vm/attributes/dynamic.ts","../../lib/vm/element-builder.ts","../../lib/opcodes.ts","../../lib/curried-value.ts","../../lib/component/interfaces.ts","../../lib/compiled/opcodes/vm.ts","../../lib/compiled/opcodes/assert.ts","../../lib/compiled/opcodes/dom.ts","../../lib/compiled/opcodes/component.ts","../../lib/component/resolve.ts","../../lib/references/class-list.ts","../../lib/compiled/opcodes/-debug-strip.ts","../../lib/vm/arguments.ts","../../lib/compiled/expressions/concat.ts","../../lib/compiled/opcodes/expressions.ts","../../lib/references/curry-value.ts","../../lib/vm/content/text.ts","../../lib/compiled/opcodes/content.ts","../../lib/compiled/opcodes/debugger.ts","../../lib/compiled/opcodes/lists.ts","../../lib/component/template-only.ts","../../lib/dom/operations.ts","../../lib/compat/svg-inner-html-fix.ts","../../lib/compat/text-node-merging-fix.ts","../../lib/dom/api.ts","../../lib/dom/helper.ts","../../lib/debug-render-tree.ts","../../lib/environment.ts","../../lib/helpers/internal-helper.ts","../../lib/helpers/array.ts","../../lib/helpers/concat.ts","../../lib/helpers/fn.ts","../../lib/helpers/get.ts","../../lib/helpers/hash.ts","../../lib/helpers/invoke.ts","../../lib/modifiers/on.ts","../../lib/vm/low-level.ts","../../lib/vm/update.ts","../../lib/vm/render-result.ts","../../lib/vm/stack.ts","../../lib/vm/append.ts","../../lib/render.ts","../../lib/vm/rehydrate-builder.ts"],"sourcesContent":["export const LOCAL_DEBUG: true | false =\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  import.meta.env.VM_LOCAL_DEV &&\n  (() => {\n    let location = typeof window !== 'undefined' && window.location;\n    if (location && /[&?]disable_local_debug/u.test(window.location.search)) {\n      return false;\n    }\n    return true;\n  })();\n\nexport const LOCAL_SHOULD_LOG: true | false =\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  import.meta.env.VM_LOCAL_DEV &&\n  (() => {\n    let location = typeof window !== 'undefined' && window.location;\n    if (location && /[&?]enable_local_should_log/u.test(window.location.search)) {\n      return true;\n    }\n    return false;\n  })();\n","import type {\n  Dict,\n  DynamicScope,\n  Nullable,\n  Owner,\n  PartialScope,\n  Scope,\n  ScopeBlock,\n  ScopeSlot,\n} from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport { UNDEFINED_REFERENCE } from '@glimmer/reference';\nimport { assign, unwrap } from '@glimmer/util';\n\nexport class DynamicScopeImpl implements DynamicScope {\n  private bucket: Dict<Reference>;\n\n  constructor(bucket?: Dict<Reference>) {\n    if (bucket) {\n      this.bucket = assign({}, bucket);\n    } else {\n      this.bucket = {};\n    }\n  }\n\n  get(key: string): Reference {\n    return unwrap(this.bucket[key]);\n  }\n\n  set(key: string, reference: Reference): Reference {\n    return (this.bucket[key] = reference);\n  }\n\n  child(): DynamicScopeImpl {\n    return new DynamicScopeImpl(this.bucket);\n  }\n}\n\nexport function isScopeReference(s: ScopeSlot): s is Reference {\n  if (s === null || Array.isArray(s)) return false;\n  return true;\n}\n\nexport class PartialScopeImpl implements PartialScope {\n  static root(self: Reference<unknown>, size = 0, owner: Owner): PartialScope {\n    let refs: Reference<unknown>[] = new Array(size + 1).fill(UNDEFINED_REFERENCE);\n\n    return new PartialScopeImpl(refs, owner, null, null, null).init({ self });\n  }\n\n  static sized(size = 0, owner: Owner): Scope {\n    let refs: Reference<unknown>[] = new Array(size + 1).fill(UNDEFINED_REFERENCE);\n\n    return new PartialScopeImpl(refs, owner, null, null, null);\n  }\n\n  constructor(\n    // the 0th slot is `self`\n    readonly slots: Array<ScopeSlot>,\n    readonly owner: Owner,\n    private callerScope: Scope | null,\n    // named arguments and blocks passed to a layout that uses eval\n    private evalScope: Dict<ScopeSlot> | null,\n    // locals in scope when the partial was invoked\n    private partialMap: Dict<Reference<unknown>> | null\n  ) {}\n\n  init({ self }: { self: Reference<unknown> }): this {\n    this.slots[0] = self;\n    return this;\n  }\n\n  getSelf(): Reference<unknown> {\n    return this.get<Reference<unknown>>(0);\n  }\n\n  getSymbol(symbol: number): Reference<unknown> {\n    return this.get<Reference<unknown>>(symbol);\n  }\n\n  getBlock(symbol: number): Nullable<ScopeBlock> {\n    let block = this.get(symbol);\n    return block === UNDEFINED_REFERENCE ? null : (block as ScopeBlock);\n  }\n\n  getEvalScope(): Nullable<Dict<ScopeSlot>> {\n    return this.evalScope;\n  }\n\n  getPartialMap(): Nullable<Dict<Reference<unknown>>> {\n    return this.partialMap;\n  }\n\n  bind(symbol: number, value: ScopeSlot) {\n    this.set(symbol, value);\n  }\n\n  bindSelf(self: Reference<unknown>) {\n    this.set<Reference<unknown>>(0, self);\n  }\n\n  bindSymbol(symbol: number, value: Reference<unknown>) {\n    this.set(symbol, value);\n  }\n\n  bindBlock(symbol: number, value: Nullable<ScopeBlock>) {\n    this.set<Nullable<ScopeBlock>>(symbol, value);\n  }\n\n  bindEvalScope(map: Nullable<Dict<ScopeSlot>>) {\n    this.evalScope = map;\n  }\n\n  bindPartialMap(map: Dict<Reference<unknown>>) {\n    this.partialMap = map;\n  }\n\n  bindCallerScope(scope: Nullable<Scope>): void {\n    this.callerScope = scope;\n  }\n\n  getCallerScope(): Nullable<Scope> {\n    return this.callerScope;\n  }\n\n  child(): Scope {\n    return new PartialScopeImpl(\n      this.slots.slice(),\n      this.owner,\n      this.callerScope,\n      this.evalScope,\n      this.partialMap\n    );\n  }\n\n  private get<T extends ScopeSlot>(index: number): T {\n    if (index >= this.slots.length) {\n      throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);\n    }\n\n    return this.slots[index] as T;\n  }\n\n  private set<T extends ScopeSlot>(index: number, value: T): void {\n    if (index >= this.slots.length) {\n      throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);\n    }\n\n    this.slots[index] = value;\n  }\n}\n","// These symbols represent \"friend\" properties that are used inside of\n// the VM in other classes, but are not intended to be a part of\n// Glimmer's API.\n\nexport const INNER_VM: unique symbol = Symbol('INNER_VM');\nexport const DESTROYABLE_STACK: unique symbol = Symbol('DESTROYABLE_STACK');\nexport const STACKS: unique symbol = Symbol('STACKS');\nexport const REGISTERS: unique symbol = Symbol('REGISTERS');\nexport const HEAP: unique symbol = Symbol('HEAP');\nexport const CONSTANTS: unique symbol = Symbol('CONSTANTS');\nexport const ARGS: unique symbol = Symbol('ARGS');\nexport const PC: unique symbol = Symbol('PC');\n","import type { Bounds, Cursor, Nullable, SimpleElement, SimpleNode } from '@glimmer/interfaces';\nimport { expect } from '@glimmer/util';\n\nexport class CursorImpl implements Cursor {\n  constructor(\n    public element: SimpleElement,\n    public nextSibling: Nullable<SimpleNode>\n  ) {}\n}\n\nexport type DestroyableBounds = Bounds;\n\nexport class ConcreteBounds implements Bounds {\n  constructor(\n    public parentNode: SimpleElement,\n    private first: SimpleNode,\n    private last: SimpleNode\n  ) {}\n\n  parentElement(): SimpleElement {\n    return this.parentNode;\n  }\n\n  firstNode(): SimpleNode {\n    return this.first;\n  }\n\n  lastNode(): SimpleNode {\n    return this.last;\n  }\n}\n\nexport function move(bounds: Bounds, reference: Nullable<SimpleNode>): Nullable<SimpleNode> {\n  let parent = bounds.parentElement();\n  let first = bounds.firstNode();\n  let last = bounds.lastNode();\n\n  let current: SimpleNode = first;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let next = current.nextSibling;\n\n    parent.insertBefore(current, reference);\n\n    if (current === last) {\n      return next;\n    }\n\n    current = expect(next, 'invalid bounds');\n  }\n}\n\nexport function clear(bounds: Bounds): Nullable<SimpleNode> {\n  let parent = bounds.parentElement();\n  let first = bounds.firstNode();\n  let last = bounds.lastNode();\n\n  let current: SimpleNode = first;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let next = current.nextSibling;\n\n    parent.removeChild(current);\n\n    if (current === last) {\n      return next;\n    }\n\n    current = expect(next, 'invalid bounds');\n  }\n}\n","import type { Dict, SimpleDocumentFragment, SimpleNode } from '@glimmer/interfaces';\n\nexport interface SafeString {\n  toHTML(): string;\n}\n\nexport type Insertion = CautiousInsertion | TrustingInsertion;\nexport type CautiousInsertion = string | SafeString | SimpleNode;\nexport type TrustingInsertion = string | SimpleNode;\n\nexport function normalizeStringValue(value: unknown): string {\n  if (isEmpty(value)) {\n    return '';\n  }\n  return String(value);\n}\n\nexport function normalizeTrustedValue(value: unknown): TrustingInsertion {\n  if (isEmpty(value)) {\n    return '';\n  }\n  if (isString(value)) {\n    return value;\n  }\n  if (isSafeString(value)) {\n    return value.toHTML();\n  }\n  if (isNode(value)) {\n    return value;\n  }\n  return String(value);\n}\n\nexport function shouldCoerce(\n  value: unknown\n): value is string | number | boolean | null | undefined {\n  return (\n    isString(value) || isEmpty(value) || typeof value === 'boolean' || typeof value === 'number'\n  );\n}\n\nexport function isEmpty(value: unknown): boolean {\n  return value === null || value === undefined || typeof (value as Dict).toString !== 'function';\n}\n\nexport function isSafeString(value: unknown): value is SafeString {\n  return typeof value === 'object' && value !== null && typeof (value as any).toHTML === 'function';\n}\n\nexport function isNode(value: unknown): value is SimpleNode {\n  return typeof value === 'object' && value !== null && typeof (value as any).nodeType === 'number';\n}\n\nexport function isFragment(value: unknown): value is SimpleDocumentFragment {\n  return isNode(value) && value.nodeType === 11;\n}\n\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n","import type { Dict, SimpleElement } from '@glimmer/interfaces';\n\n/*\n * @method normalizeProperty\n * @param element {HTMLElement}\n * @param slotName {String}\n * @returns {Object} { name, type }\n */\nexport function normalizeProperty(element: SimpleElement, slotName: string) {\n  let type, normalized;\n\n  if (slotName in element) {\n    normalized = slotName;\n    type = 'prop';\n  } else {\n    let lower = slotName.toLowerCase();\n    if (lower in element) {\n      type = 'prop';\n      normalized = lower;\n    } else {\n      type = 'attr';\n      normalized = slotName;\n    }\n  }\n\n  if (\n    type === 'prop' &&\n    (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))\n  ) {\n    type = 'attr';\n  }\n\n  return { normalized, type };\n}\n\nexport function normalizePropertyValue(value: unknown): unknown {\n  if (value === '') {\n    return true;\n  }\n\n  return value;\n}\n\n// properties that MUST be set as attributes, due to:\n// * browser bug\n// * strange spec outlier\nconst ATTR_OVERRIDES: Dict<Dict> = {\n  INPUT: {\n    form: true,\n    // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false\n    // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false\n    // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true\n    autocorrect: true,\n    // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true\n    // Safari 9.1.3: 'list' in document.createElement('input') === false\n    list: true,\n  },\n\n  // element.form is actually a legitimate readOnly property, that is to be\n  // mutated, but must be mutated by setAttribute...\n  SELECT: { form: true },\n  OPTION: { form: true },\n  TEXTAREA: { form: true },\n  LABEL: { form: true },\n  FIELDSET: { form: true },\n  LEGEND: { form: true },\n  OBJECT: { form: true },\n  OUTPUT: { form: true },\n  BUTTON: { form: true },\n};\n\nfunction preferAttr(tagName: string, propName: string) {\n  let tag = ATTR_OVERRIDES[tagName.toUpperCase()];\n  return (tag && tag[propName.toLowerCase()]) || false;\n}\n","import type { Nullable, SimpleElement } from '@glimmer/interfaces';\n\nimport { isSafeString, normalizeStringValue } from '../dom/normalize';\n\nconst badProtocols = ['javascript:', 'vbscript:'];\n\nconst badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];\n\nconst badTagsForDataURI = ['EMBED'];\n\nconst badAttributes = ['href', 'src', 'background', 'action'];\n\nconst badAttributesForDataURI = ['src'];\n\nfunction has(array: Array<string>, item: string): boolean {\n  return array.indexOf(item) !== -1;\n}\n\nfunction checkURI(tagName: Nullable<string>, attribute: string): boolean {\n  return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);\n}\n\nfunction checkDataURI(tagName: Nullable<string>, attribute: string): boolean {\n  if (tagName === null) return false;\n  return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);\n}\n\nexport function requiresSanitization(tagName: string, attribute: string): boolean {\n  return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);\n}\n\ninterface NodeUrlParseResult {\n  protocol: string | null;\n}\n\ninterface NodeUrlModule {\n  parse(url: string): NodeUrlParseResult;\n}\n\nfunction findProtocolForURL() {\n  if (\n    typeof URL === 'object' &&\n    URL !== null &&\n    // this is super annoying, TS thinks that URL **must** be a function so `URL.parse` check\n    // thinks it is `never` without this `as unknown as any`\n    typeof (URL as unknown as any).parse === 'function'\n  ) {\n    // In Ember-land the `fastboot` package sets the `URL` global to `require('url')`\n    // ultimately, this should be changed (so that we can either rely on the natural `URL` global\n    // that exists) but for now we have to detect the specific `FastBoot` case first\n    //\n    // a future version of `fastboot` will detect if this legacy URL setup is required (by\n    // inspecting Ember version) and if new enough, it will avoid shadowing the `URL` global\n    // constructor with `require('url')`.\n    let nodeURL = URL as NodeUrlModule;\n\n    return (url: string) => {\n      let protocol = null;\n\n      if (typeof url === 'string') {\n        protocol = nodeURL.parse(url).protocol;\n      }\n\n      return protocol === null ? ':' : protocol;\n    };\n  } else if (typeof URL === 'function') {\n    return (_url: string) => {\n      try {\n        let url = new URL(_url);\n\n        return url.protocol;\n      } catch (error) {\n        // any non-fully qualified url string will trigger an error (because there is no\n        // baseURI that we can provide; in that case we **know** that the protocol is\n        // \"safe\" because it isn't specifically one of the `badProtocols` listed above\n        // (and those protocols can never be the default baseURI)\n        return ':';\n      }\n    };\n  } else {\n    throw new Error(`@glimmer/runtime needs a valid \"globalThis.URL\"`);\n  }\n}\n\nlet _protocolForUrlImplementation: typeof protocolForUrl | undefined;\nfunction protocolForUrl(url: string): string {\n  if (!_protocolForUrlImplementation) {\n    _protocolForUrlImplementation = findProtocolForURL();\n  }\n  return _protocolForUrlImplementation(url);\n}\n\nexport function sanitizeAttributeValue(\n  element: SimpleElement,\n  attribute: string,\n  value: unknown\n): unknown {\n  let tagName: Nullable<string> = null;\n\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (isSafeString(value)) {\n    return value.toHTML();\n  }\n\n  if (!element) {\n    tagName = null;\n  } else {\n    tagName = element.tagName.toUpperCase();\n  }\n\n  let str = normalizeStringValue(value);\n\n  if (checkURI(tagName, attribute)) {\n    let protocol = protocolForUrl(str);\n    if (has(badProtocols, protocol)) {\n      return `unsafe:${str}`;\n    }\n  }\n\n  if (checkDataURI(tagName, attribute)) {\n    return `unsafe:${str}`;\n  }\n\n  return str;\n}\n","import type {\n  AttributeCursor,\n  AttributeOperation,\n  AttrNamespace,\n  Dict,\n  ElementBuilder,\n  Environment,\n  Nullable,\n  SimpleElement,\n} from '@glimmer/interfaces';\nimport { warnIfStyleNotTrusted } from '@glimmer/global-context';\nimport { castToBrowser, NS_SVG } from '@glimmer/util';\n\nimport { normalizeStringValue } from '../../dom/normalize';\nimport { normalizeProperty } from '../../dom/props';\nimport { requiresSanitization, sanitizeAttributeValue } from '../../dom/sanitized-values';\n\nexport function dynamicAttribute(\n  element: SimpleElement,\n  attr: string,\n  namespace: Nullable<AttrNamespace>,\n  isTrusting = false\n): DynamicAttribute {\n  const { tagName, namespaceURI } = element;\n  const attribute = { element, name: attr, namespace };\n\n  if (import.meta.env.DEV && attr === 'style' && !isTrusting) {\n    return new DebugStyleAttributeManager(attribute);\n  }\n\n  if (namespaceURI === NS_SVG) {\n    return buildDynamicAttribute(tagName, attr, attribute);\n  }\n\n  const { type, normalized } = normalizeProperty(element, attr);\n\n  if (type === 'attr') {\n    return buildDynamicAttribute(tagName, normalized, attribute);\n  } else {\n    return buildDynamicProperty(tagName, normalized, attribute);\n  }\n}\n\nfunction buildDynamicAttribute(\n  tagName: string,\n  name: string,\n  attribute: AttributeCursor\n): DynamicAttribute {\n  if (requiresSanitization(tagName, name)) {\n    return new SafeDynamicAttribute(attribute);\n  } else {\n    return new SimpleDynamicAttribute(attribute);\n  }\n}\n\nfunction buildDynamicProperty(\n  tagName: string,\n  name: string,\n  attribute: AttributeCursor\n): DynamicAttribute {\n  if (requiresSanitization(tagName, name)) {\n    return new SafeDynamicProperty(name, attribute);\n  }\n\n  if (isUserInputValue(tagName, name)) {\n    return new InputValueDynamicAttribute(name, attribute);\n  }\n\n  if (isOptionSelected(tagName, name)) {\n    return new OptionSelectedDynamicAttribute(name, attribute);\n  }\n\n  return new DefaultDynamicProperty(name, attribute);\n}\n\nexport abstract class DynamicAttribute implements AttributeOperation {\n  constructor(public attribute: AttributeCursor) {}\n\n  abstract set(dom: ElementBuilder, value: unknown, env: Environment): void;\n  abstract update(value: unknown, env: Environment): void;\n}\n\nexport class SimpleDynamicAttribute extends DynamicAttribute {\n  set(dom: ElementBuilder, value: unknown, _env: Environment): void {\n    const normalizedValue = normalizeValue(value);\n\n    if (normalizedValue !== null) {\n      const { name, namespace } = this.attribute;\n      dom.__setAttribute(name, normalizedValue, namespace);\n    }\n  }\n\n  update(value: unknown, _env: Environment): void {\n    const normalizedValue = normalizeValue(value);\n    const { element, name } = this.attribute;\n\n    if (normalizedValue === null) {\n      element.removeAttribute(name);\n    } else {\n      element.setAttribute(name, normalizedValue);\n    }\n  }\n}\n\nexport class DefaultDynamicProperty extends DynamicAttribute {\n  constructor(\n    private normalizedName: string,\n    attribute: AttributeCursor\n  ) {\n    super(attribute);\n  }\n\n  value: unknown;\n  set(dom: ElementBuilder, value: unknown, _env: Environment): void {\n    if (value !== null && value !== undefined) {\n      this.value = value;\n      dom.__setProperty(this.normalizedName, value);\n    }\n  }\n\n  update(value: unknown, _env: Environment): void {\n    const { element } = this.attribute;\n\n    if (this.value !== value) {\n      (element as any)[this.normalizedName] = this.value = value;\n\n      if (value === null || value === undefined) {\n        this.removeAttribute();\n      }\n    }\n  }\n\n  protected removeAttribute() {\n    // TODO this sucks but to preserve properties first and to meet current\n    // semantics we must do this.\n    const { element, namespace } = this.attribute;\n\n    if (namespace) {\n      element.removeAttributeNS(namespace, this.normalizedName);\n    } else {\n      element.removeAttribute(this.normalizedName);\n    }\n  }\n}\n\nexport class SafeDynamicProperty extends DefaultDynamicProperty {\n  override set(dom: ElementBuilder, value: unknown, env: Environment): void {\n    const { element, name } = this.attribute;\n    const sanitized = sanitizeAttributeValue(element, name, value);\n    super.set(dom, sanitized, env);\n  }\n\n  override update(value: unknown, env: Environment): void {\n    const { element, name } = this.attribute;\n    const sanitized = sanitizeAttributeValue(element, name, value);\n    super.update(sanitized, env);\n  }\n}\n\nexport class SafeDynamicAttribute extends SimpleDynamicAttribute {\n  override set(dom: ElementBuilder, value: unknown, env: Environment): void {\n    const { element, name } = this.attribute;\n    const sanitized = sanitizeAttributeValue(element, name, value);\n    super.set(dom, sanitized, env);\n  }\n\n  override update(value: unknown, env: Environment): void {\n    const { element, name } = this.attribute;\n    const sanitized = sanitizeAttributeValue(element, name, value);\n    super.update(sanitized, env);\n  }\n}\n\nexport class InputValueDynamicAttribute extends DefaultDynamicProperty {\n  override set(dom: ElementBuilder, value: unknown) {\n    dom.__setProperty('value', normalizeStringValue(value));\n  }\n\n  override update(value: unknown) {\n    const input = castToBrowser(this.attribute.element, ['input', 'textarea']);\n    const currentValue = input.value;\n    const normalizedValue = normalizeStringValue(value);\n    if (currentValue !== normalizedValue) {\n      input.value = normalizedValue;\n    }\n  }\n}\n\nexport class OptionSelectedDynamicAttribute extends DefaultDynamicProperty {\n  override set(dom: ElementBuilder, value: unknown): void {\n    if (value !== null && value !== undefined && value !== false) {\n      dom.__setProperty('selected', true);\n    }\n  }\n\n  override update(value: unknown): void {\n    const option = castToBrowser(this.attribute.element, 'option');\n\n    if (value) {\n      option.selected = true;\n    } else {\n      option.selected = false;\n    }\n  }\n}\n\nfunction isOptionSelected(tagName: string, attribute: string) {\n  return tagName === 'OPTION' && attribute === 'selected';\n}\n\nfunction isUserInputValue(tagName: string, attribute: string) {\n  return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';\n}\n\nfunction normalizeValue(value: unknown): Nullable<string> {\n  if (\n    value === false ||\n    value === undefined ||\n    value === null ||\n    typeof (value as Dict).toString === 'undefined'\n  ) {\n    return null;\n  }\n  if (value === true) {\n    return '';\n  }\n  // onclick function etc in SSR\n  if (typeof value === 'function') {\n    return null;\n  }\n\n  return String(value);\n}\n\nlet DebugStyleAttributeManager: {\n  new (attribute: AttributeCursor): AttributeOperation;\n};\n\nif (import.meta.env.DEV) {\n  DebugStyleAttributeManager = class extends SimpleDynamicAttribute {\n    override set(dom: ElementBuilder, value: unknown, env: Environment): void {\n      warnIfStyleNotTrusted(value);\n\n      super.set(dom, value, env);\n    }\n    override update(value: unknown, env: Environment): void {\n      warnIfStyleNotTrusted(value);\n\n      super.update(value, env);\n    }\n  };\n}\n","import type {\n  AttrNamespace,\n  Bounds,\n  Cursor,\n  CursorStackSymbol,\n  ElementBuilder,\n  ElementOperations,\n  Environment,\n  GlimmerTreeChanges,\n  GlimmerTreeConstruction,\n  LiveBlock,\n  Maybe,\n  ModifierInstance,\n  Nullable,\n  SimpleComment,\n  SimpleDocumentFragment,\n  SimpleElement,\n  SimpleNode,\n  SimpleText,\n  UpdatableBlock,\n} from '@glimmer/interfaces';\nimport { destroy, registerDestructor } from '@glimmer/destroyable';\nimport { assert, expect, Stack } from '@glimmer/util';\n\nimport type { DynamicAttribute } from './attributes/dynamic';\n\nimport { clear, ConcreteBounds, CursorImpl } from '../bounds';\nimport { dynamicAttribute } from './attributes/dynamic';\n\nexport interface FirstNode {\n  firstNode(): SimpleNode;\n}\n\nexport interface LastNode {\n  lastNode(): SimpleNode;\n}\n\nclass First {\n  constructor(private node: SimpleNode) {}\n\n  firstNode(): SimpleNode {\n    return this.node;\n  }\n}\n\nclass Last {\n  constructor(private node: SimpleNode) {}\n\n  lastNode(): SimpleNode {\n    return this.node;\n  }\n}\n\nexport class Fragment implements Bounds {\n  private bounds: Bounds;\n\n  constructor(bounds: Bounds) {\n    this.bounds = bounds;\n  }\n\n  parentElement(): SimpleElement {\n    return this.bounds.parentElement();\n  }\n\n  firstNode(): SimpleNode {\n    return this.bounds.firstNode();\n  }\n\n  lastNode(): SimpleNode {\n    return this.bounds.lastNode();\n  }\n}\n\nexport const CURSOR_STACK: CursorStackSymbol = Symbol('CURSOR_STACK') as CursorStackSymbol;\n\nexport class NewElementBuilder implements ElementBuilder {\n  public dom: GlimmerTreeConstruction;\n  public updateOperations: GlimmerTreeChanges;\n  public constructing: Nullable<SimpleElement> = null;\n  public operations: Nullable<ElementOperations> = null;\n  private env: Environment;\n\n  [CURSOR_STACK] = new Stack<Cursor>();\n  private modifierStack = new Stack<Nullable<ModifierInstance[]>>();\n  private blockStack = new Stack<LiveBlock>();\n\n  static forInitialRender(env: Environment, cursor: CursorImpl) {\n    return new this(env, cursor.element, cursor.nextSibling).initialize();\n  }\n\n  static resume(env: Environment, block: UpdatableBlock): NewElementBuilder {\n    let parentNode = block.parentElement();\n    let nextSibling = block.reset(env);\n\n    let stack = new this(env, parentNode, nextSibling).initialize();\n    stack.pushLiveBlock(block);\n\n    return stack;\n  }\n\n  constructor(env: Environment, parentNode: SimpleElement, nextSibling: Nullable<SimpleNode>) {\n    this.pushElement(parentNode, nextSibling);\n\n    this.env = env;\n    this.dom = env.getAppendOperations();\n    this.updateOperations = env.getDOM();\n  }\n\n  protected initialize(): this {\n    this.pushSimpleBlock();\n    return this;\n  }\n\n  debugBlocks(): LiveBlock[] {\n    return this.blockStack.toArray();\n  }\n\n  get element(): SimpleElement {\n    return this[CURSOR_STACK].current!.element;\n  }\n\n  get nextSibling(): Nullable<SimpleNode> {\n    return this[CURSOR_STACK].current!.nextSibling;\n  }\n\n  get hasBlocks() {\n    return this.blockStack.size > 0;\n  }\n\n  protected block(): LiveBlock {\n    return expect(this.blockStack.current, 'Expected a current live block');\n  }\n\n  popElement() {\n    this[CURSOR_STACK].pop();\n    expect(this[CURSOR_STACK].current, \"can't pop past the last element\");\n  }\n\n  pushSimpleBlock(): LiveBlock {\n    return this.pushLiveBlock(new SimpleLiveBlock(this.element));\n  }\n\n  pushUpdatableBlock(): UpdatableBlockImpl {\n    return this.pushLiveBlock(new UpdatableBlockImpl(this.element));\n  }\n\n  pushBlockList(list: LiveBlock[]): LiveBlockList {\n    return this.pushLiveBlock(new LiveBlockList(this.element, list));\n  }\n\n  protected pushLiveBlock<T extends LiveBlock>(block: T, isRemote = false): T {\n    let current = this.blockStack.current;\n\n    if (current !== null) {\n      if (!isRemote) {\n        current.didAppendBounds(block);\n      }\n    }\n\n    this.__openBlock();\n    this.blockStack.push(block);\n    return block;\n  }\n\n  popBlock(): LiveBlock {\n    this.block().finalize(this);\n    this.__closeBlock();\n    return expect(this.blockStack.pop(), 'Expected popBlock to return a block');\n  }\n\n  __openBlock(): void {}\n  __closeBlock(): void {}\n\n  // todo return seems unused\n  openElement(tag: string): SimpleElement {\n    let element = this.__openElement(tag);\n    this.constructing = element;\n\n    return element;\n  }\n\n  __openElement(tag: string): SimpleElement {\n    return this.dom.createElement(tag, this.element);\n  }\n\n  flushElement(modifiers: Nullable<ModifierInstance[]>) {\n    let parent = this.element;\n    let element = expect(\n      this.constructing,\n      `flushElement should only be called when constructing an element`\n    );\n\n    this.__flushElement(parent, element);\n\n    this.constructing = null;\n    this.operations = null;\n\n    this.pushModifiers(modifiers);\n    this.pushElement(element, null);\n    this.didOpenElement(element);\n  }\n\n  __flushElement(parent: SimpleElement, constructing: SimpleElement) {\n    this.dom.insertBefore(parent, constructing, this.nextSibling);\n  }\n\n  closeElement(): Nullable<ModifierInstance[]> {\n    this.willCloseElement();\n    this.popElement();\n    return this.popModifiers();\n  }\n\n  pushRemoteElement(\n    element: SimpleElement,\n    guid: string,\n    insertBefore: Maybe<SimpleNode>\n  ): Nullable<RemoteLiveBlock> {\n    return this.__pushRemoteElement(element, guid, insertBefore);\n  }\n\n  __pushRemoteElement(\n    element: SimpleElement,\n    _guid: string,\n    insertBefore: Maybe<SimpleNode>\n  ): Nullable<RemoteLiveBlock> {\n    this.pushElement(element, insertBefore);\n\n    if (insertBefore === undefined) {\n      while (element.lastChild) {\n        element.removeChild(element.lastChild);\n      }\n    }\n\n    let block = new RemoteLiveBlock(element);\n\n    return this.pushLiveBlock(block, true);\n  }\n\n  popRemoteElement() {\n    this.popBlock();\n    this.popElement();\n  }\n\n  protected pushElement(element: SimpleElement, nextSibling: Maybe<SimpleNode> = null) {\n    this[CURSOR_STACK].push(new CursorImpl(element, nextSibling));\n  }\n\n  private pushModifiers(modifiers: Nullable<ModifierInstance[]>): void {\n    this.modifierStack.push(modifiers);\n  }\n\n  private popModifiers(): Nullable<ModifierInstance[]> {\n    return this.modifierStack.pop();\n  }\n\n  didAppendBounds(bounds: Bounds): Bounds {\n    this.block().didAppendBounds(bounds);\n    return bounds;\n  }\n\n  didAppendNode<T extends SimpleNode>(node: T): T {\n    this.block().didAppendNode(node);\n    return node;\n  }\n\n  didOpenElement(element: SimpleElement): SimpleElement {\n    this.block().openElement(element);\n    return element;\n  }\n\n  willCloseElement() {\n    this.block().closeElement();\n  }\n\n  appendText(string: string): SimpleText {\n    return this.didAppendNode(this.__appendText(string));\n  }\n\n  __appendText(text: string): SimpleText {\n    let { dom, element, nextSibling } = this;\n    let node = dom.createTextNode(text);\n    dom.insertBefore(element, node, nextSibling);\n    return node;\n  }\n\n  __appendNode(node: SimpleNode): SimpleNode {\n    this.dom.insertBefore(this.element, node, this.nextSibling);\n    return node;\n  }\n\n  __appendFragment(fragment: SimpleDocumentFragment): Bounds {\n    let first = fragment.firstChild;\n\n    if (first) {\n      let ret = new ConcreteBounds(this.element, first, fragment.lastChild!);\n      this.dom.insertBefore(this.element, fragment, this.nextSibling);\n      return ret;\n    } else {\n      const comment = this.__appendComment('');\n      return new ConcreteBounds(this.element, comment, comment);\n    }\n  }\n\n  __appendHTML(html: string): Bounds {\n    return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);\n  }\n\n  appendDynamicHTML(value: string): void {\n    let bounds = this.trustedContent(value);\n    this.didAppendBounds(bounds);\n  }\n\n  appendDynamicText(value: string): SimpleText {\n    let node = this.untrustedContent(value);\n    this.didAppendNode(node);\n    return node;\n  }\n\n  appendDynamicFragment(value: SimpleDocumentFragment): void {\n    let bounds = this.__appendFragment(value);\n    this.didAppendBounds(bounds);\n  }\n\n  appendDynamicNode(value: SimpleNode): void {\n    let node = this.__appendNode(value);\n    let bounds = new ConcreteBounds(this.element, node, node);\n    this.didAppendBounds(bounds);\n  }\n\n  private trustedContent(value: string): Bounds {\n    return this.__appendHTML(value);\n  }\n\n  private untrustedContent(value: string): SimpleText {\n    return this.__appendText(value);\n  }\n\n  appendComment(string: string): SimpleComment {\n    return this.didAppendNode(this.__appendComment(string));\n  }\n\n  __appendComment(string: string): SimpleComment {\n    let { dom, element, nextSibling } = this;\n    let node = dom.createComment(string);\n    dom.insertBefore(element, node, nextSibling);\n    return node;\n  }\n\n  __setAttribute(name: string, value: string, namespace: Nullable<AttrNamespace>): void {\n    this.dom.setAttribute(this.constructing!, name, value, namespace);\n  }\n\n  __setProperty(name: string, value: unknown): void {\n    (this.constructing! as any)[name] = value;\n  }\n\n  setStaticAttribute(name: string, value: string, namespace: Nullable<AttrNamespace>): void {\n    this.__setAttribute(name, value, namespace);\n  }\n\n  setDynamicAttribute(\n    name: string,\n    value: unknown,\n    trusting: boolean,\n    namespace: Nullable<AttrNamespace>\n  ): DynamicAttribute {\n    let element = this.constructing!;\n    let attribute = dynamicAttribute(element, name, namespace, trusting);\n    attribute.set(this, value, this.env);\n    return attribute;\n  }\n}\n\nexport class SimpleLiveBlock implements LiveBlock {\n  protected first: Nullable<FirstNode> = null;\n  protected last: Nullable<LastNode> = null;\n  protected nesting = 0;\n\n  constructor(private parent: SimpleElement) {}\n\n  parentElement() {\n    return this.parent;\n  }\n\n  firstNode(): SimpleNode {\n    let first = expect(\n      this.first,\n      'cannot call `firstNode()` while `SimpleLiveBlock` is still initializing'\n    );\n\n    return first.firstNode();\n  }\n\n  lastNode(): SimpleNode {\n    let last = expect(\n      this.last,\n      'cannot call `lastNode()` while `SimpleLiveBlock` is still initializing'\n    );\n\n    return last.lastNode();\n  }\n\n  openElement(element: SimpleElement) {\n    this.didAppendNode(element);\n    this.nesting++;\n  }\n\n  closeElement() {\n    this.nesting--;\n  }\n\n  didAppendNode(node: SimpleNode) {\n    if (this.nesting !== 0) return;\n\n    if (!this.first) {\n      this.first = new First(node);\n    }\n\n    this.last = new Last(node);\n  }\n\n  didAppendBounds(bounds: Bounds) {\n    if (this.nesting !== 0) return;\n\n    if (!this.first) {\n      this.first = bounds;\n    }\n\n    this.last = bounds;\n  }\n\n  finalize(stack: ElementBuilder) {\n    if (this.first === null) {\n      stack.appendComment('');\n    }\n  }\n}\n\nexport class RemoteLiveBlock extends SimpleLiveBlock {\n  constructor(parent: SimpleElement) {\n    super(parent);\n\n    registerDestructor(this, () => {\n      // In general, you only need to clear the root of a hierarchy, and should never\n      // need to clear any child nodes. This is an important constraint that gives us\n      // a strong guarantee that clearing a subtree is a single DOM operation.\n      //\n      // Because remote blocks are not normally physically nested inside of the tree\n      // that they are logically nested inside, we manually clear remote blocks when\n      // a logical parent is cleared.\n      //\n      // HOWEVER, it is currently possible for a remote block to be physically nested\n      // inside of the block it is logically contained inside of. This happens when\n      // the remote block is appended to the end of the application's entire element.\n      //\n      // The problem with that scenario is that Glimmer believes that it owns more of\n      // the DOM than it actually does. The code is attempting to write past the end\n      // of the Glimmer-managed root, but Glimmer isn't aware of that.\n      //\n      // The correct solution to that problem is for Glimmer to be aware of the end\n      // of the bounds that it owns, and once we make that change, this check could\n      // be removed.\n      //\n      // For now, a more targeted fix is to check whether the node was already removed\n      // and avoid clearing the node if it was. In most cases this shouldn't happen,\n      // so this might hide bugs where the code clears nested nodes unnecessarily,\n      // so we should eventually try to do the correct fix.\n      if (this.parentElement() === this.firstNode().parentNode) {\n        clear(this);\n      }\n    });\n  }\n}\n\nexport class UpdatableBlockImpl extends SimpleLiveBlock implements UpdatableBlock {\n  reset(): Nullable<SimpleNode> {\n    destroy(this);\n    let nextSibling = clear(this);\n\n    this.first = null;\n    this.last = null;\n    this.nesting = 0;\n\n    return nextSibling;\n  }\n}\n\n// FIXME: All the noops in here indicate a modelling problem\nexport class LiveBlockList implements LiveBlock {\n  constructor(\n    private readonly parent: SimpleElement,\n    public boundList: LiveBlock[]\n  ) {\n    this.parent = parent;\n    this.boundList = boundList;\n  }\n\n  parentElement() {\n    return this.parent;\n  }\n\n  firstNode(): SimpleNode {\n    let head = expect(\n      this.boundList[0],\n      'cannot call `firstNode()` while `LiveBlockList` is still initializing'\n    );\n\n    return head.firstNode();\n  }\n\n  lastNode(): SimpleNode {\n    let boundList = this.boundList;\n\n    let tail = expect(\n      boundList[boundList.length - 1],\n      'cannot call `lastNode()` while `LiveBlockList` is still initializing'\n    );\n\n    return tail.lastNode();\n  }\n\n  openElement(_element: SimpleElement) {\n    assert(false, 'Cannot openElement directly inside a block list');\n  }\n\n  closeElement() {\n    assert(false, 'Cannot closeElement directly inside a block list');\n  }\n\n  didAppendNode(_node: SimpleNode) {\n    assert(false, 'Cannot create a new node directly inside a block list');\n  }\n\n  didAppendBounds(_bounds: Bounds) {}\n\n  finalize(_stack: ElementBuilder) {\n    assert(this.boundList.length > 0, 'boundsList cannot be empty');\n  }\n}\n\nexport function clientBuilder(env: Environment, cursor: CursorImpl): ElementBuilder {\n  return NewElementBuilder.forInitialRender(env, cursor);\n}\n","import type {\n  Dict,\n  Maybe,\n  Nullable,\n  RuntimeOp,\n  SomeVmOp,\n  VmMachineOp,\n  VmOp,\n} from '@glimmer/interfaces';\nimport { debug, logOpcode, opcodeMetadata, recordStackSize } from '@glimmer/debug';\nimport { LOCAL_DEBUG, LOCAL_SHOULD_LOG } from '@glimmer/local-debug-flags';\nimport { valueForRef } from '@glimmer/reference';\nimport { assert, LOCAL_LOGGER, unwrap } from '@glimmer/util';\nimport { $fp, $pc, $ra, $sp, Op } from '@glimmer/vm';\n\nimport type { LowLevelVM, VM } from './vm';\nimport type { InternalVM } from './vm/append';\n\nimport { isScopeReference } from './scope';\nimport { CONSTANTS, DESTROYABLE_STACK, INNER_VM, STACKS } from './symbols';\nimport { CURSOR_STACK } from './vm/element-builder';\n\nexport interface OpcodeJSON {\n  type: number | string;\n  guid?: Nullable<number>;\n  deopted?: boolean;\n  args?: string[];\n  details?: Dict<Nullable<string>>;\n  children?: OpcodeJSON[];\n}\n\nexport type Operand1 = number;\nexport type Operand2 = number;\nexport type Operand3 = number;\n\nexport type Syscall = (vm: InternalVM, opcode: RuntimeOp) => void;\nexport type MachineOpcode = (vm: LowLevelVM, opcode: RuntimeOp) => void;\n\nexport type Evaluate =\n  | { syscall: true; evaluate: Syscall }\n  | { syscall: false; evaluate: MachineOpcode };\n\nexport type DebugState = {\n  pc: number;\n  sp: number;\n  type: VmMachineOp | VmOp;\n  isMachine: 0 | 1;\n  size: number;\n  params?: Maybe<Dict> | undefined;\n  name?: string | undefined;\n  state: unknown;\n};\n\nexport class AppendOpcodes {\n  private evaluateOpcode: Evaluate[] = new Array(Op.Size).fill(null);\n\n  add<Name extends VmOp>(name: Name, evaluate: Syscall): void;\n  add<Name extends VmMachineOp>(name: Name, evaluate: MachineOpcode, kind: 'machine'): void;\n  add<Name extends SomeVmOp>(\n    name: Name,\n    evaluate: Syscall | MachineOpcode,\n    kind = 'syscall'\n  ): void {\n    this.evaluateOpcode[name as number] = {\n      syscall: kind !== 'machine',\n      evaluate,\n    } as Evaluate;\n  }\n\n  debugBefore(vm: VM, opcode: RuntimeOp): DebugState {\n    let params: Maybe<Dict> = undefined;\n    let opName: string | undefined = undefined;\n\n    if (LOCAL_SHOULD_LOG) {\n      let pos = vm[INNER_VM].fetchRegister($pc) - opcode.size;\n\n      [opName, params] = debug(vm[CONSTANTS], opcode, opcode.isMachine)!;\n\n      // console.log(`${typePos(vm['pc'])}.`);\n      LOCAL_LOGGER.log(`${pos}. ${logOpcode(opName, params)}`);\n\n      let debugParams = [];\n      for (let prop in params) {\n        debugParams.push(prop, '=', params[prop]);\n      }\n\n      LOCAL_LOGGER.log(...debugParams);\n    }\n\n    let sp: number;\n\n    if (LOCAL_DEBUG) {\n      sp = vm.fetchValue($sp);\n    }\n\n    recordStackSize(vm.fetchValue($sp));\n    return {\n      sp: sp!,\n      pc: vm.fetchValue($pc),\n      name: opName,\n      params,\n      type: opcode.type,\n      isMachine: opcode.isMachine,\n      size: opcode.size,\n      state: undefined,\n    };\n  }\n\n  debugAfter(vm: VM, pre: DebugState) {\n    let { sp, type, isMachine, pc } = pre;\n\n    if (LOCAL_DEBUG) {\n      let meta = opcodeMetadata(type, isMachine);\n      let actualChange = vm.fetchValue($sp) - sp;\n      if (\n        meta &&\n        meta.check &&\n        typeof meta.stackChange! === 'number' &&\n        meta.stackChange !== actualChange\n      ) {\n        throw new Error(\n          `Error in ${pre.name}:\\n\\n${pc}. ${logOpcode(\n            pre.name!,\n            pre.params\n          )}\\n\\nStack changed by ${actualChange}, expected ${meta.stackChange}`\n        );\n      }\n\n      if (LOCAL_SHOULD_LOG) {\n        LOCAL_LOGGER.log(\n          '%c -> pc: %d, ra: %d, fp: %d, sp: %d, s0: %O, s1: %O, t0: %O, t1: %O, v0: %O',\n          'color: orange',\n          vm[INNER_VM].registers[$pc],\n          vm[INNER_VM].registers[$ra],\n          vm[INNER_VM].registers[$fp],\n          vm[INNER_VM].registers[$sp],\n          vm['s0'],\n          vm['s1'],\n          vm['t0'],\n          vm['t1'],\n          vm['v0']\n        );\n        LOCAL_LOGGER.log('%c -> eval stack', 'color: red', vm.stack.toArray());\n        LOCAL_LOGGER.log('%c -> block stack', 'color: magenta', vm.elements().debugBlocks());\n        LOCAL_LOGGER.log(\n          '%c -> destructor stack',\n          'color: violet',\n          vm[DESTROYABLE_STACK].toArray()\n        );\n        if (vm[STACKS].scope.current === null) {\n          LOCAL_LOGGER.log('%c -> scope', 'color: green', 'null');\n        } else {\n          LOCAL_LOGGER.log(\n            '%c -> scope',\n            'color: green',\n            vm.scope().slots.map((s) => (isScopeReference(s) ? valueForRef(s) : s))\n          );\n        }\n\n        LOCAL_LOGGER.log(\n          '%c -> elements',\n          'color: blue',\n          vm.elements()[CURSOR_STACK].current!.element\n        );\n\n        LOCAL_LOGGER.log('%c -> constructing', 'color: aqua', vm.elements()['constructing']);\n      }\n    }\n  }\n\n  evaluate(vm: VM, opcode: RuntimeOp, type: number) {\n    let operation = unwrap(this.evaluateOpcode[type]);\n\n    if (operation.syscall) {\n      assert(\n        !opcode.isMachine,\n        `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`\n      );\n      operation.evaluate(vm, opcode);\n    } else {\n      assert(\n        opcode.isMachine,\n        `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`\n      );\n      operation.evaluate(vm[INNER_VM], opcode);\n    }\n  }\n}\n\nexport const APPEND_OPCODES = new AppendOpcodes();\n","import type {\n  CapturedArguments,\n  CurriedComponent,\n  CurriedHelper,\n  CurriedModifier,\n  CurriedType,\n  Owner,\n} from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\n\nconst TYPE: unique symbol = Symbol('TYPE');\nconst INNER: unique symbol = Symbol('INNER');\nconst OWNER: unique symbol = Symbol('OWNER');\nconst ARGS: unique symbol = Symbol('ARGS');\nconst RESOLVED: unique symbol = Symbol('RESOLVED');\n\nconst CURRIED_VALUES = new WeakSet();\n\nexport function isCurriedValue(value: unknown): value is CurriedValue<CurriedType> {\n  return CURRIED_VALUES.has(value as object);\n}\n\nexport function isCurriedType<T extends CurriedType>(\n  value: unknown,\n  type: T\n): value is CurriedValue<T> {\n  return isCurriedValue(value) && value[TYPE] === type;\n}\n\nexport class CurriedValue<T extends CurriedType = CurriedType> {\n  [TYPE]: T;\n  [INNER]: object | string | CurriedValue<T>;\n  [OWNER]: Owner;\n  [ARGS]: CapturedArguments | null;\n  [RESOLVED]: boolean;\n\n  /** @internal */\n  constructor(\n    type: T,\n    inner: object | string | CurriedValue<T>,\n    owner: Owner,\n    args: CapturedArguments | null,\n    resolved = false\n  ) {\n    CURRIED_VALUES.add(this);\n    this[TYPE] = type;\n    this[INNER] = inner;\n    this[OWNER] = owner;\n    this[ARGS] = args;\n    this[RESOLVED] = resolved;\n  }\n}\n\ninterface ResolvedCurriedValue<T> {\n  definition: T;\n  owner: Owner;\n  resolved: boolean;\n  positional: Reference[] | undefined;\n  named: Record<string, Reference>[] | undefined;\n}\n\nexport function resolveCurriedValue(\n  curriedValue: CurriedValue<CurriedComponent>\n): ResolvedCurriedValue<object | string>;\nexport function resolveCurriedValue(\n  curriedValue: CurriedValue<CurriedHelper> | CurriedValue<CurriedModifier>\n): ResolvedCurriedValue<object>;\nexport function resolveCurriedValue(\n  curriedValue: CurriedValue<CurriedType>\n): ResolvedCurriedValue<object | string> {\n  let currentWrapper = curriedValue;\n  let positional: Reference[] | undefined;\n  let named: Record<string, Reference>[] | undefined;\n  let definition, owner, resolved;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let { [ARGS]: curriedArgs, [INNER]: inner } = currentWrapper;\n\n    if (curriedArgs !== null) {\n      let { named: curriedNamed, positional: curriedPositional } = curriedArgs;\n\n      if (curriedPositional.length > 0) {\n        positional =\n          positional === undefined ? curriedPositional : curriedPositional.concat(positional);\n      }\n\n      if (named === undefined) {\n        named = [];\n      }\n\n      named.unshift(curriedNamed);\n    }\n\n    if (!isCurriedValue(inner)) {\n      // Save off the owner that this helper was curried with. Later on,\n      // we'll fetch the value of this register and set it as the owner on the\n      // new root scope.\n      definition = inner;\n      owner = currentWrapper[OWNER];\n      resolved = currentWrapper[RESOLVED];\n      break;\n    }\n\n    currentWrapper = inner;\n  }\n\n  return { definition, owner, resolved, positional, named };\n}\n\nexport function curry<T extends CurriedType>(\n  type: T,\n  spec: object | string | CurriedValue<T>,\n  owner: Owner,\n  args: CapturedArguments | null,\n  resolved = false\n): CurriedValue<T> {\n  return new CurriedValue(type, spec, owner, args, resolved);\n}\n","import type {\n  ComponentDefinitionState,\n  ComponentInstanceState,\n  InternalComponentManager,\n  WithCustomDebugRenderTree,\n} from '@glimmer/interfaces';\n\n/** @internal */\nexport function hasCustomDebugRenderTreeLifecycle<\n  D extends ComponentDefinitionState,\n  I extends ComponentInstanceState,\n>(manager: InternalComponentManager<I, D>): manager is WithCustomDebugRenderTree<I, D> {\n  return 'getDebugCustomRenderTree' in manager;\n}\n","import type { CompilableTemplate, Nullable, UpdatingOpcode } from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport type { Revision, Tag } from '@glimmer/validator';\nimport {\n  check,\n  CheckBlockSymbolTable,\n  CheckHandle,\n  CheckInstanceof,\n  CheckNumber,\n  CheckOption,\n  CheckPrimitive,\n} from '@glimmer/debug';\nimport { toBool } from '@glimmer/global-context';\nimport {\n  createComputeRef,\n  createConstRef,\n  createPrimitiveRef,\n  FALSE_REFERENCE,\n  isConstRef,\n  NULL_REFERENCE,\n  TRUE_REFERENCE,\n  UNDEFINED_REFERENCE,\n  valueForRef,\n} from '@glimmer/reference';\nimport { assert, decodeHandle, decodeImmediate, expect, isHandle, unwrap } from '@glimmer/util';\nimport {\n  beginTrackFrame,\n  CONSTANT_TAG,\n  consumeTag,\n  endTrackFrame,\n  INITIAL,\n  validateTag,\n  valueForTag,\n} from '@glimmer/validator';\nimport { Op } from '@glimmer/vm';\n\nimport type { UpdatingVM } from '../../vm';\nimport type { InternalVM } from '../../vm/append';\n\nimport { APPEND_OPCODES } from '../../opcodes';\nimport { CONSTANTS } from '../../symbols';\nimport { VMArgumentsImpl } from '../../vm/arguments';\nimport { CheckReference, CheckScope } from './-debug-strip';\nimport { stackAssert } from './assert';\n\nAPPEND_OPCODES.add(Op.ChildScope, (vm) => vm.pushChildScope());\n\nAPPEND_OPCODES.add(Op.PopScope, (vm) => vm.popScope());\n\nAPPEND_OPCODES.add(Op.PushDynamicScope, (vm) => vm.pushDynamicScope());\n\nAPPEND_OPCODES.add(Op.PopDynamicScope, (vm) => vm.popDynamicScope());\n\nAPPEND_OPCODES.add(Op.Constant, (vm, { op1: other }) => {\n  vm.stack.push(vm[CONSTANTS].getValue(decodeHandle(other)));\n});\n\nAPPEND_OPCODES.add(Op.ConstantReference, (vm, { op1: other }) => {\n  vm.stack.push(createConstRef(vm[CONSTANTS].getValue(decodeHandle(other)), false));\n});\n\nAPPEND_OPCODES.add(Op.Primitive, (vm, { op1: primitive }) => {\n  let stack = vm.stack;\n\n  if (isHandle(primitive)) {\n    // it is a handle which does not already exist on the stack\n    let value = vm[CONSTANTS].getValue(decodeHandle(primitive));\n    stack.push(value as object);\n  } else {\n    // is already an encoded immediate or primitive handle\n    stack.push(decodeImmediate(primitive));\n  }\n});\n\nAPPEND_OPCODES.add(Op.PrimitiveReference, (vm) => {\n  let stack = vm.stack;\n  let value = check(stack.pop(), CheckPrimitive);\n  let ref;\n\n  if (value === undefined) {\n    ref = UNDEFINED_REFERENCE;\n  } else if (value === null) {\n    ref = NULL_REFERENCE;\n  } else if (value === true) {\n    ref = TRUE_REFERENCE;\n  } else if (value === false) {\n    ref = FALSE_REFERENCE;\n  } else {\n    ref = createPrimitiveRef(value);\n  }\n\n  stack.push(ref);\n});\n\nAPPEND_OPCODES.add(Op.Dup, (vm, { op1: register, op2: offset }) => {\n  let position = check(vm.fetchValue(register), CheckNumber) - offset;\n  vm.stack.dup(position);\n});\n\nAPPEND_OPCODES.add(Op.Pop, (vm, { op1: count }) => {\n  vm.stack.pop(count);\n});\n\nAPPEND_OPCODES.add(Op.Load, (vm, { op1: register }) => {\n  vm.load(register);\n});\n\nAPPEND_OPCODES.add(Op.Fetch, (vm, { op1: register }) => {\n  vm.fetch(register);\n});\n\nAPPEND_OPCODES.add(Op.BindDynamicScope, (vm, { op1: _names }) => {\n  let names = vm[CONSTANTS].getArray<string>(_names);\n  vm.bindDynamicScope(names);\n});\n\nAPPEND_OPCODES.add(Op.Enter, (vm, { op1: args }) => {\n  vm.enter(args);\n});\n\nAPPEND_OPCODES.add(Op.Exit, (vm) => {\n  vm.exit();\n});\n\nAPPEND_OPCODES.add(Op.PushSymbolTable, (vm, { op1: _table }) => {\n  let stack = vm.stack;\n  stack.push(vm[CONSTANTS].getValue(_table));\n});\n\nAPPEND_OPCODES.add(Op.PushBlockScope, (vm) => {\n  let stack = vm.stack;\n  stack.push(vm.scope());\n});\n\nAPPEND_OPCODES.add(Op.CompileBlock, (vm: InternalVM) => {\n  let stack = vm.stack;\n  let block = stack.pop<Nullable<CompilableTemplate> | 0>();\n\n  if (block) {\n    stack.push(vm.compile(block));\n  } else {\n    stack.push(null);\n  }\n});\n\nAPPEND_OPCODES.add(Op.InvokeYield, (vm) => {\n  let { stack } = vm;\n\n  let handle = check(stack.pop(), CheckOption(CheckHandle));\n  let scope = check(stack.pop(), CheckOption(CheckScope));\n  let table = check(stack.pop(), CheckOption(CheckBlockSymbolTable));\n\n  assert(\n    table === null || (table && typeof table === 'object' && Array.isArray(table.parameters)),\n    stackAssert('Option<BlockSymbolTable>', table)\n  );\n\n  let args = check(stack.pop(), CheckInstanceof(VMArgumentsImpl));\n\n  if (table === null) {\n    // To balance the pop{Frame,Scope}\n    vm.pushFrame();\n    vm.pushScope(scope ?? vm.scope());\n\n    return;\n  }\n\n  let invokingScope = expect(scope, 'BUG: expected scope');\n\n  // If necessary, create a child scope\n  {\n    let locals = table.parameters;\n    let localsCount = locals.length;\n\n    if (localsCount > 0) {\n      invokingScope = invokingScope.child();\n\n      for (let i = 0; i < localsCount; i++) {\n        invokingScope.bindSymbol(unwrap(locals[i]), args.at(i));\n      }\n    }\n  }\n\n  vm.pushFrame();\n  vm.pushScope(invokingScope);\n  vm.call(handle!);\n});\n\nAPPEND_OPCODES.add(Op.JumpIf, (vm, { op1: target }) => {\n  let reference = check(vm.stack.pop(), CheckReference);\n  let value = Boolean(valueForRef(reference));\n\n  if (isConstRef(reference)) {\n    if (value === true) {\n      vm.goto(target);\n    }\n  } else {\n    if (value === true) {\n      vm.goto(target);\n    }\n\n    vm.updateWith(new Assert(reference));\n  }\n});\n\nAPPEND_OPCODES.add(Op.JumpUnless, (vm, { op1: target }) => {\n  let reference = check(vm.stack.pop(), CheckReference);\n  let value = Boolean(valueForRef(reference));\n\n  if (isConstRef(reference)) {\n    if (value === false) {\n      vm.goto(target);\n    }\n  } else {\n    if (value === false) {\n      vm.goto(target);\n    }\n\n    vm.updateWith(new Assert(reference));\n  }\n});\n\nAPPEND_OPCODES.add(Op.JumpEq, (vm, { op1: target, op2: comparison }) => {\n  let other = check(vm.stack.peek(), CheckNumber);\n\n  if (other === comparison) {\n    vm.goto(target);\n  }\n});\n\nAPPEND_OPCODES.add(Op.AssertSame, (vm) => {\n  let reference = check(vm.stack.peek(), CheckReference);\n\n  if (isConstRef(reference) === false) {\n    vm.updateWith(new Assert(reference));\n  }\n});\n\nAPPEND_OPCODES.add(Op.ToBoolean, (vm) => {\n  let { stack } = vm;\n  let valueRef = check(stack.pop(), CheckReference);\n\n  stack.push(createComputeRef(() => toBool(valueForRef(valueRef))));\n});\n\nexport class Assert implements UpdatingOpcode {\n  private last: unknown;\n\n  constructor(private ref: Reference) {\n    this.last = valueForRef(ref);\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { last, ref } = this;\n    let current = valueForRef(ref);\n\n    if (last !== current) {\n      vm.throw();\n    }\n  }\n}\n\nexport class AssertFilter<T, U> implements UpdatingOpcode {\n  private last: U;\n\n  constructor(\n    private ref: Reference<T>,\n    private filter: (from: T) => U\n  ) {\n    this.last = filter(valueForRef(ref));\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { last, ref, filter } = this;\n    let current = filter(valueForRef(ref));\n\n    if (last !== current) {\n      vm.throw();\n    }\n  }\n}\n\nexport class JumpIfNotModifiedOpcode implements UpdatingOpcode {\n  private tag: Tag = CONSTANT_TAG;\n  private lastRevision: Revision = INITIAL;\n  private target?: number;\n\n  finalize(tag: Tag, target: number) {\n    this.target = target;\n    this.didModify(tag);\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { tag, target, lastRevision } = this;\n\n    if (!vm.alwaysRevalidate && validateTag(tag, lastRevision)) {\n      consumeTag(tag);\n      vm.goto(expect(target, 'VM BUG: Target must be set before attempting to jump'));\n    }\n  }\n\n  didModify(tag: Tag) {\n    this.tag = tag;\n    this.lastRevision = valueForTag(this.tag);\n    consumeTag(tag);\n  }\n}\n\nexport class BeginTrackFrameOpcode implements UpdatingOpcode {\n  constructor(private debugLabel?: string) {}\n\n  evaluate() {\n    beginTrackFrame(this.debugLabel);\n  }\n}\n\nexport class EndTrackFrameOpcode implements UpdatingOpcode {\n  constructor(private target: JumpIfNotModifiedOpcode) {}\n\n  evaluate() {\n    let tag = endTrackFrame();\n    this.target.didModify(tag);\n  }\n}\n","export function stackAssert(name: string, top: unknown) {\n  return `Expected top of stack to be ${name}, was ${String(top)}`;\n}\n","import type {\n  CapturedPositionalArguments,\n  Environment,\n  ModifierDefinition,\n  ModifierDefinitionState,\n  ModifierInstance,\n  Nullable,\n  Owner,\n  UpdatingOpcode,\n  UpdatingVM,\n} from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport type { Revision, Tag } from '@glimmer/validator';\nimport {\n  check,\n  CheckElement,\n  CheckMaybe,\n  CheckNode,\n  CheckOption,\n  CheckString,\n} from '@glimmer/debug';\nimport { associateDestroyableChild, destroy } from '@glimmer/destroyable';\nimport { getInternalModifierManager } from '@glimmer/manager';\nimport { createComputeRef, isConstRef, valueForRef } from '@glimmer/reference';\nimport { assign, debugToString, expect, isObject } from '@glimmer/util';\nimport { consumeTag, CURRENT_TAG, validateTag, valueForTag } from '@glimmer/validator';\nimport { $t0, CurriedTypes, Op } from '@glimmer/vm';\n\nimport type { CurriedValue } from '../../curried-value';\nimport type { DynamicAttribute } from '../../vm/attributes/dynamic';\n\nimport { isCurriedType, resolveCurriedValue } from '../../curried-value';\nimport { APPEND_OPCODES } from '../../opcodes';\nimport { CONSTANTS } from '../../symbols';\nimport { CheckArguments, CheckOperations, CheckReference } from './-debug-strip';\nimport { Assert } from './vm';\n\nAPPEND_OPCODES.add(Op.Text, (vm, { op1: text }) => {\n  vm.elements().appendText(vm[CONSTANTS].getValue(text));\n});\n\nAPPEND_OPCODES.add(Op.Comment, (vm, { op1: text }) => {\n  vm.elements().appendComment(vm[CONSTANTS].getValue(text));\n});\n\nAPPEND_OPCODES.add(Op.OpenElement, (vm, { op1: tag }) => {\n  vm.elements().openElement(vm[CONSTANTS].getValue(tag));\n});\n\nAPPEND_OPCODES.add(Op.OpenDynamicElement, (vm) => {\n  let tagName = check(valueForRef(check(vm.stack.pop(), CheckReference)), CheckString);\n  vm.elements().openElement(tagName);\n});\n\nAPPEND_OPCODES.add(Op.PushRemoteElement, (vm) => {\n  let elementRef = check(vm.stack.pop(), CheckReference);\n  let insertBeforeRef = check(vm.stack.pop(), CheckReference);\n  let guidRef = check(vm.stack.pop(), CheckReference);\n\n  let element = check(valueForRef(elementRef), CheckElement);\n  let insertBefore = check(valueForRef(insertBeforeRef), CheckMaybe(CheckOption(CheckNode)));\n  let guid = valueForRef(guidRef) as string;\n\n  if (!isConstRef(elementRef)) {\n    vm.updateWith(new Assert(elementRef));\n  }\n\n  if (insertBefore !== undefined && !isConstRef(insertBeforeRef)) {\n    vm.updateWith(new Assert(insertBeforeRef));\n  }\n\n  let block = vm.elements().pushRemoteElement(element, guid, insertBefore);\n  if (block) vm.associateDestroyable(block);\n});\n\nAPPEND_OPCODES.add(Op.PopRemoteElement, (vm) => {\n  vm.elements().popRemoteElement();\n});\n\nAPPEND_OPCODES.add(Op.FlushElement, (vm) => {\n  let operations = check(vm.fetchValue($t0), CheckOperations);\n  let modifiers: Nullable<ModifierInstance[]> = null;\n\n  if (operations) {\n    modifiers = operations.flush(vm);\n    vm.loadValue($t0, null);\n  }\n\n  vm.elements().flushElement(modifiers);\n});\n\nAPPEND_OPCODES.add(Op.CloseElement, (vm) => {\n  let modifiers = vm.elements().closeElement();\n\n  if (modifiers !== null) {\n    modifiers.forEach((modifier) => {\n      vm.env.scheduleInstallModifier(modifier);\n      const d = modifier.manager.getDestroyable(modifier.state);\n\n      if (d !== null) {\n        vm.associateDestroyable(d);\n      }\n    });\n  }\n});\n\nAPPEND_OPCODES.add(Op.Modifier, (vm, { op1: handle }) => {\n  if (vm.env.isInteractive === false) {\n    return;\n  }\n\n  let owner = vm.getOwner();\n  let args = check(vm.stack.pop(), CheckArguments);\n  let definition = vm[CONSTANTS].getValue<ModifierDefinition>(handle);\n\n  let { manager } = definition;\n\n  let { constructing } = vm.elements();\n\n  let state = manager.create(\n    owner,\n    expect(constructing, 'BUG: ElementModifier could not find the element it applies to'),\n    definition.state,\n    args.capture()\n  );\n\n  let instance: ModifierInstance = {\n    manager,\n    state,\n    definition,\n  };\n\n  let operations = expect(\n    check(vm.fetchValue($t0), CheckOperations),\n    'BUG: ElementModifier could not find operations to append to'\n  );\n\n  operations.addModifier(instance);\n\n  let tag = manager.getTag(state);\n\n  if (tag !== null) {\n    consumeTag(tag);\n    return vm.updateWith(new UpdateModifierOpcode(tag, instance));\n  }\n});\n\nAPPEND_OPCODES.add(Op.DynamicModifier, (vm) => {\n  if (vm.env.isInteractive === false) {\n    return;\n  }\n\n  let { stack } = vm;\n  let ref = check(stack.pop(), CheckReference);\n  let args = check(stack.pop(), CheckArguments).capture();\n  let { constructing } = vm.elements();\n  let initialOwner = vm.getOwner();\n\n  let instanceRef = createComputeRef(() => {\n    let value = valueForRef(ref);\n    let owner: Owner;\n\n    if (!isObject(value)) {\n      return;\n    }\n\n    let hostDefinition: CurriedValue | ModifierDefinitionState;\n\n    if (isCurriedType(value, CurriedTypes.Modifier)) {\n      let {\n        definition: resolvedDefinition,\n        owner: curriedOwner,\n        positional,\n        named,\n      } = resolveCurriedValue(value);\n\n      hostDefinition = resolvedDefinition;\n      owner = curriedOwner;\n\n      if (positional !== undefined) {\n        args.positional = positional.concat(args.positional) as CapturedPositionalArguments;\n      }\n\n      if (named !== undefined) {\n        args.named = assign({}, ...named, args.named);\n      }\n    } else {\n      hostDefinition = value;\n      owner = initialOwner;\n    }\n\n    let manager = getInternalModifierManager(hostDefinition, true);\n\n    if (manager === null) {\n      if (import.meta.env.DEV) {\n        throw new Error(\n          `Expected a dynamic modifier definition, but received an object or function that did not have a modifier manager associated with it. The dynamic invocation was \\`{{${\n            ref.debugLabel\n          }}}\\`, and the incorrect definition is the value at the path \\`${\n            ref.debugLabel\n          }\\`, which was: ${debugToString!(hostDefinition)}`\n        );\n      } else {\n        throw new Error('BUG: modifier manager expected');\n      }\n    }\n\n    let definition = {\n      resolvedName: null,\n      manager,\n      state: hostDefinition,\n    };\n\n    let state = manager.create(\n      owner,\n      expect(constructing, 'BUG: ElementModifier could not find the element it applies to'),\n      definition.state,\n      args\n    );\n\n    return {\n      manager,\n      state,\n      definition,\n    };\n  });\n\n  let instance = valueForRef(instanceRef);\n  let tag = null;\n\n  if (instance !== undefined) {\n    let operations = expect(\n      check(vm.fetchValue($t0), CheckOperations),\n      'BUG: ElementModifier could not find operations to append to'\n    );\n\n    operations.addModifier(instance);\n\n    tag = instance.manager.getTag(instance.state);\n\n    if (tag !== null) {\n      consumeTag(tag);\n    }\n  }\n\n  if (!isConstRef(ref) || tag) {\n    return vm.updateWith(new UpdateDynamicModifierOpcode(tag, instance, instanceRef));\n  }\n});\n\nexport class UpdateModifierOpcode implements UpdatingOpcode {\n  private lastUpdated: Revision;\n\n  constructor(\n    private tag: Tag,\n    private modifier: ModifierInstance\n  ) {\n    this.lastUpdated = valueForTag(tag);\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { modifier, tag, lastUpdated } = this;\n\n    consumeTag(tag);\n\n    if (!validateTag(tag, lastUpdated)) {\n      vm.env.scheduleUpdateModifier(modifier);\n      this.lastUpdated = valueForTag(tag);\n    }\n  }\n}\n\nexport class UpdateDynamicModifierOpcode implements UpdatingOpcode {\n  private lastUpdated: Revision;\n\n  constructor(\n    private tag: Tag | null,\n    private instance: ModifierInstance | undefined,\n    private instanceRef: Reference<ModifierInstance | undefined>\n  ) {\n    this.lastUpdated = valueForTag(tag ?? CURRENT_TAG);\n  }\n\n  evaluate(vm: UpdatingVM) {\n    let { tag, lastUpdated, instance, instanceRef } = this;\n\n    let newInstance = valueForRef(instanceRef);\n\n    if (newInstance !== instance) {\n      if (instance !== undefined) {\n        let destroyable = instance.manager.getDestroyable(instance.state);\n\n        if (destroyable !== null) {\n          destroy(destroyable);\n        }\n      }\n\n      if (newInstance !== undefined) {\n        let { manager, state } = newInstance;\n        let destroyable = manager.getDestroyable(state);\n\n        if (destroyable !== null) {\n          associateDestroyableChild(this, destroyable);\n        }\n\n        tag = manager.getTag(state);\n\n        if (tag !== null) {\n          this.lastUpdated = valueForTag(tag);\n        }\n\n        this.tag = tag;\n        vm.env.scheduleInstallModifier(newInstance);\n      }\n\n      this.instance = newInstance;\n    } else if (tag !== null && !validateTag(tag, lastUpdated)) {\n      vm.env.scheduleUpdateModifier(instance!);\n      this.lastUpdated = valueForTag(tag);\n    }\n\n    if (tag !== null) {\n      consumeTag(tag);\n    }\n  }\n}\n\nAPPEND_OPCODES.add(Op.StaticAttr, (vm, { op1: _name, op2: _value, op3: _namespace }) => {\n  let name = vm[CONSTANTS].getValue<string>(_name);\n  let value = vm[CONSTANTS].getValue<string>(_value);\n  let namespace = _namespace ? vm[CONSTANTS].getValue<string>(_namespace) : null;\n\n  vm.elements().setStaticAttribute(name, value, namespace);\n});\n\nAPPEND_OPCODES.add(Op.DynamicAttr, (vm, { op1: _name, op2: _trusting, op3: _namespace }) => {\n  let name = vm[CONSTANTS].getValue<string>(_name);\n  let trusting = vm[CONSTANTS].getValue<boolean>(_trusting);\n  let reference = check(vm.stack.pop(), CheckReference);\n  let value = valueForRef(reference);\n  let namespace = _namespace ? vm[CONSTANTS].getValue<string>(_namespace) : null;\n\n  let attribute = vm.elements().setDynamicAttribute(name, value, trusting, namespace);\n\n  if (!isConstRef(reference)) {\n    vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute, vm.env));\n  }\n});\n\nexport class UpdateDynamicAttributeOpcode implements UpdatingOpcode {\n  private updateRef: Reference;\n\n  constructor(reference: Reference<unknown>, attribute: DynamicAttribute, env: Environment) {\n    let initialized = false;\n\n    this.updateRef = createComputeRef(() => {\n      let value = valueForRef(reference);\n\n      if (initialized === true) {\n        attribute.update(value, env);\n      } else {\n        initialized = true;\n      }\n    });\n\n    valueForRef(this.updateRef);\n  }\n\n  evaluate() {\n    valueForRef(this.updateRef);\n  }\n}\n","import type {\n  Bounds,\n  CapabilityMask,\n  CapturedArguments,\n  CompilableProgram,\n  ComponentDefinition,\n  ComponentDefinitionState,\n  ComponentInstance,\n  ComponentInstanceState,\n  ComponentInstanceWithCreate,\n  Dict,\n  DynamicScope,\n  ElementOperations,\n  InternalComponentManager,\n  ModifierInstance,\n  Nullable,\n  Owner,\n  ProgramSymbolTable,\n  Recast,\n  ScopeSlot,\n  UpdatingOpcode,\n  VMArguments,\n  WithDynamicTagName,\n  WithElementHook,\n  WithUpdateHook,\n} from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport {\n  check,\n  CheckFunction,\n  CheckHandle,\n  CheckInstanceof,\n  CheckInterface,\n  CheckOr,\n  CheckProgramSymbolTable,\n  CheckString,\n} from '@glimmer/debug';\nimport { registerDestructor } from '@glimmer/destroyable';\nimport { managerHasCapability } from '@glimmer/manager';\nimport { isConstRef, valueForRef } from '@glimmer/reference';\nimport {\n  assert,\n  assign,\n  debugToString,\n  dict,\n  EMPTY_STRING_ARRAY,\n  enumerate,\n  expect,\n  unwrap,\n  unwrapTemplate,\n} from '@glimmer/util';\nimport { $t0, $t1, CurriedTypes, InternalComponentCapabilities, Op } from '@glimmer/vm';\n\nimport type { CurriedValue } from '../../curried-value';\nimport type { UpdatingVM } from '../../vm';\nimport type { InternalVM } from '../../vm/append';\nimport type { BlockArgumentsImpl } from '../../vm/arguments';\n\nimport { hasCustomDebugRenderTreeLifecycle } from '../../component/interfaces';\nimport { resolveComponent } from '../../component/resolve';\nimport { isCurriedType, isCurriedValue, resolveCurriedValue } from '../../curried-value';\nimport { APPEND_OPCODES } from '../../opcodes';\nimport createClassListRef from '../../references/class-list';\nimport { ARGS, CONSTANTS } from '../../symbols';\nimport { EMPTY_ARGS, VMArgumentsImpl } from '../../vm/arguments';\nimport {\n  CheckArguments,\n  CheckComponentDefinition,\n  CheckComponentInstance,\n  CheckCurriedComponentDefinition,\n  CheckFinishedComponentInstance,\n  CheckInvocation,\n  CheckReference,\n} from './-debug-strip';\nimport { UpdateDynamicAttributeOpcode } from './dom';\n\n/**\n * The VM creates a new ComponentInstance data structure for every component\n * invocation it encounters.\n *\n * Similar to how a ComponentDefinition contains state about all components of a\n * particular type, a ComponentInstance contains state specific to a particular\n * instance of a component type. It also contains a pointer back to its\n * component type's ComponentDefinition.\n */\n\nexport interface InitialComponentInstance {\n  definition: ComponentDefinition;\n  manager: Nullable<InternalComponentManager>;\n  capabilities: Nullable<CapabilityMask>;\n  state: null;\n  handle: Nullable<number>;\n  table: Nullable<ProgramSymbolTable>;\n  lookup: Nullable<Dict<ScopeSlot>>;\n}\n\nexport interface PopulatedComponentInstance {\n  definition: ComponentDefinition;\n  manager: InternalComponentManager;\n  capabilities: CapabilityMask;\n  state: null;\n  handle: number;\n  table: Nullable<ProgramSymbolTable>;\n  lookup: Nullable<Dict<ScopeSlot>>;\n}\n\nexport interface PartialComponentDefinition {\n  state: Nullable<ComponentDefinitionState>;\n  manager: InternalComponentManager;\n}\n\nAPPEND_OPCODES.add(Op.PushComponentDefinition, (vm, { op1: handle }) => {\n  let definition = vm[CONSTANTS].getValue<ComponentDefinition>(handle);\n  assert(!!definition, `Missing component for ${handle}`);\n\n  let { manager, capabilities } = definition;\n\n  let instance: InitialComponentInstance = {\n    definition,\n    manager,\n    capabilities,\n    state: null,\n    handle: null,\n    table: null,\n    lookup: null,\n  };\n\n  vm.stack.push(instance);\n});\n\nAPPEND_OPCODES.add(Op.ResolveDynamicComponent, (vm, { op1: _isStrict }) => {\n  let stack = vm.stack;\n  let component = check(\n    valueForRef(check(stack.pop(), CheckReference)),\n    CheckOr(CheckString, CheckCurriedComponentDefinition)\n  );\n  let constants = vm[CONSTANTS];\n  let owner = vm.getOwner();\n  let isStrict = constants.getValue<boolean>(_isStrict);\n\n  vm.loadValue($t1, null); // Clear the temp register\n\n  let definition: ComponentDefinition | CurriedValue;\n\n  if (typeof component === 'string') {\n    if (import.meta.env.DEV && isStrict) {\n      throw new Error(\n        `Attempted to resolve a dynamic component with a string definition, \\`${component}\\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`\n      );\n    }\n\n    let resolvedDefinition = resolveComponent(vm.runtime.resolver, constants, component, owner);\n\n    definition = expect(resolvedDefinition, `Could not find a component named \"${component}\"`);\n  } else if (isCurriedValue(component)) {\n    definition = component;\n  } else {\n    definition = constants.component(component, owner);\n  }\n\n  stack.push(definition);\n});\n\nAPPEND_OPCODES.add(Op.ResolveCurriedComponent, (vm) => {\n  let stack = vm.stack;\n  let ref = check(stack.pop(), CheckReference);\n  let value = valueForRef(ref);\n  let constants = vm[CONSTANTS];\n\n  let definition: CurriedValue | ComponentDefinition | null;\n\n  if (\n    import.meta.env.DEV &&\n    !(typeof value === 'function' || (typeof value === 'object' && value !== null))\n  ) {\n    throw new Error(\n      `Expected a component definition, but received ${value}. You may have accidentally done <${ref.debugLabel}>, where \"${ref.debugLabel}\" was a string instead of a curried component definition. You must either use the component definition directly, or use the {{component}} helper to create a curried component definition when invoking dynamically.`\n    );\n  }\n\n  if (isCurriedValue(value)) {\n    definition = value;\n  } else {\n    definition = constants.component(value as object, vm.getOwner(), true);\n\n    if (import.meta.env.DEV && definition === null) {\n      throw new Error(\n        `Expected a dynamic component definition, but received an object or function that did not have a component manager associated with it. The dynamic invocation was \\`<${\n          ref.debugLabel\n        }>\\` or \\`{{${\n          ref.debugLabel\n        }}}\\`, and the incorrect definition is the value at the path \\`${\n          ref.debugLabel\n        }\\`, which was: ${debugToString!(value)}`\n      );\n    }\n  }\n\n  stack.push(definition);\n});\n\nAPPEND_OPCODES.add(Op.PushDynamicComponentInstance, (vm) => {\n  let { stack } = vm;\n  let definition = stack.pop<ComponentDefinition>();\n\n  let capabilities, manager;\n\n  if (isCurriedValue(definition)) {\n    manager = capabilities = null;\n  } else {\n    manager = definition.manager;\n    capabilities = definition.capabilities;\n  }\n\n  stack.push({ definition, capabilities, manager, state: null, handle: null, table: null });\n});\n\nAPPEND_OPCODES.add(Op.PushArgs, (vm, { op1: _names, op2: _blockNames, op3: flags }) => {\n  let stack = vm.stack;\n  let names = vm[CONSTANTS].getArray<string>(_names);\n\n  let positionalCount = flags >> 4;\n  let atNames = flags & 0b1000;\n  let blockNames =\n    flags & 0b0111 ? vm[CONSTANTS].getArray<string>(_blockNames) : EMPTY_STRING_ARRAY;\n\n  vm[ARGS].setup(stack, names, blockNames, positionalCount, !!atNames);\n  stack.push(vm[ARGS]);\n});\n\nAPPEND_OPCODES.add(Op.PushEmptyArgs, (vm) => {\n  let { stack } = vm;\n\n  stack.push(vm[ARGS].empty(stack));\n});\n\nAPPEND_OPCODES.add(Op.CaptureArgs, (vm) => {\n  let stack = vm.stack;\n\n  let args = check(stack.pop(), CheckInstanceof(VMArgumentsImpl));\n  let capturedArgs = args.capture();\n  stack.push(capturedArgs);\n});\n\nAPPEND_OPCODES.add(Op.PrepareArgs, (vm, { op1: _state }) => {\n  let stack = vm.stack;\n  let instance = vm.fetchValue<ComponentInstance>(_state);\n  let args = check(stack.pop(), CheckInstanceof(VMArgumentsImpl));\n\n  let { definition } = instance;\n\n  if (isCurriedType(definition, CurriedTypes.Component)) {\n    assert(\n      !definition.manager,\n      \"If the component definition was curried, we don't yet have a manager\"\n    );\n\n    let constants = vm[CONSTANTS];\n\n    let {\n      definition: resolvedDefinition,\n      owner,\n      resolved,\n      positional,\n      named,\n    } = resolveCurriedValue(definition);\n\n    if (resolved === true) {\n      definition = resolvedDefinition as ComponentDefinition;\n    } else if (typeof resolvedDefinition === 'string') {\n      let resolvedValue = vm.runtime.resolver.lookupComponent(resolvedDefinition, owner);\n\n      definition = constants.resolvedComponent(\n        expect(resolvedValue, 'BUG: expected resolved component'),\n        resolvedDefinition\n      );\n    } else {\n      definition = constants.component(resolvedDefinition, owner);\n    }\n\n    if (named !== undefined) {\n      args.named.merge(assign({}, ...named));\n    }\n\n    if (positional !== undefined) {\n      args.realloc(positional.length);\n      args.positional.prepend(positional);\n    }\n\n    let { manager } = definition;\n\n    assert(instance.manager === null, 'component instance manager should not be populated yet');\n    assert(\n      instance.capabilities === null,\n      'component instance manager should not be populated yet'\n    );\n\n    instance.definition = definition;\n    instance.manager = manager;\n    instance.capabilities = definition.capabilities;\n\n    // Save off the owner that this component was curried with. Later on,\n    // we'll fetch the value of this register and set it as the owner on the\n    // new root scope.\n    vm.loadValue($t1, owner);\n  }\n\n  let { manager, state } = definition;\n  let capabilities = instance.capabilities;\n\n  if (!managerHasCapability(manager, capabilities, InternalComponentCapabilities.prepareArgs)) {\n    stack.push(args);\n    return;\n  }\n\n  let blocks = args.blocks.values;\n  let blockNames = args.blocks.names;\n  let preparedArgs = manager.prepareArgs(state, args);\n\n  if (preparedArgs) {\n    args.clear();\n\n    for (let i = 0; i < blocks.length; i++) {\n      stack.push(blocks[i]);\n    }\n\n    let { positional, named } = preparedArgs;\n\n    let positionalCount = positional.length;\n\n    for (let i = 0; i < positionalCount; i++) {\n      stack.push(positional[i]);\n    }\n\n    let names = Object.keys(named);\n\n    for (let i = 0; i < names.length; i++) {\n      stack.push(named[unwrap(names[i])]);\n    }\n\n    args.setup(stack, names, blockNames, positionalCount, false);\n  }\n\n  stack.push(args);\n});\n\nAPPEND_OPCODES.add(Op.CreateComponent, (vm, { op1: flags, op2: _state }) => {\n  let instance = check(vm.fetchValue(_state), CheckComponentInstance);\n  let { definition, manager, capabilities } = instance;\n\n  if (!managerHasCapability(manager, capabilities, InternalComponentCapabilities.createInstance)) {\n    // TODO: Closure and Main components are always invoked dynamically, so this\n    // opcode may run even if this capability is not enabled. In the future we\n    // should handle this in a better way.\n    return;\n  }\n\n  let dynamicScope: Nullable<DynamicScope> = null;\n  if (managerHasCapability(manager, capabilities, InternalComponentCapabilities.dynamicScope)) {\n    dynamicScope = vm.dynamicScope();\n  }\n\n  let hasDefaultBlock = flags & 1;\n  let args: Nullable<VMArguments> = null;\n\n  if (managerHasCapability(manager, capabilities, InternalComponentCapabilities.createArgs)) {\n    args = check(vm.stack.peek(), CheckArguments);\n  }\n\n  let self: Nullable<Reference> = null;\n  if (managerHasCapability(manager, capabilities, InternalComponentCapabilities.createCaller)) {\n    self = vm.getSelf();\n  }\n\n  let state = manager.create(\n    vm.getOwner(),\n    definition.state,\n    args,\n    vm.env,\n    dynamicScope,\n    self,\n    !!hasDefaultBlock\n  );\n\n  // We want to reuse the `state` POJO here, because we know that the opcodes\n  // only transition at exactly one place.\n  instance.state = state;\n\n  if (managerHasCapability(manager, capabilities, InternalComponentCapabilities.updateHook)) {\n    vm.updateWith(new UpdateComponentOpcode(state, manager, dynamicScope));\n  }\n});\n\nAPPEND_OPCODES.add(Op.RegisterComponentDestructor, (vm, { op1: _state }) => {\n  let { manager, state, capabilities } = check(vm.fetchValue(_state), CheckComponentInstance);\n\n  let d = manager.getDestroyable(state);\n\n  if (\n    import.meta.env.DEV &&\n    !managerHasCapability(manager, capabilities, InternalComponentCapabilities.willDestroy) &&\n    d !== null &&\n    (typeof 'willDestroy') in d\n  ) {\n    throw new Error(\n      'BUG: Destructor has willDestroy, but the willDestroy capability was not enabled for this component. Pre-destruction hooks must be explicitly opted into'\n    );\n  }\n\n  if (d) vm.associateDestroyable(d);\n});\n\nAPPEND_OPCODES.add(Op.BeginComponentTransaction, (vm, { op1: _state }) => {\n  let name;\n\n  if (import.meta.env.DEV) {\n    let { definition, manager } = check(vm.fetchValue(_state), CheckComponentInstance);\n\n    name = definition.resolvedName ?? manager.getDebugName(definition.state);\n  }\n\n  vm.beginCacheGroup(name);\n  vm.elements().pushSimpleBlock();\n});\n\nAPPEND_OPCODES.add(Op.PutComponentOperations, (vm) => {\n  vm.loadValue($t0, new ComponentElementOperations());\n});\n\nAPPEND_OPCODES.add(Op.ComponentAttr, (vm, { op1: _name, op2: _trusting, op3: _namespace }) => {\n  let name = vm[CONSTANTS].getValue<string>(_name);\n  let trusting = vm[CONSTANTS].getValue<boolean>(_trusting);\n  let reference = check(vm.stack.pop(), CheckReference);\n  let namespace = _namespace ? vm[CONSTANTS].getValue<string>(_namespace) : null;\n\n  check(vm.fetchValue($t0), CheckInstanceof(ComponentElementOperations)).setAttribute(\n    name,\n    reference,\n    trusting,\n    namespace\n  );\n});\n\nAPPEND_OPCODES.add(Op.StaticComponentAttr, (vm, { op1: _name, op2: _value, op3: _namespace }) => {\n  let name = vm[CONSTANTS].getValue<string>(_name);\n  let value = vm[CONSTANTS].getValue<string>(_value);\n  let namespace = _namespace ? vm[CONSTANTS].getValue<string>(_namespace) : null;\n\n  check(vm.fetchValue($t0), CheckInstanceof(ComponentElementOperations)).setStaticAttribute(\n    name,\n    value,\n    namespace\n  );\n});\n\ntype DeferredAttribute = {\n  value: string | Reference<unknown>;\n  namespace: Nullable<string>;\n  trusting?: boolean;\n};\n\nexport class ComponentElementOperations implements ElementOperations {\n  private attributes = dict<DeferredAttribute>();\n  private classes: (string | Reference<unknown>)[] = [];\n  private modifiers: ModifierInstance[] = [];\n\n  setAttribute(\n    name: string,\n    value: Reference<unknown>,\n    trusting: boolean,\n    namespace: Nullable<string>\n  ) {\n    let deferred = { value, namespace, trusting };\n\n    if (name === 'class') {\n      this.classes.push(value);\n    }\n\n    this.attributes[name] = deferred;\n  }\n\n  setStaticAttribute(name: string, value: string, namespace: Nullable<string>): void {\n    let deferred = { value, namespace };\n\n    if (name === 'class') {\n      this.classes.push(value);\n    }\n\n    this.attributes[name] = deferred;\n  }\n\n  addModifier(modifier: ModifierInstance): void {\n    this.modifiers.push(modifier);\n  }\n\n  flush(vm: InternalVM): ModifierInstance[] {\n    let type: DeferredAttribute | undefined;\n    let attributes = this.attributes;\n\n    for (let name in this.attributes) {\n      if (name === 'type') {\n        type = attributes[name];\n        continue;\n      }\n\n      let attr = unwrap(this.attributes[name]);\n      if (name === 'class') {\n        setDeferredAttr(vm, 'class', mergeClasses(this.classes), attr.namespace, attr.trusting);\n      } else {\n        setDeferredAttr(vm, name, attr.value, attr.namespace, attr.trusting);\n      }\n    }\n\n    if (type !== undefined) {\n      setDeferredAttr(vm, 'type', type.value, type.namespace, type.trusting);\n    }\n\n    return this.modifiers;\n  }\n}\n\nfunction mergeClasses(classes: (string | Reference)[]): string | Reference<unknown> {\n  if (classes.length === 0) {\n    return '';\n  }\n  if (classes.length === 1) {\n    return unwrap(classes[0]);\n  }\n  if (allStringClasses(classes)) {\n    return classes.join(' ');\n  }\n\n  return createClassListRef(classes as Reference[]);\n}\n\nfunction allStringClasses(classes: (string | Reference<unknown>)[]): classes is string[] {\n  return classes.every((c) => typeof c === 'string');\n}\n\nfunction setDeferredAttr(\n  vm: InternalVM,\n  name: string,\n  value: string | Reference<unknown>,\n  namespace: Nullable<string>,\n  trusting = false\n) {\n  if (typeof value === 'string') {\n    vm.elements().setStaticAttribute(name, value, namespace);\n  } else {\n    let attribute = vm\n      .elements()\n      .setDynamicAttribute(name, valueForRef(value), trusting, namespace);\n    if (!isConstRef(value)) {\n      vm.updateWith(new UpdateDynamicAttributeOpcode(value, attribute, vm.env));\n    }\n  }\n}\n\nAPPEND_OPCODES.add(Op.DidCreateElement, (vm, { op1: _state }) => {\n  let { definition, state } = check(vm.fetchValue(_state), CheckComponentInstance);\n  let { manager } = definition;\n\n  let operations = check(vm.fetchValue($t0), CheckInstanceof(ComponentElementOperations));\n\n  (manager as WithElementHook<unknown>).didCreateElement(\n    state,\n    expect(vm.elements().constructing, `Expected a constructing element in DidCreateOpcode`),\n    operations\n  );\n});\n\nAPPEND_OPCODES.add(Op.GetComponentSelf, (vm, { op1: _state, op2: _names }) => {\n  let instance = check(vm.fetchValue(_state), CheckComponentInstance);\n  let { definition, state } = instance;\n  let { manager } = definition;\n  let selfRef = manager.getSelf(state);\n\n  if (vm.env.debugRenderTree !== undefined) {\n    let instance = check(vm.fetchValue(_state), CheckComponentInstance);\n    let { definition, manager } = instance;\n\n    let args: CapturedArguments;\n\n    if (vm.stack.peek() === vm[ARGS]) {\n      args = vm[ARGS].capture();\n    } else {\n      let names = vm[CONSTANTS].getArray<string>(_names);\n      vm[ARGS].setup(vm.stack, names, [], 0, true);\n      args = vm[ARGS].capture();\n    }\n\n    let moduleName: string;\n    let compilable: CompilableProgram | null = definition.compilable;\n\n    if (compilable === null) {\n      assert(\n        managerHasCapability(\n          manager,\n          instance.capabilities,\n          InternalComponentCapabilities.dynamicLayout\n        ),\n        'BUG: No template was found for this component, and the component did not have the dynamic layout capability'\n      );\n\n      compilable = manager.getDynamicLayout(state, vm.runtime.resolver);\n\n      if (compilable !== null) {\n        moduleName = compilable.moduleName;\n      } else {\n        moduleName = '__default__.hbs';\n      }\n    } else {\n      moduleName = compilable.moduleName;\n    }\n\n    // For tearing down the debugRenderTree\n    vm.associateDestroyable(instance);\n\n    if (hasCustomDebugRenderTreeLifecycle(manager)) {\n      let nodes = manager.getDebugCustomRenderTree(\n        instance.definition.state,\n        instance.state,\n        args,\n        moduleName\n      );\n\n      nodes.forEach((node) => {\n        let { bucket } = node;\n        vm.env.debugRenderTree!.create(bucket, node);\n\n        registerDestructor(instance, () => {\n          vm.env.debugRenderTree?.willDestroy(bucket);\n        });\n\n        vm.updateWith(new DebugRenderTreeUpdateOpcode(bucket));\n      });\n    } else {\n      let name = definition.resolvedName ?? manager.getDebugName(definition.state);\n\n      vm.env.debugRenderTree.create(instance, {\n        type: 'component',\n        name,\n        args,\n        template: moduleName,\n        instance: valueForRef(selfRef),\n      });\n\n      vm.associateDestroyable(instance);\n\n      registerDestructor(instance, () => {\n        vm.env.debugRenderTree?.willDestroy(instance);\n      });\n\n      vm.updateWith(new DebugRenderTreeUpdateOpcode(instance));\n    }\n  }\n\n  vm.stack.push(selfRef);\n});\n\nAPPEND_OPCODES.add(Op.GetComponentTagName, (vm, { op1: _state }) => {\n  let { definition, state } = check(vm.fetchValue(_state), CheckComponentInstance);\n  let { manager } = definition;\n\n  let tagName = (\n    manager as Recast<InternalComponentManager, WithDynamicTagName<unknown>>\n  ).getTagName(state);\n\n  // User provided value from JS, so we don't bother to encode\n  vm.stack.push(tagName);\n});\n\n// Dynamic Invocation Only\nAPPEND_OPCODES.add(Op.GetComponentLayout, (vm, { op1: _state }) => {\n  let instance = check(vm.fetchValue(_state), CheckComponentInstance);\n\n  let { manager, definition } = instance;\n  let { stack } = vm;\n\n  let { compilable } = definition;\n\n  if (compilable === null) {\n    let { capabilities } = instance;\n\n    assert(\n      managerHasCapability(manager, capabilities, InternalComponentCapabilities.dynamicLayout),\n      'BUG: No template was found for this component, and the component did not have the dynamic layout capability'\n    );\n\n    compilable = manager.getDynamicLayout(instance.state, vm.runtime.resolver);\n\n    if (compilable === null) {\n      if (managerHasCapability(manager, capabilities, InternalComponentCapabilities.wrapped)) {\n        compilable = unwrapTemplate(vm[CONSTANTS].defaultTemplate).asWrappedLayout();\n      } else {\n        compilable = unwrapTemplate(vm[CONSTANTS].defaultTemplate).asLayout();\n      }\n    }\n  }\n\n  let handle = compilable.compile(vm.context);\n\n  stack.push(compilable.symbolTable);\n  stack.push(handle);\n});\n\nAPPEND_OPCODES.add(Op.Main, (vm, { op1: register }) => {\n  let definition = check(vm.stack.pop(), CheckComponentDefinition);\n  let invocation = check(vm.stack.pop(), CheckInvocation);\n\n  let { manager, capabilities } = definition;\n\n  let state: PopulatedComponentInstance = {\n    definition,\n    manager,\n    capabilities,\n    state: null,\n    handle: invocation.handle,\n    table: invocation.symbolTable,\n    lookup: null,\n  };\n\n  vm.loadValue(register, state);\n});\n\nAPPEND_OPCODES.add(Op.PopulateLayout, (vm, { op1: _state }) => {\n  let { stack } = vm;\n\n  // In import.meta.env.DEV handles could be ErrHandle objects\n  let handle = check(stack.pop(), CheckHandle);\n  let table = check(stack.pop(), CheckProgramSymbolTable);\n\n  let state = check(vm.fetchValue(_state), CheckComponentInstance);\n\n  state.handle = handle;\n  state.table = table;\n});\n\nAPPEND_OPCODES.add(Op.VirtualRootScope, (vm, { op1: _state }) => {\n  let { table, manager, capabilities, state } = check(\n    vm.fetchValue(_state),\n    CheckFinishedComponentInstance\n  );\n\n  let owner;\n\n  if (managerHasCapability(manager, capabilities, InternalComponentCapabilities.hasSubOwner)) {\n    owner = manager.getOwner(state);\n    vm.loadValue($t1, null); // Clear the temp register\n  } else {\n    // Check the temp register to see if an owner was resolved from currying\n    owner = vm.fetchValue<Owner | null>($t1);\n\n    if (owner === null) {\n      // If an owner wasn't found, default to using the current owner. This\n      // will happen for normal dynamic component invocation,\n      // e.g. <SomeClassicEmberComponent/>\n      owner = vm.getOwner();\n    } else {\n      // Else the owner was found, so clear the temp register. This will happen\n      // if we are loading a curried component, e.g. <@someCurriedComponent/>\n      vm.loadValue($t1, null);\n    }\n  }\n\n  vm.pushRootScope(table.symbols.length + 1, owner);\n});\n\nAPPEND_OPCODES.add(Op.SetupForEval, (vm, { op1: _state }) => {\n  let state = check(vm.fetchValue(_state), CheckFinishedComponentInstance);\n\n  if (state.table.hasEval) {\n    let lookup = (state.lookup = dict<ScopeSlot>());\n    vm.scope().bindEvalScope(lookup);\n  }\n});\n\nAPPEND_OPCODES.add(Op.SetNamedVariables, (vm, { op1: _state }) => {\n  let state = check(vm.fetchValue(_state), CheckFinishedComponentInstance);\n  let scope = vm.scope();\n\n  let args = check(vm.stack.peek(), CheckArguments);\n  let callerNames = args.named.atNames;\n\n  for (let i = callerNames.length - 1; i >= 0; i--) {\n    let atName = unwrap(callerNames[i]);\n    let symbol = state.table.symbols.indexOf(atName);\n    let value = args.named.get(atName, true);\n\n    if (symbol !== -1) scope.bindSymbol(symbol + 1, value);\n    if (state.lookup) state.lookup[atName] = value;\n  }\n});\n\nfunction bindBlock(\n  symbolName: string,\n  blockName: string,\n  state: ComponentInstance,\n  blocks: BlockArgumentsImpl,\n  vm: InternalVM\n) {\n  let symbol = state.table.symbols.indexOf(symbolName);\n  let block = blocks.get(blockName);\n\n  if (symbol !== -1) vm.scope().bindBlock(symbol + 1, block);\n  if (state.lookup) state.lookup[symbolName] = block;\n}\n\nAPPEND_OPCODES.add(Op.SetBlocks, (vm, { op1: _state }) => {\n  let state = check(vm.fetchValue(_state), CheckFinishedComponentInstance);\n  let { blocks } = check(vm.stack.peek(), CheckArguments);\n\n  for (const [i] of enumerate(blocks.names)) {\n    bindBlock(unwrap(blocks.symbolNames[i]), unwrap(blocks.names[i]), state, blocks, vm);\n  }\n});\n\n// Dynamic Invocation Only\nAPPEND_OPCODES.add(Op.InvokeComponentLayout, (vm, { op1: _state }) => {\n  let state = check(vm.fetchValue(_state), CheckFinishedComponentInstance);\n\n  vm.call(state.handle);\n});\n\nAPPEND_OPCODES.add(Op.DidRenderLayout, (vm, { op1: _state }) => {\n  let instance = check(vm.fetchValue(_state), CheckComponentInstance);\n  let { manager, state, capabilities } = instance;\n  let bounds = vm.elements().popBlock();\n\n  if (vm.env.debugRenderTree !== undefined) {\n    if (hasCustomDebugRenderTreeLifecycle(manager)) {\n      let nodes = manager.getDebugCustomRenderTree(instance.definition.state, state, EMPTY_ARGS);\n\n      nodes.reverse().forEach((node) => {\n        let { bucket } = node;\n\n        vm.env.debugRenderTree!.didRender(bucket, bounds);\n\n        vm.updateWith(new DebugRenderTreeDidRenderOpcode(bucket, bounds));\n      });\n    } else {\n      vm.env.debugRenderTree.didRender(instance, bounds);\n\n      vm.updateWith(new DebugRenderTreeDidRenderOpcode(instance, bounds));\n    }\n  }\n\n  if (managerHasCapability(manager, capabilities, InternalComponentCapabilities.createInstance)) {\n    let mgr = check(manager, CheckInterface({ didRenderLayout: CheckFunction }));\n    mgr.didRenderLayout(state, bounds);\n\n    vm.env.didCreate(instance as ComponentInstanceWithCreate);\n    vm.updateWith(new DidUpdateLayoutOpcode(instance as ComponentInstanceWithCreate, bounds));\n  }\n});\n\nAPPEND_OPCODES.add(Op.CommitComponentTransaction, (vm) => {\n  vm.commitCacheGroup();\n});\n\nexport class UpdateComponentOpcode implements UpdatingOpcode {\n  constructor(\n    private component: ComponentInstanceState,\n    private manager: WithUpdateHook,\n    private dynamicScope: Nullable<DynamicScope>\n  ) {}\n\n  evaluate(_vm: UpdatingVM) {\n    let { component, manager, dynamicScope } = this;\n\n    manager.update(component, dynamicScope);\n  }\n}\n\nexport class DidUpdateLayoutOpcode implements UpdatingOpcode {\n  constructor(\n    private component: ComponentInstanceWithCreate,\n    private bounds: Bounds\n  ) {}\n\n  evaluate(vm: UpdatingVM) {\n    let { component, bounds } = this;\n    let { manager, state } = component;\n\n    manager.didUpdateLayout(state, bounds);\n\n    vm.env.didUpdate(component);\n  }\n}\n\nclass DebugRenderTreeUpdateOpcode implements UpdatingOpcode {\n  constructor(private bucket: object) {}\n\n  evaluate(vm: UpdatingVM) {\n    vm.env.debugRenderTree?.update(this.bucket);\n  }\n}\n\nclass DebugRenderTreeDidRenderOpcode implements UpdatingOpcode {\n  constructor(\n    private bucket: object,\n    private bounds: Bounds\n  ) {}\n\n  evaluate(vm: UpdatingVM) {\n    vm.env.debugRenderTree?.didRender(this.bucket, this.bounds);\n  }\n}\n","import type {\n  ComponentDefinition,\n  Nullable,\n  Owner,\n  ResolutionTimeConstants,\n  RuntimeResolver,\n} from '@glimmer/interfaces';\nimport { expect } from '@glimmer/util';\n\nexport function resolveComponent(\n  resolver: RuntimeResolver,\n  constants: ResolutionTimeConstants,\n  name: string,\n  owner: Owner | null\n): Nullable<ComponentDefinition> {\n  let definition = resolver.lookupComponent(\n    name,\n    expect(owner, 'BUG: expected owner when looking up component')\n  );\n\n  if (import.meta.env.DEV && !definition) {\n    throw new Error(\n      `Attempted to resolve \\`${name}\\`, which was expected to be a component, but nothing was found.`\n    );\n  }\n\n  return constants.resolvedComponent(definition!, name);\n}\n","import type { Reference } from '@glimmer/reference';\nimport { createComputeRef, valueForRef } from '@glimmer/reference';\n\nimport { normalizeStringValue } from '../dom/normalize';\n\nexport default function createClassListRef(list: Reference[]) {\n  return createComputeRef(() => {\n    let ret: string[] = [];\n\n    for (const ref of list) {\n      let value = normalizeStringValue(typeof ref === 'string' ? ref : valueForRef(ref));\n      if (value) ret.push(value);\n    }\n\n    return ret.length === 0 ? null : ret.join(' ');\n  });\n}\n","import type { Checker } from '@glimmer/debug';\nimport type {\n  CapabilityMask,\n  CapturedArguments,\n  CompilableBlock,\n  CompilableProgram,\n  ComponentDefinition,\n  ComponentInstance,\n  ElementOperations,\n  Helper,\n  InternalComponentManager,\n  Invocation,\n  Nullable,\n  Scope,\n  ScopeBlock,\n} from '@glimmer/interfaces';\nimport type { OpaqueIterator, Reference } from '@glimmer/reference';\nimport type { Tag } from '@glimmer/validator';\nimport {\n  CheckArray,\n  CheckBlockSymbolTable,\n  CheckDict,\n  CheckFunction,\n  CheckHandle,\n  CheckInstanceof,\n  CheckInterface,\n  CheckNumber,\n  CheckObject,\n  CheckOption,\n  CheckOr,\n  CheckProgramSymbolTable,\n  CheckString,\n  CheckUnknown,\n  wrap,\n} from '@glimmer/debug';\nimport { REFERENCE, UNDEFINED_REFERENCE } from '@glimmer/reference';\nimport { COMPUTE } from '@glimmer/validator';\n\nimport { PartialScopeImpl } from '../../scope';\nimport { VMArgumentsImpl } from '../../vm/arguments';\nimport { ComponentElementOperations } from './component';\n\nexport const CheckTag: Checker<Tag> = CheckInterface({\n  [COMPUTE]: CheckFunction,\n});\n\nexport const CheckOperations: Checker<Nullable<ComponentElementOperations>> = wrap(() =>\n  CheckOption(CheckInstanceof(ComponentElementOperations))\n);\n\nclass ReferenceChecker {\n  declare type: Reference;\n\n  validate(value: unknown): value is Reference {\n    return typeof value === 'object' && value !== null && REFERENCE in value;\n  }\n\n  expected(): string {\n    return `Reference`;\n  }\n}\n\nexport const CheckReference: Checker<Reference> = new ReferenceChecker();\n\nexport const CheckIterator: Checker<OpaqueIterator> = CheckInterface({\n  next: CheckFunction,\n  isEmpty: CheckFunction,\n});\n\nexport const CheckArguments: Checker<VMArgumentsImpl> = wrap(() =>\n  CheckInstanceof(VMArgumentsImpl)\n);\n\nexport const CheckHelper: Checker<Helper> = CheckFunction as Checker<Helper>;\n\nexport class UndefinedReferenceChecker implements Checker<Reference> {\n  declare type: Reference;\n\n  validate(value: unknown): value is Reference {\n    return value === UNDEFINED_REFERENCE;\n  }\n\n  expected(): string {\n    return `undefined`;\n  }\n}\n\nexport const CheckUndefinedReference = new UndefinedReferenceChecker();\n\nexport const CheckCapturedArguments: Checker<CapturedArguments> = CheckInterface({\n  positional: wrap(() => CheckArray(CheckReference)),\n  named: wrap(() => CheckDict(CheckReference)),\n});\n\nexport const CheckScope: Checker<Scope> = wrap(() => CheckInstanceof(PartialScopeImpl));\n\nexport const CheckComponentManager: Checker<InternalComponentManager<unknown>> = CheckInterface({\n  getCapabilities: CheckFunction,\n});\n\nexport const CheckCapabilities: Checker<CapabilityMask> = CheckNumber as Checker<CapabilityMask>;\n\nexport const CheckComponentInstance: Checker<ComponentInstance> = CheckInterface({\n  definition: CheckUnknown,\n  state: CheckUnknown,\n  handle: CheckUnknown,\n  table: CheckUnknown,\n});\n\nexport const CheckCurriedComponentDefinition = CheckOr(CheckObject, CheckFunction);\n\nexport const CheckInvocation: Checker<Invocation> = CheckInterface({\n  handle: CheckNumber,\n  symbolTable: CheckProgramSymbolTable,\n});\n\nexport const CheckElementOperations: Checker<ElementOperations> = CheckInterface({\n  setAttribute: CheckFunction,\n});\n\nexport const CheckFinishedComponentInstance: Checker<ComponentInstance> = CheckInterface({\n  definition: CheckUnknown,\n  state: CheckUnknown,\n  handle: CheckHandle,\n  table: CheckProgramSymbolTable,\n});\n\nexport const CheckCompilableBlock: Checker<CompilableBlock> = CheckInterface({\n  compile: CheckFunction,\n  symbolTable: CheckBlockSymbolTable,\n});\n\nexport const CheckCompilableProgram: Checker<CompilableProgram> = CheckInterface({\n  compile: CheckFunction,\n  symbolTable: CheckProgramSymbolTable,\n});\n\nexport const CheckScopeBlock: Checker<ScopeBlock> = CheckInterface({\n  0: CheckCompilableBlock,\n  1: CheckScope,\n  2: CheckBlockSymbolTable,\n});\n\nexport const CheckComponentDefinition: Checker<ComponentDefinition> = CheckInterface({\n  resolvedName: CheckOption(CheckString),\n  handle: CheckNumber,\n  state: CheckOr(CheckObject, CheckFunction),\n  manager: CheckComponentManager,\n  capabilities: CheckCapabilities,\n  compilable: CheckCompilableProgram,\n});\n","import type {\n  BlockArguments,\n  BlockSymbolTable,\n  BlockValue,\n  CapturedArguments,\n  CapturedBlockArguments,\n  CapturedNamedArguments,\n  CapturedPositionalArguments,\n  CompilableBlock,\n  Dict,\n  NamedArguments,\n  Nullable,\n  PositionalArguments,\n  Scope,\n  ScopeBlock,\n  VMArguments,\n} from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport type { Tag } from '@glimmer/validator';\nimport { check, CheckBlockSymbolTable, CheckHandle, CheckOption, CheckOr } from '@glimmer/debug';\nimport { createDebugAliasRef, UNDEFINED_REFERENCE, valueForRef } from '@glimmer/reference';\nimport { dict, EMPTY_STRING_ARRAY, emptyArray, enumerate, unwrap } from '@glimmer/util';\nimport { CONSTANT_TAG } from '@glimmer/validator';\nimport { $sp } from '@glimmer/vm';\n\nimport type { EvaluationStack } from './stack';\n\nimport { CheckCompilableBlock, CheckReference, CheckScope } from '../compiled/opcodes/-debug-strip';\nimport { REGISTERS } from '../symbols';\n\n/*\n  The calling convention is:\n\n  * 0-N block arguments at the bottom\n  * 0-N positional arguments next (left-to-right)\n  * 0-N named arguments next\n*/\n\nexport class VMArgumentsImpl implements VMArguments {\n  private stack: Nullable<EvaluationStack> = null;\n  public positional = new PositionalArgumentsImpl();\n  public named = new NamedArgumentsImpl();\n  public blocks = new BlockArgumentsImpl();\n\n  empty(stack: EvaluationStack): this {\n    let base = stack[REGISTERS][$sp] + 1;\n\n    this.named.empty(stack, base);\n    this.positional.empty(stack, base);\n    this.blocks.empty(stack, base);\n\n    return this;\n  }\n\n  setup(\n    stack: EvaluationStack,\n    names: readonly string[],\n    blockNames: readonly string[],\n    positionalCount: number,\n    atNames: boolean\n  ) {\n    this.stack = stack;\n\n    /*\n           | ... | blocks      | positional  | named |\n           | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |\n     index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |\n                   ^             ^             ^  ^\n                 bbase         pbase       nbase  sp\n    */\n\n    let named = this.named;\n    let namedCount = names.length;\n    let namedBase = stack[REGISTERS][$sp] - namedCount + 1;\n\n    named.setup(stack, namedBase, namedCount, names, atNames);\n\n    let positional = this.positional;\n    let positionalBase = namedBase - positionalCount;\n\n    positional.setup(stack, positionalBase, positionalCount);\n\n    let blocks = this.blocks;\n    let blocksCount = blockNames.length;\n    let blocksBase = positionalBase - blocksCount * 3;\n\n    blocks.setup(stack, blocksBase, blocksCount, blockNames);\n  }\n\n  get base(): number {\n    return this.blocks.base;\n  }\n\n  get length(): number {\n    return this.positional.length + this.named.length + this.blocks.length * 3;\n  }\n\n  at(pos: number): Reference {\n    return this.positional.at(pos);\n  }\n\n  realloc(offset: number) {\n    let { stack } = this;\n    if (offset > 0 && stack !== null) {\n      let { positional, named } = this;\n      let newBase = positional.base + offset;\n      let length = positional.length + named.length;\n\n      for (let i = length - 1; i >= 0; i--) {\n        stack.copy(i + positional.base, i + newBase);\n      }\n\n      positional.base += offset;\n      named.base += offset;\n      stack[REGISTERS][$sp] += offset;\n    }\n  }\n\n  capture(): CapturedArguments {\n    let positional = this.positional.length === 0 ? EMPTY_POSITIONAL : this.positional.capture();\n    let named = this.named.length === 0 ? EMPTY_NAMED : this.named.capture();\n\n    return { named, positional } as CapturedArguments;\n  }\n\n  clear(): void {\n    let { stack, length } = this;\n    if (length > 0 && stack !== null) stack.pop(length);\n  }\n}\n\nconst EMPTY_REFERENCES = emptyArray<Reference>();\n\nexport class PositionalArgumentsImpl implements PositionalArguments {\n  public base = 0;\n  public length = 0;\n\n  private stack: EvaluationStack = null as any;\n\n  private _references: Nullable<readonly Reference[]> = null;\n\n  empty(stack: EvaluationStack, base: number) {\n    this.stack = stack;\n    this.base = base;\n    this.length = 0;\n\n    this._references = EMPTY_REFERENCES;\n  }\n\n  setup(stack: EvaluationStack, base: number, length: number) {\n    this.stack = stack;\n    this.base = base;\n    this.length = length;\n\n    if (length === 0) {\n      this._references = EMPTY_REFERENCES;\n    } else {\n      this._references = null;\n    }\n  }\n\n  at(position: number): Reference {\n    let { base, length, stack } = this;\n\n    if (position < 0 || position >= length) {\n      return UNDEFINED_REFERENCE;\n    }\n\n    return check(stack.get(position, base), CheckReference);\n  }\n\n  capture(): CapturedPositionalArguments {\n    return this.references as CapturedPositionalArguments;\n  }\n\n  prepend(other: Reference[]) {\n    let additions = other.length;\n\n    if (additions > 0) {\n      let { base, length, stack } = this;\n\n      this.base = base = base - additions;\n      this.length = length + additions;\n\n      for (let i = 0; i < additions; i++) {\n        stack.set(other[i], i, base);\n      }\n\n      this._references = null;\n    }\n  }\n\n  private get references(): readonly Reference[] {\n    let references = this._references;\n\n    if (!references) {\n      let { stack, base, length } = this;\n      references = this._references = stack.slice<Reference>(base, base + length);\n    }\n\n    return references;\n  }\n}\n\nexport class NamedArgumentsImpl implements NamedArguments {\n  public base = 0;\n  public length = 0;\n\n  private declare stack: EvaluationStack;\n\n  private _references: Nullable<readonly Reference[]> = null;\n\n  private _names: Nullable<readonly string[]> = EMPTY_STRING_ARRAY;\n  private _atNames: Nullable<readonly string[]> = EMPTY_STRING_ARRAY;\n\n  empty(stack: EvaluationStack, base: number) {\n    this.stack = stack;\n    this.base = base;\n    this.length = 0;\n\n    this._references = EMPTY_REFERENCES;\n    this._names = EMPTY_STRING_ARRAY;\n    this._atNames = EMPTY_STRING_ARRAY;\n  }\n\n  setup(\n    stack: EvaluationStack,\n    base: number,\n    length: number,\n    names: readonly string[],\n    atNames: boolean\n  ) {\n    this.stack = stack;\n    this.base = base;\n    this.length = length;\n\n    if (length === 0) {\n      this._references = EMPTY_REFERENCES;\n      this._names = EMPTY_STRING_ARRAY;\n      this._atNames = EMPTY_STRING_ARRAY;\n    } else {\n      this._references = null;\n\n      if (atNames) {\n        this._names = null;\n        this._atNames = names;\n      } else {\n        this._names = names;\n        this._atNames = null;\n      }\n    }\n  }\n\n  get names(): readonly string[] {\n    let names = this._names;\n\n    if (!names) {\n      names = this._names = this._atNames!.map(this.toSyntheticName);\n    }\n\n    return names;\n  }\n\n  get atNames(): readonly string[] {\n    let atNames = this._atNames;\n\n    if (!atNames) {\n      atNames = this._atNames = this._names!.map(this.toAtName);\n    }\n\n    return atNames;\n  }\n\n  has(name: string): boolean {\n    return this.names.indexOf(name) !== -1;\n  }\n\n  get(name: string, atNames = false): Reference {\n    let { base, stack } = this;\n\n    let names = atNames ? this.atNames : this.names;\n\n    let idx = names.indexOf(name);\n\n    if (idx === -1) {\n      return UNDEFINED_REFERENCE;\n    }\n\n    let ref = stack.get<Reference>(idx, base);\n\n    if (import.meta.env.DEV) {\n      return createDebugAliasRef!(atNames ? name : `@${name}`, ref);\n    } else {\n      return ref;\n    }\n  }\n\n  capture(): CapturedNamedArguments {\n    let { names, references } = this;\n    let map = dict<Reference>();\n\n    for (const [i, name] of enumerate(names)) {\n      if (import.meta.env.DEV) {\n        map[name] = createDebugAliasRef!(`@${name}`, unwrap(references[i]));\n      } else {\n        map[name] = unwrap(references[i]);\n      }\n    }\n\n    return map as CapturedNamedArguments;\n  }\n\n  merge(other: Record<string, Reference>) {\n    let keys = Object.keys(other);\n\n    if (keys.length > 0) {\n      let { names, length, stack } = this;\n      let newNames = names.slice();\n\n      for (const name of keys) {\n        let idx = newNames.indexOf(name);\n\n        if (idx === -1) {\n          length = newNames.push(name);\n          stack.push(other[name]);\n        }\n      }\n\n      this.length = length;\n      this._references = null;\n      this._names = newNames;\n      this._atNames = null;\n    }\n  }\n\n  private get references(): readonly Reference[] {\n    let references = this._references;\n\n    if (!references) {\n      let { base, length, stack } = this;\n      references = this._references = stack.slice<Reference>(base, base + length);\n    }\n\n    return references;\n  }\n\n  private toSyntheticName(this: void, name: string): string {\n    return name.slice(1);\n  }\n\n  private toAtName(this: void, name: string): string {\n    return `@${name}`;\n  }\n}\n\nfunction toSymbolName(name: string): string {\n  return `&${name}`;\n}\n\nconst EMPTY_BLOCK_VALUES = emptyArray<BlockValue>();\n\nexport class BlockArgumentsImpl implements BlockArguments {\n  private declare stack: EvaluationStack;\n  private internalValues: Nullable<readonly BlockValue[]> = null;\n  private _symbolNames: Nullable<readonly string[]> = null;\n\n  public internalTag: Nullable<Tag> = null;\n  public names: readonly string[] = EMPTY_STRING_ARRAY;\n\n  public length = 0;\n  public base = 0;\n\n  empty(stack: EvaluationStack, base: number) {\n    this.stack = stack;\n    this.names = EMPTY_STRING_ARRAY;\n    this.base = base;\n    this.length = 0;\n    this._symbolNames = null;\n\n    this.internalTag = CONSTANT_TAG;\n    this.internalValues = EMPTY_BLOCK_VALUES;\n  }\n\n  setup(stack: EvaluationStack, base: number, length: number, names: readonly string[]) {\n    this.stack = stack;\n    this.names = names;\n    this.base = base;\n    this.length = length;\n    this._symbolNames = null;\n\n    if (length === 0) {\n      this.internalTag = CONSTANT_TAG;\n      this.internalValues = EMPTY_BLOCK_VALUES;\n    } else {\n      this.internalTag = null;\n      this.internalValues = null;\n    }\n  }\n\n  get values(): readonly BlockValue[] {\n    let values = this.internalValues;\n\n    if (!values) {\n      let { base, length, stack } = this;\n      values = this.internalValues = stack.slice<BlockValue>(base, base + length * 3);\n    }\n\n    return values;\n  }\n\n  has(name: string): boolean {\n    return this.names.indexOf(name) !== -1;\n  }\n\n  get(name: string): Nullable<ScopeBlock> {\n    let idx = this.names.indexOf(name);\n\n    if (idx === -1) {\n      return null;\n    }\n\n    let { base, stack } = this;\n\n    let table = check(stack.get(idx * 3, base), CheckOption(CheckBlockSymbolTable));\n    let scope = check(stack.get(idx * 3 + 1, base), CheckOption(CheckScope));\n    let handle = check(\n      stack.get(idx * 3 + 2, base),\n      CheckOption(CheckOr(CheckHandle, CheckCompilableBlock))\n    );\n\n    return handle === null ? null : ([handle, scope!, table!] as ScopeBlock);\n  }\n\n  capture(): CapturedBlockArguments {\n    return new CapturedBlockArgumentsImpl(this.names, this.values);\n  }\n\n  get symbolNames(): readonly string[] {\n    let symbolNames = this._symbolNames;\n\n    if (symbolNames === null) {\n      symbolNames = this._symbolNames = this.names.map(toSymbolName);\n    }\n\n    return symbolNames;\n  }\n}\n\nclass CapturedBlockArgumentsImpl implements CapturedBlockArguments {\n  public length: number;\n\n  constructor(\n    public names: readonly string[],\n    public values: readonly Nullable<BlockValue>[]\n  ) {\n    this.length = names.length;\n  }\n\n  has(name: string): boolean {\n    return this.names.indexOf(name) !== -1;\n  }\n\n  get(name: string): Nullable<ScopeBlock> {\n    let idx = this.names.indexOf(name);\n\n    if (idx === -1) return null;\n\n    return [\n      this.values[idx * 3 + 2] as CompilableBlock,\n      this.values[idx * 3 + 1] as Scope,\n      this.values[idx * 3] as BlockSymbolTable,\n    ];\n  }\n}\n\nexport function createCapturedArgs(named: Dict<Reference>, positional: Reference[]) {\n  return {\n    named,\n    positional,\n  } as CapturedArguments;\n}\n\nexport function reifyNamed(named: CapturedNamedArguments) {\n  let reified = dict();\n\n  for (const [key, value] of Object.entries(named)) {\n    reified[key] = valueForRef(value);\n  }\n\n  return reified;\n}\n\nexport function reifyPositional(positional: CapturedPositionalArguments) {\n  return positional.map(valueForRef);\n}\n\nexport function reifyArgs(args: CapturedArguments) {\n  return {\n    named: reifyNamed(args.named),\n    positional: reifyPositional(args.positional),\n  };\n}\n\nexport const EMPTY_NAMED = Object.freeze(Object.create(null)) as CapturedNamedArguments;\nexport const EMPTY_POSITIONAL = EMPTY_REFERENCES as CapturedPositionalArguments;\nexport const EMPTY_ARGS = createCapturedArgs(EMPTY_NAMED, EMPTY_POSITIONAL);\n","import type { Reference } from '@glimmer/reference';\nimport { createComputeRef, valueForRef } from '@glimmer/reference';\n\nexport function createConcatRef(partsRefs: Reference[]) {\n  return createComputeRef(() => {\n    const parts: string[] = [];\n\n    for (const ref of partsRefs) {\n      const value = valueForRef(ref);\n\n      if (value !== null && value !== undefined) {\n        parts.push(castToString(value));\n      }\n    }\n\n    if (parts.length > 0) {\n      return parts.join('');\n    }\n\n    return null;\n  });\n}\n\nfunction castToString(value: string | object) {\n  if (typeof value === 'string') {\n    return value;\n  } else if (typeof value.toString !== 'function') {\n    return '';\n  }\n\n  return String(value);\n}\n","import type {\n  CapturedPositionalArguments,\n  CurriedType,\n  Helper,\n  HelperDefinitionState,\n  Owner,\n  ScopeBlock,\n  VM as PublicVM,\n} from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport {\n  check,\n  CheckBlockSymbolTable,\n  CheckHandle,\n  CheckMaybe,\n  CheckOption,\n  CheckOr,\n} from '@glimmer/debug';\nimport { _hasDestroyableChildren, associateDestroyableChild, destroy } from '@glimmer/destroyable';\nimport { toBool } from '@glimmer/global-context';\nimport { getInternalHelperManager } from '@glimmer/manager';\nimport {\n  childRefFor,\n  createComputeRef,\n  FALSE_REFERENCE,\n  TRUE_REFERENCE,\n  UNDEFINED_REFERENCE,\n  valueForRef,\n} from '@glimmer/reference';\nimport { assert, assign, debugToString, decodeHandle, isObject } from '@glimmer/util';\nimport { $v0, CurriedTypes, Op } from '@glimmer/vm';\n\nimport { isCurriedType, resolveCurriedValue } from '../../curried-value';\nimport { APPEND_OPCODES } from '../../opcodes';\nimport createCurryRef from '../../references/curry-value';\nimport { CONSTANTS } from '../../symbols';\nimport { reifyPositional } from '../../vm/arguments';\nimport { createConcatRef } from '../expressions/concat';\nimport {\n  CheckArguments,\n  CheckCapturedArguments,\n  CheckCompilableBlock,\n  CheckHelper,\n  CheckReference,\n  CheckScope,\n  CheckScopeBlock,\n  CheckUndefinedReference,\n} from './-debug-strip';\n\nexport type FunctionExpression<T> = (vm: PublicVM) => Reference<T>;\n\nAPPEND_OPCODES.add(Op.Curry, (vm, { op1: type, op2: _isStrict }) => {\n  let stack = vm.stack;\n\n  let definition = check(stack.pop(), CheckReference);\n  let capturedArgs = check(stack.pop(), CheckCapturedArguments);\n\n  let owner = vm.getOwner();\n  let resolver = vm.runtime.resolver;\n\n  let isStrict = false;\n\n  if (import.meta.env.DEV) {\n    // strict check only happens in import.meta.env.DEV builds, no reason to load it otherwise\n    isStrict = vm[CONSTANTS].getValue<boolean>(decodeHandle(_isStrict));\n  }\n\n  vm.loadValue(\n    $v0,\n    createCurryRef(type as CurriedType, definition, owner, capturedArgs, resolver, isStrict)\n  );\n});\n\nAPPEND_OPCODES.add(Op.DynamicHelper, (vm) => {\n  let stack = vm.stack;\n  let ref = check(stack.pop(), CheckReference);\n  let args = check(stack.pop(), CheckArguments).capture();\n\n  let helperRef: Reference;\n  let initialOwner: Owner = vm.getOwner();\n\n  let helperInstanceRef = createComputeRef(() => {\n    if (helperRef !== undefined) {\n      destroy(helperRef);\n    }\n\n    let definition = valueForRef(ref);\n\n    if (isCurriedType(definition, CurriedTypes.Helper)) {\n      let { definition: resolvedDef, owner, positional, named } = resolveCurriedValue(definition);\n\n      let helper = resolveHelper(resolvedDef, ref);\n\n      if (named !== undefined) {\n        args.named = assign({}, ...named, args.named);\n      }\n\n      if (positional !== undefined) {\n        args.positional = positional.concat(args.positional) as CapturedPositionalArguments;\n      }\n\n      helperRef = helper(args, owner);\n\n      associateDestroyableChild(helperInstanceRef, helperRef);\n    } else if (isObject(definition)) {\n      let helper = resolveHelper(definition, ref);\n      helperRef = helper(args, initialOwner);\n\n      if (_hasDestroyableChildren(helperRef)) {\n        associateDestroyableChild(helperInstanceRef, helperRef);\n      }\n    } else {\n      helperRef = UNDEFINED_REFERENCE;\n    }\n  });\n\n  let helperValueRef = createComputeRef(() => {\n    valueForRef(helperInstanceRef);\n    return valueForRef(helperRef);\n  });\n\n  vm.associateDestroyable(helperInstanceRef);\n  vm.loadValue($v0, helperValueRef);\n});\n\nfunction resolveHelper(definition: HelperDefinitionState, ref: Reference): Helper {\n  let managerOrHelper = getInternalHelperManager(definition, true);\n  let helper;\n  if (managerOrHelper === null) {\n    helper = null;\n  } else {\n    helper =\n      typeof managerOrHelper === 'function'\n        ? managerOrHelper\n        : managerOrHelper.getHelper(definition);\n    assert(managerOrHelper, 'BUG: expected manager or helper');\n  }\n\n  if (import.meta.env.DEV && helper === null) {\n    throw new Error(\n      `Expected a dynamic helper definition, but received an object or function that did not have a helper manager associated with it. The dynamic invocation was \\`{{${\n        ref.debugLabel\n      }}}\\` or \\`(${ref.debugLabel})\\`, and the incorrect definition is the value at the path \\`${\n        ref.debugLabel\n      }\\`, which was: ${debugToString!(definition)}`\n    );\n  }\n\n  return helper!;\n}\n\nAPPEND_OPCODES.add(Op.Helper, (vm, { op1: handle }) => {\n  let stack = vm.stack;\n  let helper = check(vm[CONSTANTS].getValue(handle), CheckHelper);\n  let args = check(stack.pop(), CheckArguments);\n  let value = helper(args.capture(), vm.getOwner(), vm.dynamicScope());\n\n  if (_hasDestroyableChildren(value)) {\n    vm.associateDestroyable(value);\n  }\n\n  vm.loadValue($v0, value);\n});\n\nAPPEND_OPCODES.add(Op.GetVariable, (vm, { op1: symbol }) => {\n  let expr = vm.referenceForSymbol(symbol);\n\n  vm.stack.push(expr);\n});\n\nAPPEND_OPCODES.add(Op.SetVariable, (vm, { op1: symbol }) => {\n  let expr = check(vm.stack.pop(), CheckReference);\n  vm.scope().bindSymbol(symbol, expr);\n});\n\nAPPEND_OPCODES.add(Op.SetBlock, (vm, { op1: symbol }) => {\n  let handle = check(vm.stack.pop(), CheckCompilableBlock);\n  let scope = check(vm.stack.pop(), CheckScope);\n  let table = check(vm.stack.pop(), CheckBlockSymbolTable);\n\n  vm.scope().bindBlock(symbol, [handle, scope, table]);\n});\n\nAPPEND_OPCODES.add(Op.ResolveMaybeLocal, (vm, { op1: _name }) => {\n  let name = vm[CONSTANTS].getValue<string>(_name);\n  let locals = vm.scope().getPartialMap()!;\n\n  let ref = locals[name];\n  if (ref === undefined) {\n    ref = childRefFor(vm.getSelf(), name);\n  }\n\n  vm.stack.push(ref);\n});\n\nAPPEND_OPCODES.add(Op.RootScope, (vm, { op1: symbols }) => {\n  vm.pushRootScope(symbols, vm.getOwner());\n});\n\nAPPEND_OPCODES.add(Op.GetProperty, (vm, { op1: _key }) => {\n  let key = vm[CONSTANTS].getValue<string>(_key);\n  let expr = check(vm.stack.pop(), CheckReference);\n  vm.stack.push(childRefFor(expr, key));\n});\n\nAPPEND_OPCODES.add(Op.GetBlock, (vm, { op1: _block }) => {\n  let { stack } = vm;\n  let block = vm.scope().getBlock(_block);\n\n  stack.push(block);\n});\n\nAPPEND_OPCODES.add(Op.SpreadBlock, (vm) => {\n  let { stack } = vm;\n  let block = check(stack.pop(), CheckOption(CheckOr(CheckScopeBlock, CheckUndefinedReference)));\n\n  if (block && !isUndefinedReference(block)) {\n    let [handleOrCompilable, scope, table] = block;\n\n    stack.push(table);\n    stack.push(scope);\n    stack.push(handleOrCompilable);\n  } else {\n    stack.push(null);\n    stack.push(null);\n    stack.push(null);\n  }\n});\n\nfunction isUndefinedReference(input: ScopeBlock | Reference): input is Reference {\n  assert(\n    Array.isArray(input) || input === UNDEFINED_REFERENCE,\n    'a reference other than UNDEFINED_REFERENCE is illegal here'\n  );\n  return input === UNDEFINED_REFERENCE;\n}\n\nAPPEND_OPCODES.add(Op.HasBlock, (vm) => {\n  let { stack } = vm;\n  let block = check(stack.pop(), CheckOption(CheckOr(CheckScopeBlock, CheckUndefinedReference)));\n\n  if (block && !isUndefinedReference(block)) {\n    stack.push(TRUE_REFERENCE);\n  } else {\n    stack.push(FALSE_REFERENCE);\n  }\n});\n\nAPPEND_OPCODES.add(Op.HasBlockParams, (vm) => {\n  // FIXME(mmun): should only need to push the symbol table\n  let block = vm.stack.pop();\n  let scope = vm.stack.pop();\n\n  check(block, CheckMaybe(CheckOr(CheckHandle, CheckCompilableBlock)));\n  check(scope, CheckMaybe(CheckScope));\n  let table = check(vm.stack.pop(), CheckMaybe(CheckBlockSymbolTable));\n\n  let hasBlockParams = table && table.parameters.length;\n  vm.stack.push(hasBlockParams ? TRUE_REFERENCE : FALSE_REFERENCE);\n});\n\nAPPEND_OPCODES.add(Op.Concat, (vm, { op1: count }) => {\n  let out: Array<Reference<unknown>> = new Array(count);\n\n  for (let i = count; i > 0; i--) {\n    let offset = i - 1;\n    out[offset] = check(vm.stack.pop(), CheckReference);\n  }\n\n  vm.stack.push(createConcatRef(out));\n});\n\nAPPEND_OPCODES.add(Op.IfInline, (vm) => {\n  let condition = check(vm.stack.pop(), CheckReference);\n  let truthy = check(vm.stack.pop(), CheckReference);\n  let falsy = check(vm.stack.pop(), CheckReference);\n\n  vm.stack.push(\n    createComputeRef(() => {\n      if (toBool(valueForRef(condition)) === true) {\n        return valueForRef(truthy);\n      } else {\n        return valueForRef(falsy);\n      }\n    })\n  );\n});\n\nAPPEND_OPCODES.add(Op.Not, (vm) => {\n  let ref = check(vm.stack.pop(), CheckReference);\n\n  vm.stack.push(\n    createComputeRef(() => {\n      return !toBool(valueForRef(ref));\n    })\n  );\n});\n\nAPPEND_OPCODES.add(Op.GetDynamicVar, (vm) => {\n  let scope = vm.dynamicScope();\n  let stack = vm.stack;\n  let nameRef = check(stack.pop(), CheckReference);\n\n  stack.push(\n    createComputeRef(() => {\n      let name = String(valueForRef(nameRef));\n      return valueForRef(scope.get(name));\n    })\n  );\n});\n\nAPPEND_OPCODES.add(Op.Log, (vm) => {\n  let { positional } = check(vm.stack.pop(), CheckArguments).capture();\n\n  vm.loadValue(\n    $v0,\n    createComputeRef(() => {\n      // eslint-disable-next-line no-console\n      console.log(...reifyPositional(positional));\n    })\n  );\n});\n","import type {\n  CapturedArguments,\n  CurriedType,\n  Dict,\n  Maybe,\n  Nullable,\n  Owner,\n  RuntimeResolver,\n} from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport { createComputeRef, valueForRef } from '@glimmer/reference';\nimport { expect, isObject } from '@glimmer/util';\nimport { CurriedTypes } from '@glimmer/vm';\n\nimport { curry, isCurriedType } from '../curried-value';\n\nexport default function createCurryRef(\n  type: CurriedType,\n  inner: Reference,\n  owner: Owner,\n  args: Nullable<CapturedArguments>,\n  resolver: RuntimeResolver,\n  isStrict: boolean\n) {\n  let lastValue: Maybe<Dict> | string, curriedDefinition: object | string | null;\n\n  return createComputeRef(() => {\n    let value = valueForRef(inner) as Maybe<Dict> | string;\n\n    if (value === lastValue) {\n      return curriedDefinition;\n    }\n\n    if (isCurriedType(value, type)) {\n      curriedDefinition = args ? curry(type, value, owner, args) : args;\n    } else if (type === CurriedTypes.Component && typeof value === 'string' && value) {\n      // Only components should enter this path, as helpers and modifiers do not\n      // support string based resolution\n\n      if (import.meta.env.DEV) {\n        if (isStrict) {\n          throw new Error(\n            `Attempted to resolve a dynamic component with a string definition, \\`${value}\\` in a strict mode template. In strict mode, using strings to resolve component definitions is prohibited. You can instead import the component definition and use it directly.`\n          );\n        }\n\n        let resolvedDefinition = expect(\n          resolver,\n          'BUG: expected resolver for curried component definitions'\n        ).lookupComponent(value, owner);\n\n        if (!resolvedDefinition) {\n          throw new Error(\n            `Attempted to resolve \\`${value}\\`, which was expected to be a component, but nothing was found.`\n          );\n        }\n      }\n\n      curriedDefinition = curry(type, value, owner, args);\n    } else if (isObject(value)) {\n      curriedDefinition = curry(type, value, owner, args);\n    } else {\n      curriedDefinition = null;\n    }\n\n    lastValue = value;\n\n    return curriedDefinition;\n  });\n}\n","import type { SimpleText, UpdatingOpcode } from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport { valueForRef } from '@glimmer/reference';\n\nimport { isEmpty, isString } from '../../dom/normalize';\n\nexport default class DynamicTextContent implements UpdatingOpcode {\n  constructor(\n    public node: SimpleText,\n    private reference: Reference<unknown>,\n    private lastValue: string\n  ) {}\n\n  evaluate() {\n    let value = valueForRef(this.reference);\n\n    let { lastValue } = this;\n\n    if (value === lastValue) return;\n\n    let normalized: string;\n\n    if (isEmpty(value)) {\n      normalized = '';\n    } else if (isString(value)) {\n      normalized = value;\n    } else {\n      normalized = String(value);\n    }\n\n    if (normalized !== lastValue) {\n      let textNode = this.node;\n      textNode.nodeValue = this.lastValue = normalized;\n    }\n  }\n}\n","import {\n  check,\n  CheckDocumentFragment,\n  CheckNode,\n  CheckSafeString,\n  CheckString,\n} from '@glimmer/debug';\nimport { hasInternalComponentManager, hasInternalHelperManager } from '@glimmer/manager';\nimport { isConstRef, valueForRef } from '@glimmer/reference';\nimport { isObject } from '@glimmer/util';\nimport { ContentType, CurriedType, Op } from '@glimmer/vm';\n\nimport { isCurriedType } from '../../curried-value';\nimport { isEmpty, isFragment, isNode, isSafeString, shouldCoerce } from '../../dom/normalize';\nimport { APPEND_OPCODES } from '../../opcodes';\nimport DynamicTextContent from '../../vm/content/text';\nimport { CheckReference } from './-debug-strip';\nimport { AssertFilter } from './vm';\n\nfunction toContentType(value: unknown) {\n  if (shouldCoerce(value)) {\n    return ContentType.String;\n  } else if (\n    isCurriedType(value, CurriedType.Component) ||\n    hasInternalComponentManager(value as object)\n  ) {\n    return ContentType.Component;\n  } else if (\n    isCurriedType(value, CurriedType.Helper) ||\n    hasInternalHelperManager(value as object)\n  ) {\n    return ContentType.Helper;\n  } else if (isSafeString(value)) {\n    return ContentType.SafeString;\n  } else if (isFragment(value)) {\n    return ContentType.Fragment;\n  } else if (isNode(value)) {\n    return ContentType.Node;\n  } else {\n    return ContentType.String;\n  }\n}\n\nfunction toDynamicContentType(value: unknown) {\n  if (!isObject(value)) {\n    return ContentType.String;\n  }\n\n  if (isCurriedType(value, CurriedType.Component) || hasInternalComponentManager(value)) {\n    return ContentType.Component;\n  } else {\n    if (\n      import.meta.env.DEV &&\n      !isCurriedType(value, CurriedType.Helper) &&\n      !hasInternalHelperManager(value)\n    ) {\n      throw new Error(\n        `Attempted use a dynamic value as a component or helper, but that value did not have an associated component or helper manager. The value was: ${value}`\n      );\n    }\n\n    return ContentType.Helper;\n  }\n}\n\nAPPEND_OPCODES.add(Op.ContentType, (vm) => {\n  let reference = check(vm.stack.peek(), CheckReference);\n\n  vm.stack.push(toContentType(valueForRef(reference)));\n\n  if (!isConstRef(reference)) {\n    vm.updateWith(new AssertFilter(reference, toContentType));\n  }\n});\n\nAPPEND_OPCODES.add(Op.DynamicContentType, (vm) => {\n  let reference = check(vm.stack.peek(), CheckReference);\n\n  vm.stack.push(toDynamicContentType(valueForRef(reference)));\n\n  if (!isConstRef(reference)) {\n    vm.updateWith(new AssertFilter(reference, toDynamicContentType));\n  }\n});\n\nAPPEND_OPCODES.add(Op.AppendHTML, (vm) => {\n  let reference = check(vm.stack.pop(), CheckReference);\n\n  let rawValue = valueForRef(reference);\n  let value = isEmpty(rawValue) ? '' : String(rawValue);\n\n  vm.elements().appendDynamicHTML(value);\n});\n\nAPPEND_OPCODES.add(Op.AppendSafeHTML, (vm) => {\n  let reference = check(vm.stack.pop(), CheckReference);\n\n  let rawValue = check(valueForRef(reference), CheckSafeString).toHTML();\n  let value = isEmpty(rawValue) ? '' : check(rawValue, CheckString);\n\n  vm.elements().appendDynamicHTML(value);\n});\n\nAPPEND_OPCODES.add(Op.AppendText, (vm) => {\n  let reference = check(vm.stack.pop(), CheckReference);\n\n  let rawValue = valueForRef(reference);\n  let value = isEmpty(rawValue) ? '' : String(rawValue);\n\n  let node = vm.elements().appendDynamicText(value);\n\n  if (!isConstRef(reference)) {\n    vm.updateWith(new DynamicTextContent(node, reference, value));\n  }\n});\n\nAPPEND_OPCODES.add(Op.AppendDocumentFragment, (vm) => {\n  let reference = check(vm.stack.pop(), CheckReference);\n\n  let value = check(valueForRef(reference), CheckDocumentFragment);\n\n  vm.elements().appendDynamicFragment(value);\n});\n\nAPPEND_OPCODES.add(Op.AppendNode, (vm) => {\n  let reference = check(vm.stack.pop(), CheckReference);\n\n  let value = check(valueForRef(reference), CheckNode);\n\n  vm.elements().appendDynamicNode(value);\n});\n","import type { Scope } from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport { childRefFor, valueForRef } from '@glimmer/reference';\nimport { decodeHandle, dict, unwrap } from '@glimmer/util';\nimport { Op } from '@glimmer/vm';\n\nimport { APPEND_OPCODES } from '../../opcodes';\nimport { CONSTANTS } from '../../symbols';\n\nexport type DebugGet = (path: string) => unknown;\n\nexport type DebugCallback = (context: unknown, get: DebugGet) => void;\n\nfunction debugCallback(context: unknown, get: DebugGet): void {\n  // eslint-disable-next-line no-console\n  console.info('Use `context`, and `get(<path>)` to debug this template.');\n\n  // for example...\n  context === get('this');\n\n  // eslint-disable-next-line no-debugger\n  debugger;\n}\n\nlet callback = debugCallback;\n\n// For testing purposes\nexport function setDebuggerCallback(cb: DebugCallback) {\n  callback = cb;\n}\n\nexport function resetDebuggerCallback() {\n  callback = debugCallback;\n}\n\nclass ScopeInspector {\n  private locals = dict<Reference>();\n\n  constructor(\n    private scope: Scope,\n    symbols: string[],\n    debugInfo: number[]\n  ) {\n    for (const slot of debugInfo) {\n      let name = unwrap(symbols[slot - 1]);\n      let ref = scope.getSymbol(slot);\n      this.locals[name] = ref;\n    }\n  }\n\n  get(path: string): Reference {\n    let { scope, locals } = this;\n    let parts = path.split('.');\n    let [head, ...tail] = path.split('.') as [string, ...string[]];\n\n    let evalScope = scope.getEvalScope()!;\n    let ref: Reference;\n\n    if (head === 'this') {\n      ref = scope.getSelf();\n    } else if (locals[head]) {\n      ref = unwrap(locals[head]);\n    } else if (head.indexOf('@') === 0 && evalScope[head]) {\n      ref = evalScope[head] as Reference;\n    } else {\n      ref = this.scope.getSelf();\n      tail = parts;\n    }\n\n    return tail.reduce((r, part) => childRefFor(r, part), ref);\n  }\n}\n\nAPPEND_OPCODES.add(Op.Debugger, (vm, { op1: _symbols, op2: _debugInfo }) => {\n  let symbols = vm[CONSTANTS].getArray<string>(_symbols);\n  let debugInfo = vm[CONSTANTS].getArray<number>(decodeHandle(_debugInfo));\n  let inspector = new ScopeInspector(vm.scope(), symbols, debugInfo);\n  callback(valueForRef(vm.getSelf()), (path) => valueForRef(inspector.get(path)));\n});\n","import { check } from '@glimmer/debug';\nimport { createIteratorRef, valueForRef } from '@glimmer/reference';\nimport { Op } from '@glimmer/vm';\n\nimport { APPEND_OPCODES } from '../../opcodes';\nimport { CheckIterator, CheckReference } from './-debug-strip';\nimport { AssertFilter } from './vm';\n\nAPPEND_OPCODES.add(Op.EnterList, (vm, { op1: relativeStart, op2: elseTarget }) => {\n  let stack = vm.stack;\n  let listRef = check(stack.pop(), CheckReference);\n  let keyRef = check(stack.pop(), CheckReference);\n\n  let keyValue = valueForRef(keyRef);\n  let key = keyValue === null ? '@identity' : String(keyValue);\n\n  let iteratorRef = createIteratorRef(listRef, key);\n  let iterator = valueForRef(iteratorRef);\n\n  vm.updateWith(new AssertFilter(iteratorRef, (iterator) => iterator.isEmpty()));\n\n  if (iterator.isEmpty() === true) {\n    // TODO: Fix this offset, should be accurate\n    vm.goto(elseTarget + 1);\n  } else {\n    vm.enterList(iteratorRef, relativeStart);\n    vm.stack.push(iterator);\n  }\n});\n\nAPPEND_OPCODES.add(Op.ExitList, (vm) => {\n  vm.exitList();\n});\n\nAPPEND_OPCODES.add(Op.Iterate, (vm, { op1: breaks }) => {\n  let stack = vm.stack;\n  let iterator = check(stack.peek(), CheckIterator);\n  let item = iterator.next();\n\n  if (item !== null) {\n    vm.registerItem(vm.enterItem(item));\n  } else {\n    vm.goto(breaks);\n  }\n});\n","import type { InternalComponentCapabilities, InternalComponentManager } from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport { setInternalComponentManager } from '@glimmer/manager';\nimport { NULL_REFERENCE } from '@glimmer/reference';\n\nconst CAPABILITIES: InternalComponentCapabilities = {\n  dynamicLayout: false,\n  dynamicTag: false,\n  prepareArgs: false,\n  createArgs: false,\n  attributeHook: false,\n  elementHook: false,\n  createCaller: false,\n  dynamicScope: false,\n  updateHook: false,\n  createInstance: false,\n  wrapped: false,\n  willDestroy: false,\n  hasSubOwner: false,\n};\n\nexport class TemplateOnlyComponentManager implements InternalComponentManager {\n  getCapabilities(): InternalComponentCapabilities {\n    return CAPABILITIES;\n  }\n\n  getDebugName({ name }: TemplateOnlyComponentDefinition): string {\n    return name;\n  }\n\n  getSelf(): Reference {\n    return NULL_REFERENCE;\n  }\n\n  getDestroyable(): null {\n    return null;\n  }\n}\n\nexport const TEMPLATE_ONLY_COMPONENT_MANAGER = new TemplateOnlyComponentManager();\n\n// This is only exported for types, don't use this class directly\nexport class TemplateOnlyComponentDefinition {\n  constructor(\n    public moduleName = '@glimmer/component/template-only',\n    public name = '(unknown template-only component)'\n  ) {}\n\n  toString() {\n    return this.moduleName;\n  }\n}\n\nsetInternalComponentManager(\n  TEMPLATE_ONLY_COMPONENT_MANAGER,\n  TemplateOnlyComponentDefinition.prototype\n);\n\n/**\n  This utility function is used to declare a given component has no backing class. When the rendering engine detects this it\n  is able to perform a number of optimizations. Templates that are associated with `templateOnly()` will be rendered _as is_\n  without adding a wrapping `<div>` (or any of the other element customization behaviors of [@ember/component](/ember/release/classes/Component)).\n  Specifically, this means that the template will be rendered as \"outer HTML\".\n\n  In general, this method will be used by build time tooling and would not be directly written in an application. However,\n  at times it may be useful to use directly to leverage the \"outer HTML\" semantics mentioned above. For example, if an addon would like\n  to use these semantics for its templates but cannot be certain it will only be consumed by applications that have enabled the\n  `template-only-glimmer-components` optional feature.\n\n  @example\n\n  ```js\n  import { templateOnlyComponent } from '@glimmer/runtime';\n\n  export default templateOnlyComponent();\n  ```\n\n  @public\n  @method templateOnly\n  @param {String} moduleName the module name that the template only component represents, this will be used for debugging purposes\n  @category EMBER_GLIMMER_SET_COMPONENT_TEMPLATE\n*/\n\nexport function templateOnlyComponent(\n  moduleName?: string,\n  name?: string\n): TemplateOnlyComponentDefinition {\n  return new TemplateOnlyComponentDefinition(moduleName, name);\n}\n","import type {\n  Bounds,\n  Dict,\n  Nullable,\n  SimpleComment,\n  SimpleDocument,\n  SimpleElement,\n  SimpleNode,\n  SimpleText,\n} from '@glimmer/interfaces';\nimport { expect, INSERT_BEFORE_BEGIN, INSERT_BEFORE_END, NS_SVG } from '@glimmer/util';\n\nimport { ConcreteBounds } from '../bounds';\n\n// http://www.w3.org/TR/html/syntax.html#html-integration-point\nconst SVG_INTEGRATION_POINTS = { foreignObject: 1, desc: 1, title: 1 };\n\n// http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes\n// TODO: Adjust SVG attributes\n\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\n// TODO: Adjust SVG elements\n\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\nexport const BLACKLIST_TABLE = Object.create(null);\n\nexport class DOMOperations {\n  protected declare uselessElement: SimpleElement; // Set by this.setupUselessElement() in constructor\n\n  constructor(protected document: SimpleDocument) {\n    this.setupUselessElement();\n  }\n\n  // split into separate method so that NodeDOMTreeConstruction\n  // can override it.\n  protected setupUselessElement() {\n    this.uselessElement = this.document.createElement('div');\n  }\n\n  createElement(tag: string, context?: SimpleElement): SimpleElement {\n    let isElementInSVGNamespace: boolean, isHTMLIntegrationPoint: boolean;\n\n    if (context) {\n      isElementInSVGNamespace = context.namespaceURI === NS_SVG || tag === 'svg';\n      isHTMLIntegrationPoint = !!(SVG_INTEGRATION_POINTS as Dict<number>)[context.tagName];\n    } else {\n      isElementInSVGNamespace = tag === 'svg';\n      isHTMLIntegrationPoint = false;\n    }\n\n    if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {\n      // FIXME: This does not properly handle <font> with color, face, or\n      // size attributes, which is also disallowed by the spec. We should fix\n      // this.\n      if (BLACKLIST_TABLE[tag]) {\n        throw new Error(`Cannot create a ${tag} inside an SVG context`);\n      }\n\n      return this.document.createElementNS(NS_SVG, tag);\n    } else {\n      return this.document.createElement(tag);\n    }\n  }\n\n  insertBefore(parent: SimpleElement, node: SimpleNode, reference: Nullable<SimpleNode>) {\n    parent.insertBefore(node, reference);\n  }\n\n  insertHTMLBefore(parent: SimpleElement, nextSibling: Nullable<SimpleNode>, html: string): Bounds {\n    if (html === '') {\n      const comment = this.createComment('');\n      parent.insertBefore(comment, nextSibling);\n      return new ConcreteBounds(parent, comment, comment);\n    }\n\n    const prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n    let last: SimpleNode;\n\n    if (nextSibling === null) {\n      parent.insertAdjacentHTML(INSERT_BEFORE_END, html);\n      last = expect(parent.lastChild, 'bug in insertAdjacentHTML?');\n    } else if (nextSibling instanceof HTMLElement) {\n      nextSibling.insertAdjacentHTML('beforebegin', html);\n      last = expect(nextSibling.previousSibling, 'bug in insertAdjacentHTML?');\n    } else {\n      // Non-element nodes do not support insertAdjacentHTML, so add an\n      // element and call it on that element. Then remove the element.\n      //\n      // This also protects Edge, IE and Firefox w/o the inspector open\n      // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts\n      const { uselessElement } = this;\n\n      parent.insertBefore(uselessElement, nextSibling);\n      uselessElement.insertAdjacentHTML(INSERT_BEFORE_BEGIN, html);\n      last = expect(uselessElement.previousSibling, 'bug in insertAdjacentHTML?');\n      parent.removeChild(uselessElement);\n    }\n\n    const first = expect(prev ? prev.nextSibling : parent.firstChild, 'bug in insertAdjacentHTML?');\n    return new ConcreteBounds(parent, first, last);\n  }\n\n  createTextNode(text: string): SimpleText {\n    return this.document.createTextNode(text);\n  }\n\n  createComment(data: string): SimpleComment {\n    return this.document.createComment(data);\n  }\n}\n\nexport function moveNodesBefore(\n  source: SimpleNode,\n  target: SimpleElement,\n  nextSibling: Nullable<SimpleNode>\n): Bounds {\n  const first = expect(source.firstChild, 'source is empty');\n  let last: SimpleNode = first;\n  let current: Nullable<SimpleNode> = first;\n\n  while (current) {\n    const next: Nullable<SimpleNode> = current.nextSibling;\n\n    target.insertBefore(current, nextSibling);\n\n    last = current;\n    current = next;\n  }\n\n  return new ConcreteBounds(target, first, last);\n}\n","import type {\n  Bounds,\n  Nullable,\n  SimpleDocument,\n  SimpleElement,\n  SimpleNode,\n} from '@glimmer/interfaces';\nimport {\n  assert,\n  castToBrowser,\n  clearElement,\n  INSERT_AFTER_BEGIN,\n  INSERT_BEFORE_END,\n  NS_SVG,\n  unwrap,\n} from '@glimmer/util';\n\nimport type { DOMOperations } from '../dom/operations';\n\nimport { moveNodesBefore } from '../dom/operations';\n\nexport enum InsertPosition {\n  beforebegin = 'beforebegin',\n  afterbegin = 'afterbegin',\n  beforeend = 'beforeend',\n  afterend = 'afterend',\n}\n\n// Patch:    insertAdjacentHTML on SVG Fix\n// Browsers: Safari, IE, Edge, Firefox ~33-34\n// Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is\n//           present but throws an exception on IE and Edge. Old versions of\n//           Firefox create nodes in the incorrect namespace.\n// Fix:      Since IE and Edge silently fail to create SVG nodes using\n//           innerHTML, and because Firefox may create nodes in the incorrect\n//           namespace using innerHTML on SVG elements, an HTML-string wrapping\n//           approach is used. A pre/post SVG tag is added to the string, then\n//           that whole string is added to a div. The created nodes are plucked\n//           out and applied to the target location on DOM.\nexport function applySVGInnerHTMLFix(\n  document: Nullable<SimpleDocument>,\n  DOMClass: typeof DOMOperations,\n  svgNamespace: typeof NS_SVG\n): typeof DOMOperations {\n  if (!document) return DOMClass;\n\n  if (!shouldApplyFix(document, svgNamespace)) {\n    return DOMClass;\n  }\n\n  const div = document.createElement('div');\n\n  return class DOMChangesWithSVGInnerHTMLFix extends DOMClass {\n    override insertHTMLBefore(\n      parent: SimpleElement,\n      nextSibling: Nullable<SimpleNode>,\n      html: string\n    ): Bounds {\n      if (html === '') {\n        return super.insertHTMLBefore(parent, nextSibling, html);\n      }\n\n      if (parent.namespaceURI !== svgNamespace) {\n        return super.insertHTMLBefore(parent, nextSibling, html);\n      }\n\n      return fixSVG(parent, div, html, nextSibling);\n    }\n  };\n}\n\nfunction fixSVG(\n  parent: SimpleElement,\n  div: SimpleElement,\n  html: string,\n  reference: Nullable<SimpleNode>\n): Bounds {\n  assert(html !== '', 'html cannot be empty');\n\n  let source: SimpleNode;\n\n  // This is important, because descendants of the <foreignObject> integration\n  // point are parsed in the HTML namespace\n  if (parent.tagName.toUpperCase() === 'FOREIGNOBJECT') {\n    // IE, Edge: also do not correctly support using `innerHTML` on SVG\n    // namespaced elements. So here a wrapper is used.\n    const wrappedHtml = '<svg><foreignObject>' + html + '</foreignObject></svg>';\n\n    clearElement(div);\n    div.insertAdjacentHTML(INSERT_AFTER_BEGIN, wrappedHtml);\n\n    source = div.firstChild!.firstChild!;\n  } else {\n    // IE, Edge: also do not correctly support using `innerHTML` on SVG\n    // namespaced elements. So here a wrapper is used.\n    const wrappedHtml = '<svg>' + html + '</svg>';\n\n    clearElement(div);\n    div.insertAdjacentHTML(INSERT_AFTER_BEGIN, wrappedHtml);\n\n    source = div.firstChild!;\n  }\n\n  return moveNodesBefore(source, parent, reference);\n}\n\nfunction shouldApplyFix(document: SimpleDocument, svgNamespace: typeof NS_SVG) {\n  const svg = document.createElementNS(svgNamespace, 'svg');\n\n  try {\n    svg.insertAdjacentHTML(INSERT_BEFORE_END, '<circle></circle>');\n  } catch (e) {\n    // IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG\n    // Safari: Will throw, insertAdjacentHTML is not present on SVG\n  } finally {\n    // FF: Old versions will create a node in the wrong namespace\n    if (\n      svg.childNodes.length === 1 &&\n      castToBrowser(unwrap(svg.firstChild), 'SVG').namespaceURI === NS_SVG\n    ) {\n      // The test worked as expected, no fix required\n      // eslint-disable-next-line no-unsafe-finally\n      return false;\n    }\n\n    // eslint-disable-next-line no-unsafe-finally\n    return true;\n  }\n}\n","import type {\n  Bounds,\n  Nullable,\n  SimpleComment,\n  SimpleDocument,\n  SimpleElement,\n  SimpleNode,\n} from '@glimmer/interfaces';\nimport { INSERT_BEFORE_END } from '@glimmer/util';\n\nimport type { DOMOperations } from '../dom/operations';\n\n// Patch:    Adjacent text node merging fix\n// Browsers: IE, Edge, Firefox w/o inspector open\n// Reason:   These browsers will merge adjacent text nodes. For example given\n//           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers\n//           with proper behavior will populate div.childNodes with two items.\n//           These browsers will populate it with one merged node instead.\n// Fix:      Add these nodes to a wrapper element, then iterate the childNodes\n//           of that wrapper and move the nodes to their target location. Note\n//           that potential SVG bugs will have been handled before this fix.\n//           Note that this fix must only apply to the previous text node, as\n//           the base implementation of `insertHTMLBefore` already handles\n//           following text nodes correctly.\nexport function applyTextNodeMergingFix(\n  document: Nullable<SimpleDocument>,\n  DOMClass: typeof DOMOperations\n): typeof DOMOperations {\n  if (!document) return DOMClass;\n\n  if (!shouldApplyFix(document)) {\n    return DOMClass;\n  }\n\n  return class DOMChangesWithTextNodeMergingFix extends DOMClass {\n    private uselessComment: SimpleComment;\n\n    constructor(document: SimpleDocument) {\n      super(document);\n      this.uselessComment = document.createComment('');\n    }\n\n    override insertHTMLBefore(\n      parent: SimpleElement,\n      nextSibling: Nullable<SimpleNode>,\n      html: string\n    ): Bounds {\n      if (html === '') {\n        return super.insertHTMLBefore(parent, nextSibling, html);\n      }\n\n      let didSetUselessComment = false;\n\n      const nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n\n      if (nextPrevious && nextPrevious instanceof Text) {\n        didSetUselessComment = true;\n        parent.insertBefore(this.uselessComment, nextSibling);\n      }\n\n      const bounds = super.insertHTMLBefore(parent, nextSibling, html);\n\n      if (didSetUselessComment) {\n        parent.removeChild(this.uselessComment);\n      }\n\n      return bounds;\n    }\n  };\n}\n\nfunction shouldApplyFix(document: SimpleDocument) {\n  const mergingTextDiv = document.createElement('div');\n\n  mergingTextDiv.appendChild(document.createTextNode('first'));\n  mergingTextDiv.insertAdjacentHTML(INSERT_BEFORE_END, 'second');\n\n  if (mergingTextDiv.childNodes.length === 2) {\n    // It worked as expected, no fix required\n    return false;\n  }\n\n  return true;\n}\n","import type {\n  AttrNamespace,\n  ElementNamespace,\n  GlimmerTreeConstruction,\n  Nullable,\n  SimpleDocument,\n  SimpleElement,\n} from '@glimmer/interfaces';\nimport { castToSimple, NS_SVG } from '@glimmer/util';\n\nimport { applySVGInnerHTMLFix } from '../compat/svg-inner-html-fix';\nimport { applyTextNodeMergingFix } from '../compat/text-node-merging-fix';\nimport { DOMOperations } from './operations';\n\nconst doc: Nullable<SimpleDocument> =\n  typeof document === 'undefined' ? null : castToSimple(document);\n\nexport class TreeConstruction extends DOMOperations implements GlimmerTreeConstruction {\n  createElementNS(namespace: ElementNamespace, tag: string): SimpleElement {\n    return this.document.createElementNS(namespace, tag);\n  }\n\n  setAttribute(\n    element: SimpleElement,\n    name: string,\n    value: string,\n    namespace: Nullable<AttrNamespace> = null\n  ) {\n    if (namespace) {\n      element.setAttributeNS(namespace, name, value);\n    } else {\n      element.setAttribute(name, value);\n    }\n  }\n}\n\nlet appliedTreeConstruction = TreeConstruction;\nappliedTreeConstruction = applyTextNodeMergingFix(\n  doc,\n  appliedTreeConstruction\n) as typeof TreeConstruction;\nappliedTreeConstruction = applySVGInnerHTMLFix(\n  doc,\n  appliedTreeConstruction,\n  NS_SVG\n) as typeof TreeConstruction;\n\nexport const DOMTreeConstruction = appliedTreeConstruction;\nexport type DOMTreeConstruction = TreeConstruction;\n","import type {\n  GlimmerTreeChanges,\n  Nullable,\n  SimpleDocument,\n  SimpleElement,\n  SimpleNode,\n} from '@glimmer/interfaces';\nimport { castToSimple, NS_SVG } from '@glimmer/util';\n\nimport { applySVGInnerHTMLFix } from '../compat/svg-inner-html-fix';\nimport { applyTextNodeMergingFix } from '../compat/text-node-merging-fix';\nimport { BLACKLIST_TABLE, DOMOperations } from './operations';\n\n[\n  'b',\n  'big',\n  'blockquote',\n  'body',\n  'br',\n  'center',\n  'code',\n  'dd',\n  'div',\n  'dl',\n  'dt',\n  'em',\n  'embed',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'hr',\n  'i',\n  'img',\n  'li',\n  'listing',\n  'main',\n  'meta',\n  'nobr',\n  'ol',\n  'p',\n  'pre',\n  'ruby',\n  's',\n  'small',\n  'span',\n  'strong',\n  'strike',\n  'sub',\n  'sup',\n  'table',\n  'tt',\n  'u',\n  'ul',\n  'var',\n].forEach((tag) => (BLACKLIST_TABLE[tag] = 1));\n\nconst WHITESPACE =\n  /[\\t\\n\\v\\f\\r \\xA0\\u{1680}\\u{180e}\\u{2000}-\\u{200a}\\u{2028}\\u{2029}\\u{202f}\\u{205f}\\u{3000}\\u{feff}]/u;\n\nconst doc: Nullable<SimpleDocument> =\n  typeof document === 'undefined' ? null : castToSimple(document);\n\nexport function isWhitespace(string: string) {\n  return WHITESPACE.test(string);\n}\n\nexport class DOMChangesImpl extends DOMOperations implements GlimmerTreeChanges {\n  protected namespace: Nullable<string>;\n\n  constructor(protected override document: SimpleDocument) {\n    super(document);\n    this.namespace = null;\n  }\n\n  setAttribute(element: SimpleElement, name: string, value: string) {\n    element.setAttribute(name, value);\n  }\n\n  removeAttribute(element: SimpleElement, name: string) {\n    element.removeAttribute(name);\n  }\n\n  insertAfter(element: SimpleElement, node: SimpleNode, reference: SimpleNode) {\n    this.insertBefore(element, node, reference.nextSibling);\n  }\n}\n\nlet helper = DOMChangesImpl;\n\nhelper = applyTextNodeMergingFix(doc, helper) as typeof DOMChangesImpl;\nhelper = applySVGInnerHTMLFix(doc, helper, NS_SVG) as typeof DOMChangesImpl;\n\nexport const DOMChanges = helper;\nexport { DOMTreeConstruction } from './api';\n","import type {\n  Bounds,\n  CapturedRenderNode,\n  DebugRenderTree,\n  Nullable,\n  RenderNode,\n} from '@glimmer/interfaces';\nimport { assign, expect, Stack } from '@glimmer/util';\n\nimport { reifyArgs } from './vm/arguments';\n\ninterface InternalRenderNode<T extends object> extends RenderNode {\n  bounds: Nullable<Bounds>;\n  refs: Set<Ref<T>>;\n  parent?: InternalRenderNode<T>;\n}\n\nlet GUID = 0;\n\nexport class Ref<T extends object> {\n  readonly id: number = GUID++;\n  private value: Nullable<T>;\n\n  constructor(value: T) {\n    this.value = value;\n  }\n\n  get(): Nullable<T> {\n    return this.value;\n  }\n\n  release(): void {\n    if (import.meta.env.DEV && this.value === null) {\n      throw new Error('BUG: double release?');\n    }\n\n    this.value = null;\n  }\n\n  toString(): String {\n    let label = `Ref ${this.id}`;\n\n    if (this.value === null) {\n      return `${label} (released)`;\n    } else {\n      try {\n        return `${label}: ${this.value}`;\n      } catch {\n        return label;\n      }\n    }\n  }\n}\n\nexport default class DebugRenderTreeImpl<TBucket extends object>\n  implements DebugRenderTree<TBucket>\n{\n  private stack = new Stack<TBucket>();\n\n  private refs = new WeakMap<TBucket, Ref<TBucket>>();\n  private roots = new Set<Ref<TBucket>>();\n  private nodes = new WeakMap<TBucket, InternalRenderNode<TBucket>>();\n\n  begin(): void {\n    this.reset();\n  }\n\n  create(state: TBucket, node: RenderNode): void {\n    let internalNode: InternalRenderNode<TBucket> = assign({}, node, {\n      bounds: null,\n      refs: new Set<Ref<TBucket>>(),\n    });\n    this.nodes.set(state, internalNode);\n    this.appendChild(internalNode, state);\n    this.enter(state);\n  }\n\n  update(state: TBucket): void {\n    this.enter(state);\n  }\n\n  didRender(state: TBucket, bounds: Bounds): void {\n    if (import.meta.env.DEV && this.stack.current !== state) {\n      throw new Error(`BUG: expecting ${this.stack.current}, got ${state}`);\n    }\n\n    this.nodeFor(state).bounds = bounds;\n    this.exit();\n  }\n\n  willDestroy(state: TBucket): void {\n    expect(this.refs.get(state), 'BUG: missing ref').release();\n  }\n\n  commit(): void {\n    this.reset();\n  }\n\n  capture(): CapturedRenderNode[] {\n    return this.captureRefs(this.roots);\n  }\n\n  private reset(): void {\n    if (this.stack.size !== 0) {\n      // We probably encountered an error during the rendering loop. This will\n      // likely trigger undefined behavior and memory leaks as the error left\n      // things in an inconsistent state. It is recommended that the user\n      // refresh the page.\n\n      // TODO: We could warn here? But this happens all the time in our tests?\n\n      // Clean up the root reference to prevent errors from happening if we\n      // attempt to capture the render tree (Ember Inspector may do this)\n      let root = expect(this.stack.toArray()[0], 'expected root state when resetting render tree');\n      let ref = this.refs.get(root);\n\n      if (ref !== undefined) {\n        this.roots.delete(ref);\n      }\n\n      while (!this.stack.isEmpty()) {\n        this.stack.pop();\n      }\n    }\n  }\n\n  private enter(state: TBucket): void {\n    this.stack.push(state);\n  }\n\n  private exit(): void {\n    if (import.meta.env.DEV && this.stack.size === 0) {\n      throw new Error('BUG: unbalanced pop');\n    }\n\n    this.stack.pop();\n  }\n\n  private nodeFor(state: TBucket): InternalRenderNode<TBucket> {\n    return expect(this.nodes.get(state), 'BUG: missing node');\n  }\n\n  private appendChild(node: InternalRenderNode<TBucket>, state: TBucket): void {\n    if (import.meta.env.DEV && this.refs.has(state)) {\n      throw new Error('BUG: child already appended');\n    }\n\n    let parent = this.stack.current;\n    let ref = new Ref(state);\n\n    this.refs.set(state, ref);\n\n    if (parent) {\n      let parentNode = this.nodeFor(parent);\n      parentNode.refs.add(ref);\n      node.parent = parentNode;\n    } else {\n      this.roots.add(ref);\n    }\n  }\n\n  private captureRefs(refs: Set<Ref<TBucket>>): CapturedRenderNode[] {\n    let captured: CapturedRenderNode[] = [];\n\n    refs.forEach((ref) => {\n      let state = ref.get();\n\n      if (state) {\n        captured.push(this.captureNode(`render-node:${ref.id}`, state));\n      } else {\n        refs.delete(ref);\n      }\n    });\n\n    return captured;\n  }\n\n  private captureNode(id: string, state: TBucket): CapturedRenderNode {\n    let node = this.nodeFor(state);\n    let { type, name, args, instance, refs } = node;\n    let template = this.captureTemplate(node);\n    let bounds = this.captureBounds(node);\n    let children = this.captureRefs(refs);\n    return { id, type, name, args: reifyArgs(args), instance, template, bounds, children };\n  }\n\n  private captureTemplate({ template }: InternalRenderNode<TBucket>): Nullable<string> {\n    return template || null;\n  }\n\n  private captureBounds(node: InternalRenderNode<TBucket>): CapturedRenderNode['bounds'] {\n    let bounds = expect(node.bounds, 'BUG: missing bounds');\n    let parentElement = bounds.parentElement();\n    let firstNode = bounds.firstNode();\n    let lastNode = bounds.lastNode();\n    return { parentElement, firstNode, lastNode };\n  }\n}\n","import type {\n  ComponentInstanceWithCreate,\n  Environment,\n  EnvironmentOptions,\n  GlimmerTreeChanges,\n  GlimmerTreeConstruction,\n  ModifierInstance,\n  Nullable,\n  RuntimeArtifacts,\n  RuntimeContext,\n  RuntimeResolver,\n  Transaction,\n  TransactionSymbol,\n} from '@glimmer/interfaces';\nimport { RuntimeProgramImpl } from '@glimmer/program';\nimport { assert, expect } from '@glimmer/util';\nimport { track, updateTag } from '@glimmer/validator';\n\nimport DebugRenderTree from './debug-render-tree';\nimport { DOMChangesImpl, DOMTreeConstruction } from './dom/helper';\n\nexport const TRANSACTION: TransactionSymbol = Symbol('TRANSACTION') as TransactionSymbol;\n\nclass TransactionImpl implements Transaction {\n  public scheduledInstallModifiers: ModifierInstance[] = [];\n  public scheduledUpdateModifiers: ModifierInstance[] = [];\n  public createdComponents: ComponentInstanceWithCreate[] = [];\n  public updatedComponents: ComponentInstanceWithCreate[] = [];\n\n  didCreate(component: ComponentInstanceWithCreate) {\n    this.createdComponents.push(component);\n  }\n\n  didUpdate(component: ComponentInstanceWithCreate) {\n    this.updatedComponents.push(component);\n  }\n\n  scheduleInstallModifier(modifier: ModifierInstance) {\n    this.scheduledInstallModifiers.push(modifier);\n  }\n\n  scheduleUpdateModifier(modifier: ModifierInstance) {\n    this.scheduledUpdateModifiers.push(modifier);\n  }\n\n  commit() {\n    let { createdComponents, updatedComponents } = this;\n\n    for (const { manager, state } of createdComponents) {\n      manager.didCreate(state);\n    }\n\n    for (const { manager, state } of updatedComponents) {\n      manager.didUpdate(state);\n    }\n\n    let { scheduledInstallModifiers, scheduledUpdateModifiers } = this;\n\n    for (const { manager, state, definition } of scheduledInstallModifiers) {\n      let modifierTag = manager.getTag(state);\n\n      if (modifierTag !== null) {\n        let tag = track(\n          () => manager.install(state),\n          import.meta.env.DEV &&\n            `- While rendering:\\n  (instance of a \\`${\n              definition.resolvedName || manager.getDebugName(definition.state)\n            }\\` modifier)`\n        );\n        updateTag(modifierTag, tag);\n      } else {\n        manager.install(state);\n      }\n    }\n\n    for (const { manager, state, definition } of scheduledUpdateModifiers) {\n      let modifierTag = manager.getTag(state);\n\n      if (modifierTag !== null) {\n        let tag = track(\n          () => manager.update(state),\n          import.meta.env.DEV &&\n            `- While rendering:\\n  (instance of a \\`${\n              definition.resolvedName || manager.getDebugName(definition.state)\n            }\\` modifier)`\n        );\n        updateTag(modifierTag, tag);\n      } else {\n        manager.update(state);\n      }\n    }\n  }\n}\n\nexport class EnvironmentImpl implements Environment {\n  [TRANSACTION]: Nullable<TransactionImpl> = null;\n\n  protected declare appendOperations: GlimmerTreeConstruction;\n  protected updateOperations?: GlimmerTreeChanges | undefined;\n\n  // Delegate methods and values\n  public isInteractive: boolean;\n\n  debugRenderTree: DebugRenderTree<object> | undefined;\n\n  constructor(\n    options: EnvironmentOptions,\n    private delegate: EnvironmentDelegate\n  ) {\n    this.isInteractive = delegate.isInteractive;\n    this.debugRenderTree = this.delegate.enableDebugTooling ? new DebugRenderTree() : undefined;\n    if (options.appendOperations) {\n      this.appendOperations = options.appendOperations;\n      this.updateOperations = options.updateOperations;\n    } else if (options.document) {\n      this.appendOperations = new DOMTreeConstruction(options.document);\n      this.updateOperations = new DOMChangesImpl(options.document);\n    } else if (import.meta.env.DEV) {\n      throw new Error('you must pass document or appendOperations to a new runtime');\n    }\n  }\n\n  getAppendOperations(): GlimmerTreeConstruction {\n    return this.appendOperations;\n  }\n\n  getDOM(): GlimmerTreeChanges {\n    return expect(\n      this.updateOperations,\n      'Attempted to get DOM updateOperations, but they were not provided by the environment. You may be attempting to rerender in an environment which does not support rerendering, such as SSR.'\n    );\n  }\n\n  begin() {\n    assert(\n      !this[TRANSACTION],\n      'A glimmer transaction was begun, but one already exists. You may have a nested transaction, possibly caused by an earlier runtime exception while rendering. Please check your console for the stack trace of any prior exceptions.'\n    );\n\n    this.debugRenderTree?.begin();\n\n    this[TRANSACTION] = new TransactionImpl();\n  }\n\n  private get transaction(): TransactionImpl {\n    return expect(this[TRANSACTION]!, 'must be in a transaction');\n  }\n\n  didCreate(component: ComponentInstanceWithCreate) {\n    this.transaction.didCreate(component);\n  }\n\n  didUpdate(component: ComponentInstanceWithCreate) {\n    this.transaction.didUpdate(component);\n  }\n\n  scheduleInstallModifier(modifier: ModifierInstance) {\n    if (this.isInteractive) {\n      this.transaction.scheduleInstallModifier(modifier);\n    }\n  }\n\n  scheduleUpdateModifier(modifier: ModifierInstance) {\n    if (this.isInteractive) {\n      this.transaction.scheduleUpdateModifier(modifier);\n    }\n  }\n\n  commit() {\n    let transaction = this.transaction;\n    this[TRANSACTION] = null;\n    transaction.commit();\n\n    this.debugRenderTree?.commit();\n\n    this.delegate.onTransactionCommit();\n  }\n}\n\nexport interface EnvironmentDelegate {\n  /**\n   * Used to determine the the environment is interactive (e.g. SSR is not\n   * interactive). Interactive environments schedule modifiers, among other things.\n   */\n  isInteractive: boolean;\n\n  /**\n   * Used to enable debug tooling\n   */\n  enableDebugTooling: boolean;\n\n  /**\n   * Callback to be called when an environment transaction commits\n   */\n  onTransactionCommit: () => void;\n}\n\nexport function runtimeContext(\n  options: EnvironmentOptions,\n  delegate: EnvironmentDelegate,\n  artifacts: RuntimeArtifacts,\n  resolver: RuntimeResolver\n): RuntimeContext {\n  return {\n    env: new EnvironmentImpl(options, delegate),\n    program: new RuntimeProgramImpl(artifacts.constants, artifacts.heap),\n    resolver: resolver,\n  };\n}\n\nexport function inTransaction(env: Environment, block: () => void): void {\n  if (!env[TRANSACTION]) {\n    env.begin();\n    try {\n      block();\n    } finally {\n      env.commit();\n    }\n  } else {\n    block();\n  }\n}\n\nexport default EnvironmentImpl;\n","import type { Helper, HelperDefinitionState } from '@glimmer/interfaces';\nimport { setInternalHelperManager } from '@glimmer/manager';\n\nexport function internalHelper(helper: Helper): HelperDefinitionState {\n  return setInternalHelperManager(helper, {});\n}\n","import type { CapturedArguments } from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport { createComputeRef } from '@glimmer/reference';\n\nimport { reifyPositional } from '../vm/arguments';\nimport { internalHelper } from './internal-helper';\n\n/**\n   Use the `{{array}}` helper to create an array to pass as an option to your\n   components.\n\n   ```handlebars\n   <MyComponent @people={{array\n     'Tom Dale'\n     'Yehuda Katz'\n     this.myOtherPerson}}\n   />\n   ```\n    or\n   ```handlebars\n   {{my-component people=(array\n     'Tom Dale'\n     'Yehuda Katz'\n     this.myOtherPerson)\n   }}\n   ```\n\n   Would result in an object such as:\n\n   ```js\n   ['Tom Dale', 'Yehuda Katz', this.get('myOtherPerson')]\n   ```\n\n   Where the 3rd item in the array is bound to updates of the `myOtherPerson` property.\n\n   @method array\n   @param {Array} options\n   @return {Array} Array\n   @public\n */\n\nexport const array = internalHelper(({ positional }: CapturedArguments): Reference<unknown[]> => {\n  return createComputeRef(() => reifyPositional(positional), null, 'array');\n});\n","import type { CapturedArguments } from '@glimmer/interfaces';\nimport { createComputeRef } from '@glimmer/reference';\n\nimport { reifyPositional } from '../vm/arguments';\nimport { internalHelper } from './internal-helper';\n\nconst isEmpty = (value: unknown): boolean => {\n  return value === null || value === undefined || typeof (value as object).toString !== 'function';\n};\n\nconst normalizeTextValue = (value: unknown): string => {\n  if (isEmpty(value)) {\n    return '';\n  }\n  return String(value);\n};\n\n/**\n  Concatenates the given arguments into a string.\n\n  Example:\n\n  ```handlebars\n  {{some-component name=(concat firstName \" \" lastName)}}\n\n  {{! would pass name=\"<first name value> <last name value>\" to the component}}\n  ```\n\n  or for angle bracket invocation, you actually don't need concat at all.\n\n  ```handlebars\n  <SomeComponent @name=\"{{firstName}} {{lastName}}\" />\n  ```\n\n  @public\n  @method concat\n*/\nexport const concat = internalHelper(({ positional }: CapturedArguments) => {\n  return createComputeRef(\n    () => reifyPositional(positional).map(normalizeTextValue).join(''),\n    null,\n    'concat'\n  );\n});\n","import type { CapturedArguments } from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport { check } from '@glimmer/debug';\nimport { createComputeRef, isInvokableRef, updateRef, valueForRef } from '@glimmer/reference';\nimport { buildUntouchableThis } from '@glimmer/util';\n\nimport { reifyPositional } from '../vm/arguments';\nimport { internalHelper } from './internal-helper';\n\nconst context = buildUntouchableThis('`fn` helper');\n\n/**\n  The `fn` helper allows you to ensure a function that you are passing off\n  to another component, helper, or modifier has access to arguments that are\n  available in the template.\n\n  For example, if you have an `each` helper looping over a number of items, you\n  may need to pass a function that expects to receive the item as an argument\n  to a component invoked within the loop. Here's how you could use the `fn`\n  helper to pass both the function and its arguments together:\n\n    ```app/templates/components/items-listing.hbs\n  {{#each @items as |item|}}\n    <DisplayItem @item=item @select={{fn this.handleSelected item}} />\n  {{/each}}\n  ```\n\n  ```app/components/items-list.js\n  import Component from '@glimmer/component';\n  import { action } from '@ember/object';\n\n  export default class ItemsList extends Component {\n    handleSelected = (item) => {\n      // ...snip...\n    }\n  }\n  ```\n\n  In this case the `display-item` component will receive a normal function\n  that it can invoke. When it invokes the function, the `handleSelected`\n  function will receive the `item` and any arguments passed, thanks to the\n  `fn` helper.\n\n  Let's take look at what that means in a couple circumstances:\n\n  - When invoked as `this.args.select()` the `handleSelected` function will\n    receive the `item` from the loop as its first and only argument.\n  - When invoked as `this.args.select('foo')` the `handleSelected` function\n    will receive the `item` from the loop as its first argument and the\n    string `'foo'` as its second argument.\n\n  In the example above, we used an arrow function to ensure that\n  `handleSelected` is properly bound to the `items-list`, but let's explore what\n  happens if we left out the arrow function:\n\n  ```app/components/items-list.js\n  import Component from '@glimmer/component';\n\n  export default class ItemsList extends Component {\n    handleSelected(item) {\n      // ...snip...\n    }\n  }\n  ```\n\n  In this example, when `handleSelected` is invoked inside the `display-item`\n  component, it will **not** have access to the component instance. In other\n  words, it will have no `this` context, so please make sure your functions\n  are bound (via an arrow function or other means) before passing into `fn`!\n\n  See also [partial application](https://en.wikipedia.org/wiki/Partial_application).\n\n  @method fn\n  @public\n*/\nexport const fn = internalHelper(({ positional }: CapturedArguments) => {\n  let callbackRef = check(positional[0], assertCallbackIsFn);\n\n  return createComputeRef(\n    () => {\n      return (...invocationArgs: unknown[]) => {\n        let [fn, ...args] = reifyPositional(positional);\n\n        if (import.meta.env.DEV) assertCallbackIsFn(callbackRef);\n\n        if (isInvokableRef(callbackRef)) {\n          let value = args.length > 0 ? args[0] : invocationArgs[0];\n          return updateRef(callbackRef, value);\n        } else {\n          return (fn as Function).call(context, ...args, ...invocationArgs);\n        }\n      };\n    },\n    null,\n    'fn'\n  );\n});\n\nfunction assertCallbackIsFn(callbackRef: Reference | undefined): asserts callbackRef is Reference {\n  if (\n    !(\n      callbackRef &&\n      (isInvokableRef(callbackRef) || typeof valueForRef(callbackRef) === 'function')\n    )\n  ) {\n    throw new Error(\n      `You must pass a function as the \\`fn\\` helper's first argument, you passed ${\n        callbackRef ? valueForRef(callbackRef) : callbackRef\n      }. While rendering:\\n\\n${callbackRef?.debugLabel}`\n    );\n  }\n}\n","import type { CapturedArguments } from '@glimmer/interfaces';\nimport { getPath, setPath } from '@glimmer/global-context';\nimport { createComputeRef, UNDEFINED_REFERENCE, valueForRef } from '@glimmer/reference';\nimport { isDict } from '@glimmer/util';\n\nimport { internalHelper } from './internal-helper';\n\n/**\n  Dynamically look up a property on an object. The second argument to `{{get}}`\n  should have a string value, although it can be bound.\n\n  For example, these two usages are equivalent:\n\n  ```app/components/developer-detail.js\n  import Component from '@glimmer/component';\n  import { tracked } from '@glimmer/tracking';\n\n  export default class extends Component {\n    @tracked developer = {\n      name: \"Sandi Metz\",\n      language: \"Ruby\"\n    }\n  }\n  ```\n\n  ```handlebars\n  {{this.developer.name}}\n  {{get this.developer \"name\"}}\n  ```\n\n  If there were several facts about a person, the `{{get}}` helper can dynamically\n  pick one:\n\n  ```app/templates/application.hbs\n  <DeveloperDetail @factName=\"language\" />\n  ```\n\n  ```handlebars\n  {{get this.developer @factName}}\n  ```\n\n  For a more complex example, this template would allow the user to switch\n  between showing the user's height and weight with a click:\n\n  ```app/components/developer-detail.js\n  import Component from '@glimmer/component';\n  import { tracked } from '@glimmer/tracking';\n\n  export default class extends Component {\n    @tracked developer = {\n      name: \"Sandi Metz\",\n      language: \"Ruby\"\n    }\n\n    @tracked currentFact = 'name'\n\n    showFact = (fact) => {\n      this.currentFact = fact;\n    }\n  }\n  ```\n\n  ```app/components/developer-detail.js\n  {{get this.developer this.currentFact}}\n\n  <button {{on 'click' (fn this.showFact \"name\")}}>Show name</button>\n  <button {{on 'click' (fn this.showFact \"language\")}}>Show language</button>\n  ```\n\n  The `{{get}}` helper can also respect mutable values itself. For example:\n\n  ```app/components/developer-detail.js\n  <Input @value={{mut (get this.person this.currentFact)}} />\n\n  <button {{on 'click' (fn this.showFact \"name\")}}>Show name</button>\n  <button {{on 'click' (fn this.showFact \"language\")}}>Show language</button>\n  ```\n\n  Would allow the user to swap what fact is being displayed, and also edit\n  that fact via a two-way mutable binding.\n\n  @public\n  @method get\n */\nexport const get = internalHelper(({ positional }: CapturedArguments) => {\n  let sourceRef = positional[0] ?? UNDEFINED_REFERENCE;\n  let pathRef = positional[1] ?? UNDEFINED_REFERENCE;\n\n  return createComputeRef(\n    () => {\n      let source = valueForRef(sourceRef);\n\n      if (isDict(source)) {\n        return getPath(source, String(valueForRef(pathRef)));\n      }\n    },\n    (value) => {\n      let source = valueForRef(sourceRef);\n\n      if (isDict(source)) {\n        return setPath(source, String(valueForRef(pathRef)), value);\n      }\n    },\n    'get'\n  );\n});\n","import type { CapturedArguments, Dict } from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport { deprecate } from '@glimmer/global-context';\nimport { createComputeRef } from '@glimmer/reference';\n\nimport { reifyNamed } from '../vm/arguments';\nimport { internalHelper } from './internal-helper';\n\nlet wrapHashProxy: (hash: Record<string, unknown>) => Record<string, unknown>;\n\nif (import.meta.env.DEV) {\n  wrapHashProxy = (hash: Record<string, unknown>) => {\n    return new Proxy(hash, {\n      set(target, key, value) {\n        deprecate(\n          `You set the '${String(\n            key\n          )}' property on a {{hash}} object. Setting properties on objects generated by {{hash}} is deprecated. Please update to use an object created with a tracked property or getter, or with a custom helper.`,\n          false,\n          { id: 'setting-on-hash' }\n        );\n\n        target[key as string] = value;\n\n        return true;\n      },\n    });\n  };\n}\n\n/**\n   Use the `{{hash}}` helper to create a hash to pass as an option to your\n   components. This is specially useful for contextual components where you can\n   just yield a hash:\n\n   ```handlebars\n   {{yield (hash\n      name='Sarah'\n      title=office\n   )}}\n   ```\n\n   Would result in an object such as:\n\n   ```js\n   { name: 'Sarah', title: this.get('office') }\n   ```\n\n   Where the `title` is bound to updates of the `office` property.\n\n   Note that the hash is an empty object with no prototype chain, therefore\n   common methods like `toString` are not available in the resulting hash.\n   If you need to use such a method, you can use the `call` or `apply`\n   approach:\n\n   ```js\n   function toString(obj) {\n     return Object.prototype.toString.apply(obj);\n   }\n   ```\n\n   @method hash\n   @param {Object} options\n   @return {Object} Hash\n   @public\n */\nexport const hash = internalHelper(({ named }: CapturedArguments): Reference<Dict<unknown>> => {\n  let ref = createComputeRef(\n    () => {\n      let hash = reifyNamed(named);\n\n      if (import.meta.env.DEV) {\n        hash = wrapHashProxy(hash);\n      }\n\n      return hash;\n    },\n    null,\n    'hash'\n  );\n\n  // Setup the children so that templates can bypass getting the value of\n  // the reference and treat children lazily\n  let children = new Map();\n\n  for (let name in named) {\n    children.set(name, named[name]);\n  }\n\n  ref.children = children;\n\n  return ref;\n});\n","import type { Arguments, InternalHelperManager } from '@glimmer/interfaces';\nimport type { Cache } from '@glimmer/validator';\nimport { associateDestroyableChild, isDestroyed, isDestroying } from '@glimmer/destroyable';\nimport { getInternalHelperManager, hasDestroyable, hasValue } from '@glimmer/manager';\nimport { getOwner } from '@glimmer/owner';\nimport { debugToString } from '@glimmer/util';\nimport { createCache, getValue } from '@glimmer/validator';\n\nimport { EMPTY_ARGS, EMPTY_NAMED, EMPTY_POSITIONAL } from '../vm/arguments';\n\nlet ARGS_CACHES = import.meta.env.DEV\n  ? new WeakMap<SimpleArgsProxy, Cache<Partial<Arguments>>>()\n  : undefined;\n\nfunction getArgs(proxy: SimpleArgsProxy): Partial<Arguments> {\n  return getValue(import.meta.env.DEV ? ARGS_CACHES!.get(proxy)! : proxy.argsCache!)!;\n}\n\nclass SimpleArgsProxy {\n  argsCache?: Cache<Partial<Arguments>>;\n\n  constructor(\n    context: object,\n    computeArgs: (context: object) => Partial<Arguments> = () => EMPTY_ARGS\n  ) {\n    let argsCache = createCache(() => computeArgs(context));\n\n    if (import.meta.env.DEV) {\n      ARGS_CACHES!.set(this, argsCache);\n      Object.freeze(this);\n    } else {\n      this.argsCache = argsCache;\n    }\n  }\n\n  get named() {\n    return getArgs(this).named || EMPTY_NAMED;\n  }\n\n  get positional() {\n    return getArgs(this).positional || EMPTY_POSITIONAL;\n  }\n}\n\n////////////\n\nexport function invokeHelper(\n  context: object,\n  definition: object,\n  computeArgs?: (context: object) => Partial<Arguments>\n): Cache<unknown> {\n  if (import.meta.env.DEV && (typeof context !== 'object' || context === null)) {\n    throw new Error(\n      `Expected a context object to be passed as the first parameter to invokeHelper, got ${context}`\n    );\n  }\n\n  const owner = getOwner(context);\n  const internalManager = getInternalHelperManager(definition)!;\n\n  // TODO: figure out why assert isn't using the TS assert thing\n  if (import.meta.env.DEV && !internalManager) {\n    throw new Error(\n      `Expected a helper definition to be passed as the second parameter to invokeHelper, but no helper manager was found. The definition value that was passed was \\`${debugToString!(\n        definition\n      )}\\`. Did you use setHelperManager to associate a helper manager with this value?`\n    );\n  }\n\n  if (import.meta.env.DEV && typeof internalManager === 'function') {\n    throw new Error(\n      'Found a helper manager, but it was an internal built-in helper manager. `invokeHelper` does not support internal helpers yet.'\n    );\n  }\n\n  const manager = (internalManager as InternalHelperManager<object>).getDelegateFor(owner);\n  let args = new SimpleArgsProxy(context, computeArgs);\n  let bucket = manager.createHelper(definition, args);\n\n  let cache: Cache<unknown>;\n\n  if (hasValue(manager)) {\n    cache = createCache(() => {\n      if (import.meta.env.DEV && (isDestroying(cache) || isDestroyed(cache))) {\n        throw new Error(\n          `You attempted to get the value of a helper after the helper was destroyed, which is not allowed`\n        );\n      }\n\n      return manager.getValue(bucket);\n    });\n\n    associateDestroyableChild(context, cache);\n  } else {\n    throw new Error('TODO: unreachable, to be implemented with hasScheduledEffect');\n  }\n\n  if (hasDestroyable(manager)) {\n    let destroyable = manager.getDestroyable(bucket);\n\n    associateDestroyableChild(cache, destroyable);\n  }\n\n  return cache;\n}\n","import type {\n  CapturedArguments,\n  InternalModifierManager,\n  Owner,\n  SimpleElement,\n} from '@glimmer/interfaces';\nimport type { UpdatableTag } from '@glimmer/validator';\nimport { check, CheckFunction, CheckString } from '@glimmer/debug';\nimport { registerDestructor } from '@glimmer/destroyable';\nimport { setInternalModifierManager } from '@glimmer/manager';\nimport { valueForRef } from '@glimmer/reference';\nimport { buildUntouchableThis, expect } from '@glimmer/util';\nimport { createUpdatableTag } from '@glimmer/validator';\n\nimport { reifyNamed } from '../vm/arguments';\n\nconst untouchableContext = buildUntouchableThis('`on` modifier');\n\nexport class OnModifierState {\n  public tag = createUpdatableTag();\n  public element: Element;\n  public args: CapturedArguments;\n  public declare eventName: string;\n  public declare callback: EventListener;\n  private declare userProvidedCallback: EventListener;\n  public once?: boolean | undefined;\n  public passive?: boolean | undefined;\n  public capture?: boolean | undefined;\n  public options?: AddEventListenerOptions | undefined;\n  public shouldUpdate = true;\n\n  constructor(element: Element, args: CapturedArguments) {\n    this.element = element;\n    this.args = args;\n  }\n\n  updateFromArgs(): void {\n    let { args } = this;\n\n    let { once, passive, capture }: AddEventListenerOptions = reifyNamed(args.named);\n    if (once !== this.once) {\n      this.once = once;\n      this.shouldUpdate = true;\n    }\n\n    if (passive !== this.passive) {\n      this.passive = passive;\n      this.shouldUpdate = true;\n    }\n\n    if (capture !== this.capture) {\n      this.capture = capture;\n      this.shouldUpdate = true;\n    }\n\n    // we want to handle both `true` and `false` because both have a meaning:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=770208\n    if (once !== undefined || passive !== undefined || capture !== undefined) {\n      this.options = { once, passive, capture } as AddEventListenerOptions;\n    } else {\n      this.options = undefined;\n    }\n\n    let first = expect(\n      args.positional[0],\n      'You must pass a valid DOM event name as the first argument to the `on` modifier'\n    );\n\n    let eventName = check(\n      valueForRef(first),\n      CheckString,\n      () => 'You must pass a valid DOM event name as the first argument to the `on` modifier'\n    );\n\n    if (eventName !== this.eventName) {\n      this.eventName = eventName;\n      this.shouldUpdate = true;\n    }\n\n    const userProvidedCallbackReference = expect(\n      args.positional[1],\n      'You must pass a function as the second argument to the `on` modifier'\n    );\n\n    const userProvidedCallback = check(\n      valueForRef(userProvidedCallbackReference),\n      CheckFunction,\n      (actual) => {\n        return `You must pass a function as the second argument to the \\`on\\` modifier; you passed ${\n          actual === null ? 'null' : typeof actual\n        }. While rendering:\\n\\n${userProvidedCallbackReference.debugLabel ?? `{unlabeled value}`}`;\n      }\n    ) as EventListener;\n\n    if (userProvidedCallback !== this.userProvidedCallback) {\n      this.userProvidedCallback = userProvidedCallback;\n      this.shouldUpdate = true;\n    }\n\n    if (import.meta.env.DEV && args.positional.length !== 2) {\n      throw new Error(\n        `You can only pass two positional arguments (event name and callback) to the \\`on\\` modifier, but you provided ${args.positional.length}. Consider using the \\`fn\\` helper to provide additional arguments to the \\`on\\` callback.`\n      );\n    }\n\n    let needsCustomCallback = import.meta.env.DEV && passive; /* needs passive enforcement */\n\n    if (this.shouldUpdate) {\n      if (needsCustomCallback) {\n        this.callback = function (this: Element, event) {\n          if (import.meta.env.DEV && passive) {\n            event.preventDefault = () => {\n              throw new Error(\n                `You marked this listener as 'passive', meaning that you must not call 'event.preventDefault()': \\n\\n${\n                  userProvidedCallback.name ?? `{anonymous function}`\n                }`\n              );\n            };\n          }\n          return userProvidedCallback.call(untouchableContext, event);\n        };\n      } else if (import.meta.env.DEV) {\n        // prevent the callback from being bound to the element\n        this.callback = userProvidedCallback.bind(untouchableContext);\n      } else {\n        this.callback = userProvidedCallback;\n      }\n    }\n  }\n}\n\nlet adds = 0;\nlet removes = 0;\n\nfunction removeEventListener(\n  element: Element,\n  eventName: string,\n  callback: EventListener,\n  options?: AddEventListenerOptions\n): void {\n  removes++;\n\n  element.removeEventListener(eventName, callback, options);\n}\n\nfunction addEventListener(\n  element: Element,\n  eventName: string,\n  callback: EventListener,\n  options?: AddEventListenerOptions\n): void {\n  adds++;\n  element.addEventListener(eventName, callback, options);\n}\n\n/**\n  The `{{on}}` modifier lets you easily add event listeners (it uses\n  [EventTarget.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n  internally).\n\n  For example, if you'd like to run a function on your component when a `<button>`\n  in the components template is clicked you might do something like:\n\n  ```app/components/like-post.hbs\n  <button {{on 'click' this.saveLike}}>Like this post!</button>\n  ```\n\n  ```app/components/like-post.js\n  import Component from '@glimmer/component';\n  import { action } from '@ember/object';\n\n  export default class LikePostComponent extends Component {\n    saveLike = () => {\n      // someone likes your post!\n      // better send a request off to your server...\n    }\n  }\n  ```\n\n  ### Arguments\n\n  `{{on}}` accepts two positional arguments, and a few named arguments.\n\n  The positional arguments are:\n\n  - `event` -- the name to use when calling `addEventListener`\n  - `callback` -- the function to be passed to `addEventListener`\n\n  The named arguments are:\n\n  - capture -- a `true` value indicates that events of this type will be dispatched\n    to the registered listener before being dispatched to any EventTarget beneath it\n    in the DOM tree.\n  - once -- indicates that the listener should be invoked at most once after being\n    added. If true, the listener would be automatically removed when invoked.\n  - passive -- if `true`, indicates that the function specified by listener will never\n    call preventDefault(). If a passive listener does call preventDefault(), the user\n    agent will do nothing other than generate a console warning. See\n    [Improving scrolling performance with passive listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners)\n    to learn more.\n\n  The callback function passed to `{{on}}` will receive any arguments that are passed\n  to the event handler. Most commonly this would be the `event` itself.\n\n  If you would like to pass additional arguments to the function you should use\n  the `{{fn}}` helper.\n\n  For example, in our example case above if you'd like to pass in the post that\n  was being liked when the button is clicked you could do something like:\n\n  ```app/components/like-post.hbs\n  <button {{on 'click' (fn this.saveLike @post)}}>Like this post!</button>\n  ```\n\n  In this case, the `saveLike` function will receive two arguments: the click event\n  and the value of `@post`.\n\n  ### Function Context\n\n  In the example above, we used an arrow function to ensure that `likePost` is\n  properly bound to the `items-list`, but let's explore what happens if we\n  left out the arrow function:\n\n  ```app/components/like-post.js\n  import Component from '@glimmer/component';\n\n  export default class LikePostComponent extends Component {\n    saveLike() {\n      // ...snip...\n    }\n  }\n  ```\n\n  In this example, when the button is clicked `saveLike` will be invoked,\n  it will **not** have access to the component instance. In other\n  words, it will have no `this` context, so please make sure your functions\n  are bound (via an arrow function or other means) before passing into `on`!\n\n  @method on\n  @public\n*/\nclass OnModifierManager implements InternalModifierManager<OnModifierState | null, object> {\n  getDebugName(): string {\n    return 'on';\n  }\n\n  get counters(): { adds: number; removes: number } {\n    return { adds, removes };\n  }\n\n  create(\n    _owner: Owner,\n    element: SimpleElement | Element,\n    _state: object,\n    args: CapturedArguments\n  ): OnModifierState | null {\n    return new OnModifierState(element as Element, args);\n  }\n\n  getTag(state: OnModifierState | null): UpdatableTag | null {\n    if (state === null) {\n      return null;\n    }\n\n    return state.tag;\n  }\n\n  install(state: OnModifierState | null): void {\n    if (state === null) {\n      return;\n    }\n\n    state.updateFromArgs();\n\n    let { element, eventName, callback, options } = state;\n\n    addEventListener(element, eventName, callback, options);\n\n    registerDestructor(state, () => removeEventListener(element, eventName, callback, options));\n\n    state.shouldUpdate = false;\n  }\n\n  update(state: OnModifierState | null): void {\n    if (state === null) {\n      return;\n    }\n\n    // stash prior state for el.removeEventListener\n    let { element, eventName, callback, options } = state;\n\n    state.updateFromArgs();\n\n    if (!state.shouldUpdate) {\n      return;\n    }\n\n    // use prior state values for removal\n    removeEventListener(element, eventName, callback, options);\n\n    // read updated values from the state object\n    addEventListener(state.element, state.eventName, state.callback, state.options);\n\n    state.shouldUpdate = false;\n  }\n\n  getDestroyable(state: OnModifierState | null): OnModifierState | null {\n    return state;\n  }\n}\n\nexport const on = setInternalModifierManager(new OnModifierManager(), {});\n","import type { Nullable, RuntimeHeap, RuntimeOp, RuntimeProgram } from '@glimmer/interfaces';\nimport type { MachineRegister } from '@glimmer/vm';\nimport { LOCAL_DEBUG } from '@glimmer/local-debug-flags';\nimport { assert } from '@glimmer/util';\nimport { $fp, $pc, $ra, $sp, MachineOp } from '@glimmer/vm';\n\nimport type { VM } from './append';\n\nimport { APPEND_OPCODES } from '../opcodes';\n\nexport interface LowLevelRegisters {\n  [MachineRegister.pc]: number;\n  [MachineRegister.ra]: number;\n  [MachineRegister.sp]: number;\n  [MachineRegister.fp]: number;\n}\n\nexport function initializeRegisters(): LowLevelRegisters {\n  return [0, -1, 0, 0];\n}\n\nexport function initializeRegistersWithSP(sp: number): LowLevelRegisters {\n  return [0, -1, sp, 0];\n}\n\nexport function initializeRegistersWithPC(pc: number): LowLevelRegisters {\n  return [pc, -1, 0, 0];\n}\n\nexport interface Stack {\n  push(value: unknown): void;\n  get(position: number): number;\n  pop<T>(): T;\n}\n\nexport interface Externs {\n  debugBefore(opcode: RuntimeOp): unknown;\n  debugAfter(state: unknown): void;\n}\n\nexport class LowLevelVM {\n  public currentOpSize = 0;\n\n  constructor(\n    public stack: Stack,\n    public heap: RuntimeHeap,\n    public program: RuntimeProgram,\n    public externs: Externs,\n    readonly registers: LowLevelRegisters\n  ) {}\n\n  fetchRegister(register: MachineRegister): number {\n    return this.registers[register];\n  }\n\n  loadRegister(register: MachineRegister, value: number) {\n    this.registers[register] = value;\n  }\n\n  setPc(pc: number): void {\n    assert(typeof pc === 'number' && !isNaN(pc), 'pc is set to a number');\n    this.registers[$pc] = pc;\n  }\n\n  // Start a new frame and save $ra and $fp on the stack\n  pushFrame() {\n    this.stack.push(this.registers[$ra]);\n    this.stack.push(this.registers[$fp]);\n    this.registers[$fp] = this.registers[$sp] - 1;\n  }\n\n  // Restore $ra, $sp and $fp\n  popFrame() {\n    this.registers[$sp] = this.registers[$fp] - 1;\n    this.registers[$ra] = this.stack.get(0);\n    this.registers[$fp] = this.stack.get(1);\n  }\n\n  pushSmallFrame() {\n    this.stack.push(this.registers[$ra]);\n  }\n\n  popSmallFrame() {\n    this.registers[$ra] = this.stack.pop();\n  }\n\n  // Jump to an address in `program`\n  goto(offset: number) {\n    this.setPc(this.target(offset));\n  }\n\n  target(offset: number) {\n    return this.registers[$pc] + offset - this.currentOpSize;\n  }\n\n  // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)\n  call(handle: number) {\n    assert(handle < 0xffffffff, `Jumping to placeholder address`);\n\n    this.registers[$ra] = this.registers[$pc];\n    this.setPc(this.heap.getaddr(handle));\n  }\n\n  // Put a specific `program` address in $ra\n  returnTo(offset: number) {\n    this.registers[$ra] = this.target(offset);\n  }\n\n  // Return to the `program` address stored in $ra\n  return() {\n    this.setPc(this.registers[$ra]);\n  }\n\n  nextStatement(): Nullable<RuntimeOp> {\n    let { registers, program } = this;\n\n    let pc = registers[$pc];\n\n    assert(typeof pc === 'number', 'pc is a number');\n\n    if (pc === -1) {\n      return null;\n    }\n\n    // We have to save off the current operations size so that\n    // when we do a jump we can calculate the correct offset\n    // to where we are going. We can't simply ask for the size\n    // in a jump because we have have already incremented the\n    // program counter to the next instruction prior to executing.\n    let opcode = program.opcode(pc);\n    let operationSize = (this.currentOpSize = opcode.size);\n    this.registers[$pc] += operationSize;\n\n    return opcode;\n  }\n\n  evaluateOuter(opcode: RuntimeOp, vm: VM) {\n    if (LOCAL_DEBUG) {\n      let {\n        externs: { debugBefore, debugAfter },\n      } = this;\n      let state = debugBefore(opcode);\n      this.evaluateInner(opcode, vm);\n      debugAfter(state);\n    } else {\n      this.evaluateInner(opcode, vm);\n    }\n  }\n\n  evaluateInner(opcode: RuntimeOp, vm: VM) {\n    if (opcode.isMachine) {\n      this.evaluateMachine(opcode);\n    } else {\n      this.evaluateSyscall(opcode, vm);\n    }\n  }\n\n  evaluateMachine(opcode: RuntimeOp) {\n    switch (opcode.type) {\n      case MachineOp.PushFrame:\n        return this.pushFrame();\n      case MachineOp.PopFrame:\n        return this.popFrame();\n      case MachineOp.InvokeStatic:\n        return this.call(opcode.op1);\n      case MachineOp.InvokeVirtual:\n        return this.call(this.stack.pop());\n      case MachineOp.Jump:\n        return this.goto(opcode.op1);\n      case MachineOp.Return:\n        return this.return();\n      case MachineOp.ReturnTo:\n        return this.returnTo(opcode.op1);\n    }\n  }\n\n  evaluateSyscall(opcode: RuntimeOp, vm: VM) {\n    APPEND_OPCODES.evaluate(vm, opcode, opcode.type);\n  }\n}\n","import type {\n  Bounds,\n  DynamicScope,\n  ElementBuilder,\n  Environment,\n  ExceptionHandler,\n  GlimmerTreeChanges,\n  LiveBlock,\n  Nullable,\n  RuntimeContext,\n  Scope,\n  SimpleComment,\n  UpdatableBlock,\n  UpdatingOpcode,\n  UpdatingVM as IUpdatingVM,\n} from '@glimmer/interfaces';\nimport type { OpaqueIterationItem, OpaqueIterator, Reference } from '@glimmer/reference';\nimport { associateDestroyableChild, destroy, destroyChildren } from '@glimmer/destroyable';\nimport { LOCAL_DEBUG } from '@glimmer/local-debug-flags';\nimport { updateRef, valueForRef } from '@glimmer/reference';\nimport { expect, logStep, Stack, unwrap } from '@glimmer/util';\nimport { debug, resetTracking } from '@glimmer/validator';\n\nimport type { InternalVM, VmInitCallback } from './append';\nimport type { LiveBlockList } from './element-builder';\n\nimport { clear, move as moveBounds } from '../bounds';\nimport { NewElementBuilder } from './element-builder';\n\nexport class UpdatingVM implements IUpdatingVM {\n  public env: Environment;\n  public dom: GlimmerTreeChanges;\n  public alwaysRevalidate: boolean;\n\n  private frameStack: Stack<UpdatingVMFrame> = new Stack<UpdatingVMFrame>();\n\n  constructor(env: Environment, { alwaysRevalidate = false }) {\n    this.env = env;\n    this.dom = env.getDOM();\n    this.alwaysRevalidate = alwaysRevalidate;\n  }\n\n  execute(opcodes: UpdatingOpcode[], handler: ExceptionHandler) {\n    if (import.meta.env.DEV) {\n      let hasErrored = true;\n      try {\n        debug.runInTrackingTransaction!(\n          () => this._execute(opcodes, handler),\n          '- While rendering:'\n        );\n\n        // using a boolean here to avoid breaking ergonomics of \"pause on uncaught exceptions\"\n        // which would happen with a `catch` + `throw`\n        hasErrored = false;\n      } finally {\n        if (hasErrored) {\n          // eslint-disable-next-line no-console\n          console.error(`\\n\\nError occurred:\\n\\n${resetTracking()}\\n\\n`);\n        }\n      }\n    } else {\n      this._execute(opcodes, handler);\n    }\n  }\n\n  private _execute(opcodes: UpdatingOpcode[], handler: ExceptionHandler) {\n    let { frameStack } = this;\n\n    this.try(opcodes, handler);\n\n    while (!frameStack.isEmpty()) {\n      let opcode = this.frame.nextStatement();\n\n      if (opcode === undefined) {\n        frameStack.pop();\n        continue;\n      }\n\n      opcode.evaluate(this);\n    }\n  }\n\n  private get frame() {\n    return expect(this.frameStack.current, 'bug: expected a frame');\n  }\n\n  goto(index: number) {\n    this.frame.goto(index);\n  }\n\n  try(ops: UpdatingOpcode[], handler: Nullable<ExceptionHandler>) {\n    this.frameStack.push(new UpdatingVMFrame(ops, handler));\n  }\n\n  throw() {\n    this.frame.handleException();\n    this.frameStack.pop();\n  }\n}\n\nexport interface VMState {\n  readonly pc: number;\n  readonly scope: Scope;\n  readonly dynamicScope: DynamicScope;\n  readonly stack: unknown[];\n}\n\nexport interface ResumableVMState {\n  resume(runtime: RuntimeContext, builder: ElementBuilder): InternalVM;\n}\n\nexport class ResumableVMStateImpl implements ResumableVMState {\n  constructor(\n    readonly state: VMState,\n    private resumeCallback: VmInitCallback\n  ) {}\n\n  resume(runtime: RuntimeContext, builder: ElementBuilder): InternalVM {\n    return this.resumeCallback(runtime, this.state, builder);\n  }\n}\n\nexport abstract class BlockOpcode implements UpdatingOpcode, Bounds {\n  public children: UpdatingOpcode[];\n\n  protected readonly bounds: LiveBlock;\n\n  constructor(\n    protected state: ResumableVMState,\n    protected runtime: RuntimeContext,\n    bounds: LiveBlock,\n    children: UpdatingOpcode[]\n  ) {\n    this.children = children;\n    this.bounds = bounds;\n  }\n\n  parentElement() {\n    return this.bounds.parentElement();\n  }\n\n  firstNode() {\n    return this.bounds.firstNode();\n  }\n\n  lastNode() {\n    return this.bounds.lastNode();\n  }\n\n  evaluate(vm: UpdatingVM) {\n    vm.try(this.children, null);\n  }\n}\n\nexport class TryOpcode extends BlockOpcode implements ExceptionHandler {\n  public type = 'try';\n\n  protected declare bounds: UpdatableBlock; // Hides property on base class\n\n  override evaluate(vm: UpdatingVM) {\n    vm.try(this.children, this);\n  }\n\n  handleException() {\n    let { state, bounds, runtime } = this;\n\n    destroyChildren(this);\n\n    let elementStack = NewElementBuilder.resume(runtime.env, bounds);\n    let vm = state.resume(runtime, elementStack);\n\n    let updating: UpdatingOpcode[] = [];\n    let children = (this.children = []);\n\n    let result = vm.execute((vm) => {\n      vm.pushUpdating(updating);\n      vm.updateWith(this);\n      vm.pushUpdating(children);\n    });\n\n    associateDestroyableChild(this, result.drop);\n  }\n}\n\nexport class ListItemOpcode extends TryOpcode {\n  public retained = false;\n  public index = -1;\n\n  constructor(\n    state: ResumableVMState,\n    runtime: RuntimeContext,\n    bounds: UpdatableBlock,\n    public key: unknown,\n    public memo: Reference,\n    public value: Reference\n  ) {\n    super(state, runtime, bounds, []);\n  }\n\n  updateReferences(item: OpaqueIterationItem) {\n    this.retained = true;\n    updateRef(this.value, item.value);\n    updateRef(this.memo, item.memo);\n  }\n\n  shouldRemove(): boolean {\n    return !this.retained;\n  }\n\n  reset() {\n    this.retained = false;\n  }\n}\n\nexport class ListBlockOpcode extends BlockOpcode {\n  public type = 'list-block';\n  public declare children: ListItemOpcode[];\n\n  private opcodeMap = new Map<unknown, ListItemOpcode>();\n  private marker: SimpleComment | null = null;\n  private lastIterator: OpaqueIterator;\n\n  protected declare readonly bounds: LiveBlockList;\n\n  constructor(\n    state: ResumableVMState,\n    runtime: RuntimeContext,\n    bounds: LiveBlockList,\n    children: ListItemOpcode[],\n    private iterableRef: Reference<OpaqueIterator>\n  ) {\n    super(state, runtime, bounds, children);\n    this.lastIterator = valueForRef(iterableRef);\n  }\n\n  initializeChild(opcode: ListItemOpcode) {\n    opcode.index = this.children.length - 1;\n    this.opcodeMap.set(opcode.key, opcode);\n  }\n\n  override evaluate(vm: UpdatingVM) {\n    let iterator = valueForRef(this.iterableRef);\n\n    if (this.lastIterator !== iterator) {\n      let { bounds } = this;\n      let { dom } = vm;\n\n      let marker = (this.marker = dom.createComment(''));\n      dom.insertAfter(\n        bounds.parentElement(),\n        marker,\n        expect(bounds.lastNode(), \"can't insert after an empty bounds\")\n      );\n\n      this.sync(iterator);\n\n      this.parentElement().removeChild(marker);\n      this.marker = null;\n      this.lastIterator = iterator;\n    }\n\n    // Run now-updated updating opcodes\n    super.evaluate(vm);\n  }\n\n  private sync(iterator: OpaqueIterator) {\n    let { opcodeMap: itemMap, children } = this;\n\n    let currentOpcodeIndex = 0;\n    let seenIndex = 0;\n\n    this.children = this.bounds.boundList = [];\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let item = iterator.next();\n\n      if (item === null) break;\n\n      let opcode = children[currentOpcodeIndex];\n      let { key } = item;\n\n      // Items that have already been found and moved will already be retained,\n      // we can continue until we find the next unretained item\n      while (opcode !== undefined && opcode.retained === true) {\n        opcode = children[++currentOpcodeIndex];\n      }\n\n      if (opcode !== undefined && opcode.key === key) {\n        this.retainItem(opcode, item);\n        currentOpcodeIndex++;\n      } else if (itemMap.has(key)) {\n        let itemOpcode = itemMap.get(key)!;\n\n        // The item opcode was seen already, so we should move it.\n        if (itemOpcode.index < seenIndex) {\n          this.moveItem(itemOpcode, item, opcode);\n        } else {\n          // Update the seen index, we are going to be moving this item around\n          // so any other items that come before it will likely need to move as\n          // well.\n          seenIndex = itemOpcode.index;\n\n          let seenUnretained = false;\n\n          // iterate through all of the opcodes between the current position and\n          // the position of the item's opcode, and determine if they are all\n          // retained.\n          for (let i = currentOpcodeIndex + 1; i < seenIndex; i++) {\n            if (unwrap(children[i]).retained === false) {\n              seenUnretained = true;\n              break;\n            }\n          }\n\n          // If we have seen only retained opcodes between this and the matching\n          // opcode, it means that all the opcodes in between have been moved\n          // already, and we can safely retain this item's opcode.\n          if (seenUnretained === false) {\n            this.retainItem(itemOpcode, item);\n            currentOpcodeIndex = seenIndex + 1;\n          } else {\n            this.moveItem(itemOpcode, item, opcode);\n            currentOpcodeIndex++;\n          }\n        }\n      } else {\n        this.insertItem(item, opcode);\n      }\n    }\n\n    for (const opcode of children) {\n      if (opcode.retained === false) {\n        this.deleteItem(opcode);\n      } else {\n        opcode.reset();\n      }\n    }\n  }\n\n  private retainItem(opcode: ListItemOpcode, item: OpaqueIterationItem) {\n    if (LOCAL_DEBUG) {\n      logStep!('list-updates', ['retain', item.key]);\n    }\n\n    let { children } = this;\n\n    updateRef(opcode.memo, item.memo);\n    updateRef(opcode.value, item.value);\n    opcode.retained = true;\n\n    opcode.index = children.length;\n    children.push(opcode);\n  }\n\n  private insertItem(item: OpaqueIterationItem, before: ListItemOpcode | undefined) {\n    if (LOCAL_DEBUG) {\n      logStep!('list-updates', ['insert', item.key]);\n    }\n\n    let { opcodeMap, bounds, state, runtime, children } = this;\n    let { key } = item;\n    let nextSibling = before === undefined ? this.marker : before.firstNode();\n\n    let elementStack = NewElementBuilder.forInitialRender(runtime.env, {\n      element: bounds.parentElement(),\n      nextSibling,\n    });\n\n    let vm = state.resume(runtime, elementStack);\n\n    vm.execute((vm) => {\n      vm.pushUpdating();\n      let opcode = vm.enterItem(item);\n\n      opcode.index = children.length;\n      children.push(opcode);\n      opcodeMap.set(key, opcode);\n      associateDestroyableChild(this, opcode);\n    });\n  }\n\n  private moveItem(\n    opcode: ListItemOpcode,\n    item: OpaqueIterationItem,\n    before: ListItemOpcode | undefined\n  ) {\n    let { children } = this;\n\n    updateRef(opcode.memo, item.memo);\n    updateRef(opcode.value, item.value);\n    opcode.retained = true;\n\n    let currentSibling, nextSibling;\n\n    if (before === undefined) {\n      moveBounds(opcode, this.marker);\n    } else {\n      currentSibling = opcode.lastNode().nextSibling;\n      nextSibling = before.firstNode();\n\n      // Items are moved throughout the algorithm, so there are cases where the\n      // the items already happen to be siblings (e.g. an item in between was\n      // moved before this move happened). Check to see if they are siblings\n      // first before doing the move.\n      if (currentSibling !== nextSibling) {\n        moveBounds(opcode, nextSibling);\n      }\n    }\n\n    opcode.index = children.length;\n    children.push(opcode);\n\n    if (LOCAL_DEBUG) {\n      let type = currentSibling && currentSibling === nextSibling ? 'move-retain' : 'move';\n      logStep!('list-updates', [type, item.key]);\n    }\n  }\n\n  private deleteItem(opcode: ListItemOpcode) {\n    if (LOCAL_DEBUG) {\n      logStep!('list-updates', ['delete', opcode.key]);\n    }\n\n    destroy(opcode);\n    clear(opcode);\n    this.opcodeMap.delete(opcode.key);\n  }\n}\n\nclass UpdatingVMFrame {\n  private current = 0;\n\n  constructor(\n    private ops: UpdatingOpcode[],\n    private exceptionHandler: Nullable<ExceptionHandler>\n  ) {}\n\n  goto(index: number) {\n    this.current = index;\n  }\n\n  nextStatement(): UpdatingOpcode | undefined {\n    return this.ops[this.current++];\n  }\n\n  handleException() {\n    if (this.exceptionHandler) {\n      this.exceptionHandler.handleException();\n    }\n  }\n}\n","import type {\n  Environment,\n  LiveBlock,\n  RenderResult,\n  SimpleElement,\n  SimpleNode,\n  UpdatingOpcode,\n} from '@glimmer/interfaces';\nimport { associateDestroyableChild, registerDestructor } from '@glimmer/destroyable';\n\nimport { clear } from '../bounds';\nimport { UpdatingVM } from './update';\n\nexport default class RenderResultImpl implements RenderResult {\n  constructor(\n    public env: Environment,\n    private updating: UpdatingOpcode[],\n    private bounds: LiveBlock,\n    readonly drop: object\n  ) {\n    associateDestroyableChild(this, drop);\n    registerDestructor(this, () => clear(this.bounds));\n  }\n\n  rerender({ alwaysRevalidate = false } = { alwaysRevalidate: false }) {\n    let { env, updating } = this;\n    let vm = new UpdatingVM(env, { alwaysRevalidate });\n    vm.execute(updating, this);\n  }\n\n  parentElement(): SimpleElement {\n    return this.bounds.parentElement();\n  }\n\n  firstNode(): SimpleNode {\n    return this.bounds.firstNode();\n  }\n\n  lastNode(): SimpleNode {\n    return this.bounds.lastNode();\n  }\n\n  handleException() {\n    throw 'this should never happen';\n  }\n}\n","import type { MachineRegister } from '@glimmer/vm';\nimport { LOCAL_DEBUG } from '@glimmer/local-debug-flags';\nimport { $fp, $sp } from '@glimmer/vm';\n\nimport type { LowLevelRegisters } from './low-level';\n\nimport { REGISTERS } from '../symbols';\nimport { initializeRegistersWithSP } from './low-level';\n\nexport interface EvaluationStack {\n  [REGISTERS]: LowLevelRegisters;\n\n  push(value: unknown): void;\n  dup(position?: MachineRegister): void;\n  copy(from: number, to: number): void;\n  pop<T>(n?: number): T;\n  peek<T>(offset?: number): T;\n  get<T>(offset: number, base?: number): T;\n  set(value: unknown, offset: number, base?: number): void;\n  slice<T = unknown>(start: number, end: number): T[];\n  capture(items: number): unknown[];\n  reset(): void;\n  toArray(): unknown[];\n}\n\nexport default class EvaluationStackImpl implements EvaluationStack {\n  static restore(snapshot: unknown[]): EvaluationStackImpl {\n    return new this(snapshot.slice(), initializeRegistersWithSP(snapshot.length - 1));\n  }\n\n  readonly [REGISTERS]: LowLevelRegisters;\n\n  // fp -> sp\n  constructor(\n    private stack: unknown[] = [],\n    registers: LowLevelRegisters\n  ) {\n    this[REGISTERS] = registers;\n\n    if (LOCAL_DEBUG) {\n      Object.seal(this);\n    }\n  }\n\n  push(value: unknown): void {\n    this.stack[++this[REGISTERS][$sp]] = value;\n  }\n\n  dup(position = this[REGISTERS][$sp]): void {\n    this.stack[++this[REGISTERS][$sp]] = this.stack[position];\n  }\n\n  copy(from: number, to: number): void {\n    this.stack[to] = this.stack[from];\n  }\n\n  pop<T>(n = 1): T {\n    let top = this.stack[this[REGISTERS][$sp]] as T;\n    this[REGISTERS][$sp] -= n;\n    return top;\n  }\n\n  peek<T>(offset = 0): T {\n    return this.stack[this[REGISTERS][$sp] - offset] as T;\n  }\n\n  get<T>(offset: number, base = this[REGISTERS][$fp]): T {\n    return this.stack[base + offset] as T;\n  }\n\n  set(value: unknown, offset: number, base = this[REGISTERS][$fp]) {\n    this.stack[base + offset] = value;\n  }\n\n  slice<T = unknown>(start: number, end: number): T[] {\n    return this.stack.slice(start, end) as T[];\n  }\n\n  capture(items: number): unknown[] {\n    let end = this[REGISTERS][$sp] + 1;\n    let start = end - items;\n    return this.stack.slice(start, end);\n  }\n\n  reset() {\n    this.stack.length = 0;\n  }\n\n  toArray() {\n    return this.stack.slice(this[REGISTERS][$fp], this[REGISTERS][$sp] + 1);\n  }\n}\n","import type {\n  CompilableTemplate,\n  CompileTimeCompilationContext,\n  Destroyable,\n  DynamicScope,\n  ElementBuilder,\n  Environment,\n  Nullable,\n  Owner,\n  PartialScope,\n  RenderResult,\n  ResolutionTimeConstants,\n  RichIteratorResult,\n  RuntimeConstants,\n  RuntimeContext,\n  RuntimeHeap,\n  RuntimeProgram,\n  Scope,\n  UpdatingOpcode,\n  VM as PublicVM,\n} from '@glimmer/interfaces';\nimport type { RuntimeOpImpl } from '@glimmer/program';\nimport type { OpaqueIterationItem, OpaqueIterator, Reference } from '@glimmer/reference';\nimport type { MachineRegister, Register, SyscallRegister } from '@glimmer/vm';\nimport { associateDestroyableChild } from '@glimmer/destroyable';\nimport { assertGlobalContextWasSet } from '@glimmer/global-context';\nimport { LOCAL_SHOULD_LOG } from '@glimmer/local-debug-flags';\nimport { createIteratorItemRef, UNDEFINED_REFERENCE } from '@glimmer/reference';\nimport { assert, expect, LOCAL_LOGGER, reverse, Stack, unwrapHandle } from '@glimmer/util';\nimport { beginTrackFrame, endTrackFrame, resetTracking } from '@glimmer/validator';\nimport { $fp, $pc, $s0, $s1, $sp, $t0, $t1, $v0, isLowLevelRegister } from '@glimmer/vm';\n\nimport type { DebugState } from '../opcodes';\nimport type { LiveBlockList } from './element-builder';\nimport type { EvaluationStack } from './stack';\nimport type { BlockOpcode, ResumableVMState, VMState } from './update';\n\nimport {\n  BeginTrackFrameOpcode,\n  EndTrackFrameOpcode,\n  JumpIfNotModifiedOpcode,\n} from '../compiled/opcodes/vm';\nimport { APPEND_OPCODES } from '../opcodes';\nimport { PartialScopeImpl } from '../scope';\nimport { ARGS, CONSTANTS, DESTROYABLE_STACK, HEAP, INNER_VM, REGISTERS, STACKS } from '../symbols';\nimport { VMArgumentsImpl } from './arguments';\nimport { LowLevelVM } from './low-level';\nimport RenderResultImpl from './render-result';\nimport EvaluationStackImpl from './stack';\nimport { ListBlockOpcode, ListItemOpcode, ResumableVMStateImpl, TryOpcode } from './update';\n\n/**\n * This interface is used by internal opcodes, and is more stable than\n * the implementation of the Append VM itself.\n */\nexport interface InternalVM {\n  readonly [CONSTANTS]: RuntimeConstants & ResolutionTimeConstants;\n  readonly [ARGS]: VMArgumentsImpl;\n\n  readonly env: Environment;\n  readonly stack: EvaluationStack;\n  readonly runtime: RuntimeContext;\n  readonly context: CompileTimeCompilationContext;\n\n  loadValue(register: MachineRegister, value: number): void;\n  loadValue(register: Register, value: unknown): void;\n  loadValue(register: Register | MachineRegister, value: unknown): void;\n\n  fetchValue(register: MachineRegister.ra | MachineRegister.pc): number;\n  // TODO: Something better than a type assertion?\n  fetchValue<T>(register: Register): T;\n  fetchValue(register: Register): unknown;\n\n  load(register: Register): void;\n  fetch(register: Register): void;\n\n  compile(block: CompilableTemplate): number;\n\n  scope(): Scope;\n  elements(): ElementBuilder;\n\n  getOwner(): Owner;\n  getSelf(): Reference;\n\n  updateWith(opcode: UpdatingOpcode): void;\n\n  associateDestroyable(d: Destroyable): void;\n\n  beginCacheGroup(name?: string): void;\n  commitCacheGroup(): void;\n\n  /// Iteration ///\n\n  enterList(iterableRef: Reference<OpaqueIterator>, offset: number): void;\n  exitList(): void;\n  enterItem(item: OpaqueIterationItem): ListItemOpcode;\n  registerItem(item: ListItemOpcode): void;\n\n  pushRootScope(size: number, owner: Owner): PartialScope;\n  pushChildScope(): void;\n  popScope(): void;\n  pushScope(scope: Scope): void;\n\n  dynamicScope(): DynamicScope;\n  bindDynamicScope(names: string[]): void;\n  pushDynamicScope(): void;\n  popDynamicScope(): void;\n\n  enter(args: number): void;\n  exit(): void;\n\n  goto(pc: number): void;\n  call(handle: number): void;\n  pushFrame(): void;\n\n  referenceForSymbol(symbol: number): Reference;\n\n  execute(initialize?: (vm: this) => void): RenderResult;\n  pushUpdating(list?: UpdatingOpcode[]): void;\n  next(): RichIteratorResult<null, RenderResult>;\n}\n\nclass Stacks {\n  readonly scope = new Stack<Scope>();\n  readonly dynamicScope = new Stack<DynamicScope>();\n  readonly updating = new Stack<UpdatingOpcode[]>();\n  readonly cache = new Stack<JumpIfNotModifiedOpcode>();\n  readonly list = new Stack<ListBlockOpcode>();\n}\n\nexport class VM implements PublicVM, InternalVM {\n  private readonly [STACKS] = new Stacks();\n  private readonly [HEAP]: RuntimeHeap;\n  private readonly destructor: object;\n  private readonly [DESTROYABLE_STACK] = new Stack<object>();\n  readonly [CONSTANTS]: RuntimeConstants & ResolutionTimeConstants;\n  readonly [ARGS]: VMArgumentsImpl;\n  readonly [INNER_VM]: LowLevelVM;\n\n  get stack(): EvaluationStack {\n    return this[INNER_VM].stack as EvaluationStack;\n  }\n\n  /* Registers */\n\n  get pc(): number {\n    return this[INNER_VM].fetchRegister($pc);\n  }\n\n  public s0: unknown = null;\n  public s1: unknown = null;\n  public t0: unknown = null;\n  public t1: unknown = null;\n  public v0: unknown = null;\n\n  // Fetch a value from a register onto the stack\n  fetch(register: SyscallRegister): void {\n    let value = this.fetchValue(register);\n\n    this.stack.push(value);\n  }\n\n  // Load a value from the stack into a register\n  load(register: SyscallRegister) {\n    let value = this.stack.pop();\n\n    this.loadValue(register, value);\n  }\n\n  // Fetch a value from a register\n  fetchValue(register: MachineRegister): number;\n  fetchValue<T>(register: Register): T;\n  fetchValue(register: Register | MachineRegister): unknown {\n    if (isLowLevelRegister(register)) {\n      return this[INNER_VM].fetchRegister(register);\n    }\n\n    switch (register) {\n      case $s0:\n        return this.s0;\n      case $s1:\n        return this.s1;\n      case $t0:\n        return this.t0;\n      case $t1:\n        return this.t1;\n      case $v0:\n        return this.v0;\n    }\n  }\n\n  // Load a value into a register\n\n  loadValue<T>(register: Register | MachineRegister, value: T): void {\n    if (isLowLevelRegister(register)) {\n      this[INNER_VM].loadRegister(register, value as any as number);\n    }\n\n    switch (register) {\n      case $s0:\n        this.s0 = value;\n        break;\n      case $s1:\n        this.s1 = value;\n        break;\n      case $t0:\n        this.t0 = value;\n        break;\n      case $t1:\n        this.t1 = value;\n        break;\n      case $v0:\n        this.v0 = value;\n        break;\n    }\n  }\n\n  /**\n   * Migrated to Inner\n   */\n\n  // Start a new frame and save $ra and $fp on the stack\n  pushFrame() {\n    this[INNER_VM].pushFrame();\n  }\n\n  // Restore $ra, $sp and $fp\n  popFrame() {\n    this[INNER_VM].popFrame();\n  }\n\n  // Jump to an address in `program`\n  goto(offset: number) {\n    this[INNER_VM].goto(offset);\n  }\n\n  // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)\n  call(handle: number) {\n    this[INNER_VM].call(handle);\n  }\n\n  // Put a specific `program` address in $ra\n  returnTo(offset: number) {\n    this[INNER_VM].returnTo(offset);\n  }\n\n  // Return to the `program` address stored in $ra\n  return() {\n    this[INNER_VM].return();\n  }\n\n  /**\n   * End of migrated.\n   */\n\n  constructor(\n    readonly runtime: RuntimeContext,\n    { pc, scope, dynamicScope, stack }: VMState,\n    private readonly elementStack: ElementBuilder,\n    readonly context: CompileTimeCompilationContext\n  ) {\n    if (import.meta.env.DEV) {\n      assertGlobalContextWasSet!();\n    }\n\n    this.resume = initVM(context);\n    let evalStack = EvaluationStackImpl.restore(stack);\n\n    assert(typeof pc === 'number', 'pc is a number');\n\n    evalStack[REGISTERS][$pc] = pc;\n    evalStack[REGISTERS][$sp] = stack.length - 1;\n    evalStack[REGISTERS][$fp] = -1;\n\n    this[HEAP] = this.program.heap;\n    this[CONSTANTS] = this.program.constants;\n    this.elementStack = elementStack;\n    this[STACKS].scope.push(scope);\n    this[STACKS].dynamicScope.push(dynamicScope);\n    this[ARGS] = new VMArgumentsImpl();\n    this[INNER_VM] = new LowLevelVM(\n      evalStack,\n      this[HEAP],\n      runtime.program,\n      {\n        debugBefore: (opcode: RuntimeOpImpl): DebugState => {\n          return APPEND_OPCODES.debugBefore(this, opcode);\n        },\n\n        debugAfter: (state: DebugState): void => {\n          APPEND_OPCODES.debugAfter(this, state);\n        },\n      },\n      evalStack[REGISTERS]\n    );\n\n    this.destructor = {};\n    this[DESTROYABLE_STACK].push(this.destructor);\n  }\n\n  static initial(\n    runtime: RuntimeContext,\n    context: CompileTimeCompilationContext,\n    { handle, self, dynamicScope, treeBuilder, numSymbols, owner }: InitOptions\n  ) {\n    let scope = PartialScopeImpl.root(self, numSymbols, owner);\n    let state = vmState(runtime.program.heap.getaddr(handle), scope, dynamicScope);\n    let vm = initVM(context)(runtime, state, treeBuilder);\n    vm.pushUpdating();\n    return vm;\n  }\n\n  static empty(\n    runtime: RuntimeContext,\n    { handle, treeBuilder, dynamicScope, owner }: MinimalInitOptions,\n    context: CompileTimeCompilationContext\n  ) {\n    let vm = initVM(context)(\n      runtime,\n      vmState(\n        runtime.program.heap.getaddr(handle),\n        PartialScopeImpl.root(UNDEFINED_REFERENCE, 0, owner),\n        dynamicScope\n      ),\n      treeBuilder\n    );\n    vm.pushUpdating();\n    return vm;\n  }\n\n  private resume: VmInitCallback;\n\n  compile(block: CompilableTemplate): number {\n    let handle = unwrapHandle(block.compile(this.context));\n\n    return handle;\n  }\n\n  get program(): RuntimeProgram {\n    return this.runtime.program;\n  }\n\n  get env(): Environment {\n    return this.runtime.env;\n  }\n\n  captureState(args: number, pc = this[INNER_VM].fetchRegister($pc)): VMState {\n    return {\n      pc,\n      scope: this.scope(),\n      dynamicScope: this.dynamicScope(),\n      stack: this.stack.capture(args),\n    };\n  }\n\n  capture(args: number, pc = this[INNER_VM].fetchRegister($pc)): ResumableVMState {\n    return new ResumableVMStateImpl(this.captureState(args, pc), this.resume);\n  }\n\n  beginCacheGroup(name?: string) {\n    let opcodes = this.updating();\n    let guard = new JumpIfNotModifiedOpcode();\n\n    opcodes.push(guard);\n    opcodes.push(new BeginTrackFrameOpcode(name));\n    this[STACKS].cache.push(guard);\n\n    beginTrackFrame(name);\n  }\n\n  commitCacheGroup() {\n    let opcodes = this.updating();\n    let guard = expect(this[STACKS].cache.pop(), 'VM BUG: Expected a cache group');\n\n    let tag = endTrackFrame();\n    opcodes.push(new EndTrackFrameOpcode(guard));\n\n    guard.finalize(tag, opcodes.length);\n  }\n\n  enter(args: number) {\n    let updating: UpdatingOpcode[] = [];\n\n    let state = this.capture(args);\n    let block = this.elements().pushUpdatableBlock();\n\n    let tryOpcode = new TryOpcode(state, this.runtime, block, updating);\n\n    this.didEnter(tryOpcode);\n  }\n\n  enterItem({ key, value, memo }: OpaqueIterationItem): ListItemOpcode {\n    let { stack } = this;\n\n    let valueRef = createIteratorItemRef(value);\n    let memoRef = createIteratorItemRef(memo);\n\n    stack.push(valueRef);\n    stack.push(memoRef);\n\n    let state = this.capture(2);\n    let block = this.elements().pushUpdatableBlock();\n\n    let opcode = new ListItemOpcode(state, this.runtime, block, key, memoRef, valueRef);\n    this.didEnter(opcode);\n\n    return opcode;\n  }\n\n  registerItem(opcode: ListItemOpcode) {\n    this.listBlock().initializeChild(opcode);\n  }\n\n  enterList(iterableRef: Reference<OpaqueIterator>, offset: number) {\n    let updating: ListItemOpcode[] = [];\n\n    let addr = this[INNER_VM].target(offset);\n    let state = this.capture(0, addr);\n    let list = this.elements().pushBlockList(updating) as LiveBlockList;\n\n    let opcode = new ListBlockOpcode(state, this.runtime, list, updating, iterableRef);\n\n    this[STACKS].list.push(opcode);\n\n    this.didEnter(opcode);\n  }\n\n  private didEnter(opcode: BlockOpcode) {\n    this.associateDestroyable(opcode);\n    this[DESTROYABLE_STACK].push(opcode);\n    this.updateWith(opcode);\n    this.pushUpdating(opcode.children);\n  }\n\n  exit() {\n    this[DESTROYABLE_STACK].pop();\n    this.elements().popBlock();\n    this.popUpdating();\n  }\n\n  exitList() {\n    this.exit();\n    this[STACKS].list.pop();\n  }\n\n  pushUpdating(list: UpdatingOpcode[] = []): void {\n    this[STACKS].updating.push(list);\n  }\n\n  popUpdating(): UpdatingOpcode[] {\n    return expect(this[STACKS].updating.pop(), \"can't pop an empty stack\");\n  }\n\n  updateWith(opcode: UpdatingOpcode) {\n    this.updating().push(opcode);\n  }\n\n  listBlock(): ListBlockOpcode {\n    return expect(this[STACKS].list.current, 'expected a list block');\n  }\n\n  associateDestroyable(child: Destroyable): void {\n    let parent = expect(this[DESTROYABLE_STACK].current, 'Expected destructor parent');\n    associateDestroyableChild(parent, child);\n  }\n\n  tryUpdating(): Nullable<UpdatingOpcode[]> {\n    return this[STACKS].updating.current;\n  }\n\n  updating(): UpdatingOpcode[] {\n    return expect(\n      this[STACKS].updating.current,\n      'expected updating opcode on the updating opcode stack'\n    );\n  }\n\n  elements(): ElementBuilder {\n    return this.elementStack;\n  }\n\n  scope(): Scope {\n    return expect(this[STACKS].scope.current, 'expected scope on the scope stack');\n  }\n\n  dynamicScope(): DynamicScope {\n    return expect(\n      this[STACKS].dynamicScope.current,\n      'expected dynamic scope on the dynamic scope stack'\n    );\n  }\n\n  pushChildScope() {\n    this[STACKS].scope.push(this.scope().child());\n  }\n\n  pushDynamicScope(): DynamicScope {\n    let child = this.dynamicScope().child();\n    this[STACKS].dynamicScope.push(child);\n    return child;\n  }\n\n  pushRootScope(size: number, owner: Owner): PartialScope {\n    let scope = PartialScopeImpl.sized(size, owner);\n    this[STACKS].scope.push(scope);\n    return scope;\n  }\n\n  pushScope(scope: Scope) {\n    this[STACKS].scope.push(scope);\n  }\n\n  popScope() {\n    this[STACKS].scope.pop();\n  }\n\n  popDynamicScope() {\n    this[STACKS].dynamicScope.pop();\n  }\n\n  /// SCOPE HELPERS\n\n  getOwner(): Owner {\n    return this.scope().owner;\n  }\n\n  getSelf(): Reference<any> {\n    return this.scope().getSelf();\n  }\n\n  referenceForSymbol(symbol: number): Reference {\n    return this.scope().getSymbol(symbol);\n  }\n\n  /// EXECUTION\n\n  execute(initialize?: (vm: this) => void): RenderResult {\n    if (import.meta.env.DEV) {\n      let hasErrored = true;\n      try {\n        let value = this._execute(initialize);\n\n        // using a boolean here to avoid breaking ergonomics of \"pause on uncaught exceptions\"\n        // which would happen with a `catch` + `throw`\n        hasErrored = false;\n\n        return value;\n      } finally {\n        if (hasErrored) {\n          // If any existing blocks are open, due to an error or something like\n          // that, we need to close them all and clean things up properly.\n          let elements = this.elements();\n\n          while (elements.hasBlocks) {\n            elements.popBlock();\n          }\n\n          // eslint-disable-next-line no-console\n          console.error(`\\n\\nError occurred:\\n\\n${resetTracking()}\\n\\n`);\n        }\n      }\n    } else {\n      return this._execute(initialize);\n    }\n  }\n\n  private _execute(initialize?: (vm: this) => void): RenderResult {\n    if (LOCAL_SHOULD_LOG) {\n      LOCAL_LOGGER.log(`EXECUTING FROM ${this[INNER_VM].fetchRegister($pc)}`);\n    }\n\n    if (initialize) initialize(this);\n\n    let result: RichIteratorResult<null, RenderResult>;\n\n    do result = this.next();\n    while (!result.done);\n\n    return result.value;\n  }\n\n  next(): RichIteratorResult<null, RenderResult> {\n    let { env, elementStack } = this;\n    let opcode = this[INNER_VM].nextStatement();\n    let result: RichIteratorResult<null, RenderResult>;\n    if (opcode !== null) {\n      this[INNER_VM].evaluateOuter(opcode, this);\n      result = { done: false, value: null };\n    } else {\n      // Unload the stack\n      this.stack.reset();\n\n      result = {\n        done: true,\n        value: new RenderResultImpl(\n          env,\n          this.popUpdating(),\n          elementStack.popBlock(),\n          this.destructor\n        ),\n      };\n    }\n    return result;\n  }\n\n  bindDynamicScope(names: string[]) {\n    let scope = this.dynamicScope();\n\n    for (const name of reverse(names)) {\n      scope.set(name, this.stack.pop<Reference<unknown>>());\n    }\n  }\n}\n\nfunction vmState(pc: number, scope: Scope, dynamicScope: DynamicScope) {\n  return {\n    pc,\n    scope,\n    dynamicScope,\n    stack: [],\n  };\n}\n\nexport interface MinimalInitOptions {\n  handle: number;\n  treeBuilder: ElementBuilder;\n  dynamicScope: DynamicScope;\n  owner: Owner;\n}\n\nexport interface InitOptions extends MinimalInitOptions {\n  self: Reference;\n  numSymbols: number;\n}\n\nexport type VmInitCallback = (\n  this: void,\n  runtime: RuntimeContext,\n  state: VMState,\n  builder: ElementBuilder\n) => InternalVM;\n\nfunction initVM(context: CompileTimeCompilationContext): VmInitCallback {\n  return (runtime, state, builder) => new VM(runtime, state, builder, context);\n}\n","import type {\n  CompilableProgram,\n  CompileTimeCompilationContext,\n  ComponentDefinitionState,\n  DynamicScope,\n  ElementBuilder,\n  Environment,\n  Owner,\n  RenderResult,\n  RichIteratorResult,\n  RuntimeContext,\n  TemplateIterator,\n} from '@glimmer/interfaces';\nimport type { Reference } from '@glimmer/reference';\nimport { childRefFor, createConstRef } from '@glimmer/reference';\nimport { expect, unwrapHandle } from '@glimmer/util';\nimport { debug } from '@glimmer/validator';\n\nimport type { InternalVM } from './vm/append';\n\nimport { inTransaction } from './environment';\nimport { DynamicScopeImpl } from './scope';\nimport { ARGS, CONSTANTS } from './symbols';\nimport { VM } from './vm/append';\n\nclass TemplateIteratorImpl implements TemplateIterator {\n  constructor(private vm: InternalVM) {}\n  next(): RichIteratorResult<null, RenderResult> {\n    return this.vm.next();\n  }\n\n  sync(): RenderResult {\n    if (import.meta.env.DEV) {\n      return debug.runInTrackingTransaction!(() => this.vm.execute(), '- While rendering:');\n    } else {\n      return this.vm.execute();\n    }\n  }\n}\n\nexport function renderSync(env: Environment, iterator: TemplateIterator): RenderResult {\n  let result: RenderResult;\n\n  inTransaction(env, () => (result = iterator.sync()));\n\n  return result!;\n}\n\nexport function renderMain(\n  runtime: RuntimeContext,\n  context: CompileTimeCompilationContext,\n  owner: Owner,\n  self: Reference,\n  treeBuilder: ElementBuilder,\n  layout: CompilableProgram,\n  dynamicScope: DynamicScope = new DynamicScopeImpl()\n): TemplateIterator {\n  let handle = unwrapHandle(layout.compile(context));\n  let numSymbols = layout.symbolTable.symbols.length;\n  let vm = VM.initial(runtime, context, {\n    self,\n    dynamicScope,\n    treeBuilder,\n    handle,\n    numSymbols,\n    owner,\n  });\n  return new TemplateIteratorImpl(vm);\n}\n\nfunction renderInvocation(\n  vm: InternalVM,\n  context: CompileTimeCompilationContext,\n  owner: Owner,\n  definition: ComponentDefinitionState,\n  args: Record<string, Reference>\n): TemplateIterator {\n  // Get a list of tuples of argument names and references, like\n  // [['title', reference], ['name', reference]]\n  const argList = Object.keys(args).map((key) => [key, args[key]] as const);\n\n  const blockNames = ['main', 'else', 'attrs'];\n  // Prefix argument names with `@` symbol\n  const argNames = argList.map(([name]) => `@${name}`);\n\n  let reified = vm[CONSTANTS].component(definition, owner);\n\n  vm.pushFrame();\n\n  // Push blocks on to the stack, three stack values per block\n  for (let i = 0; i < 3 * blockNames.length; i++) {\n    vm.stack.push(null);\n  }\n\n  vm.stack.push(null);\n\n  // For each argument, push its backing reference on to the stack\n  argList.forEach(([, reference]) => {\n    vm.stack.push(reference);\n  });\n\n  // Configure VM based on blocks and args just pushed on to the stack.\n  vm[ARGS].setup(vm.stack, argNames, blockNames, 0, true);\n\n  const compilable = expect(\n    reified.compilable,\n    'BUG: Expected the root component rendered with renderComponent to have an associated template, set with setComponentTemplate'\n  );\n  const layoutHandle = unwrapHandle(compilable.compile(context));\n  const invocation = { handle: layoutHandle, symbolTable: compilable.symbolTable };\n\n  // Needed for the Op.Main opcode: arguments, component invocation object, and\n  // component definition.\n  vm.stack.push(vm[ARGS]);\n  vm.stack.push(invocation);\n  vm.stack.push(reified);\n\n  return new TemplateIteratorImpl(vm);\n}\n\nexport function renderComponent(\n  runtime: RuntimeContext,\n  treeBuilder: ElementBuilder,\n  context: CompileTimeCompilationContext,\n  owner: Owner,\n  definition: ComponentDefinitionState,\n  args: Record<string, unknown> = {},\n  dynamicScope: DynamicScope = new DynamicScopeImpl()\n): TemplateIterator {\n  let vm = VM.empty(\n    runtime,\n    { treeBuilder, handle: context.stdlib.main, dynamicScope, owner },\n    context\n  );\n  return renderInvocation(vm, context, owner, definition, recordToReference(args));\n}\n\nfunction recordToReference(record: Record<string, unknown>): Record<string, Reference> {\n  const root = createConstRef(record, 'args');\n\n  return Object.keys(record).reduce(\n    (acc, key) => {\n      acc[key] = childRefFor(root, key);\n      return acc;\n    },\n    {} as Record<string, Reference>\n  );\n}\n","import type {\n  AttrNamespace,\n  Bounds,\n  ElementBuilder,\n  Environment,\n  Maybe,\n  Nullable,\n  SimpleAttr,\n  SimpleComment,\n  SimpleElement,\n  SimpleNode,\n  SimpleText,\n} from '@glimmer/interfaces';\nimport type { Stack } from '@glimmer/util';\nimport { assert, castToBrowser, castToSimple, COMMENT_NODE, expect, NS_SVG } from '@glimmer/util';\n\nimport { ConcreteBounds, CursorImpl } from '../bounds';\nimport { CURSOR_STACK, NewElementBuilder, RemoteLiveBlock } from './element-builder';\n\nexport const SERIALIZATION_FIRST_NODE_STRING = '%+b:0%';\n\nexport function isSerializationFirstNode(node: SimpleNode): boolean {\n  return node.nodeValue === SERIALIZATION_FIRST_NODE_STRING;\n}\n\nexport class RehydratingCursor extends CursorImpl {\n  candidate: Nullable<SimpleNode> = null;\n  openBlockDepth: number;\n  injectedOmittedNode = false;\n  constructor(\n    element: SimpleElement,\n    nextSibling: Nullable<SimpleNode>,\n    public readonly startingBlockDepth: number\n  ) {\n    super(element, nextSibling);\n    this.openBlockDepth = startingBlockDepth - 1;\n  }\n}\n\nexport class RehydrateBuilder extends NewElementBuilder implements ElementBuilder {\n  private unmatchedAttributes: Nullable<SimpleAttr[]> = null;\n  declare [CURSOR_STACK]: Stack<RehydratingCursor>; // Hides property on base class\n  blockDepth = 0;\n  startingBlockOffset: number;\n\n  constructor(env: Environment, parentNode: SimpleElement, nextSibling: Nullable<SimpleNode>) {\n    super(env, parentNode, nextSibling);\n    if (nextSibling) throw new Error('Rehydration with nextSibling not supported');\n\n    let node = this.currentCursor!.element.firstChild;\n\n    while (node !== null) {\n      if (isOpenBlock(node)) {\n        break;\n      }\n      node = node.nextSibling;\n    }\n\n    assert(node, 'Must have opening comment for rehydration.');\n    this.candidate = node;\n    const startingBlockOffset = getBlockDepth(node);\n    if (startingBlockOffset !== 0) {\n      // We are rehydrating from a partial tree and not the root component\n      // We need to add an extra block before the first block to rehydrate correctly\n      // The extra block is needed since the renderComponent API creates a synthetic component invocation which generates the extra block\n      const newBlockDepth = startingBlockOffset - 1;\n      const newCandidate = this.dom.createComment(`%+b:${newBlockDepth}%`);\n\n      node.parentNode!.insertBefore(newCandidate, this.candidate);\n      let closingNode = node.nextSibling;\n      while (closingNode !== null) {\n        if (isCloseBlock(closingNode) && getBlockDepth(closingNode) === startingBlockOffset) {\n          break;\n        }\n        closingNode = closingNode.nextSibling;\n      }\n\n      assert(closingNode, 'Must have closing comment for starting block comment');\n      const newClosingBlock = this.dom.createComment(`%-b:${newBlockDepth}%`);\n      node.parentNode!.insertBefore(newClosingBlock, closingNode.nextSibling);\n      this.candidate = newCandidate;\n      this.startingBlockOffset = newBlockDepth;\n    } else {\n      this.startingBlockOffset = 0;\n    }\n  }\n\n  get currentCursor(): Nullable<RehydratingCursor> {\n    return this[CURSOR_STACK].current;\n  }\n\n  get candidate(): Nullable<SimpleNode> {\n    if (this.currentCursor) {\n      return this.currentCursor.candidate!;\n    }\n\n    return null;\n  }\n\n  set candidate(node: Nullable<SimpleNode>) {\n    const currentCursor = this.currentCursor!;\n\n    currentCursor.candidate = node;\n  }\n\n  disableRehydration(nextSibling: Nullable<SimpleNode>) {\n    const currentCursor = this.currentCursor!;\n\n    // rehydration will be disabled until we either:\n    // * hit popElement (and return to using the parent elements cursor)\n    // * hit closeBlock and the next sibling is a close block comment\n    //   matching the expected openBlockDepth\n    currentCursor.candidate = null;\n    currentCursor.nextSibling = nextSibling;\n  }\n\n  enableRehydration(candidate: Nullable<SimpleNode>) {\n    const currentCursor = this.currentCursor!;\n\n    currentCursor.candidate = candidate;\n    currentCursor.nextSibling = null;\n  }\n\n  override pushElement(\n    /** called from parent constructor before we initialize this */\n    this:\n      | RehydrateBuilder\n      | (NewElementBuilder & Partial<Pick<RehydrateBuilder, 'blockDepth' | 'candidate'>>),\n    element: SimpleElement,\n    nextSibling: Maybe<SimpleNode> = null\n  ) {\n    const cursor = new RehydratingCursor(element, nextSibling, this.blockDepth || 0);\n\n    /**\n     * <div>   <---------------  currentCursor.element\n     *   <!--%+b:1%--> <-------  would have been removed during openBlock\n     *   <div> <---------------  currentCursor.candidate -> cursor.element\n     *     <!--%+b:2%--> <-----  currentCursor.candidate.firstChild -> cursor.candidate\n     *     Foo\n     *     <!--%-b:2%-->\n     *   </div>\n     *   <!--%-b:1%-->  <------  becomes currentCursor.candidate\n     */\n    if (this.candidate !== null) {\n      cursor.candidate = element.firstChild;\n      this.candidate = element.nextSibling;\n    }\n\n    this[CURSOR_STACK].push(cursor);\n  }\n\n  // clears until the end of the current container\n  // either the current open block or higher\n  private clearMismatch(candidate: SimpleNode) {\n    let current: Nullable<SimpleNode> = candidate;\n    const currentCursor = this.currentCursor;\n    if (currentCursor !== null) {\n      const openBlockDepth = currentCursor.openBlockDepth;\n      if (openBlockDepth >= currentCursor.startingBlockDepth) {\n        while (current) {\n          if (isCloseBlock(current)) {\n            const closeBlockDepth = getBlockDepthWithOffset(current, this.startingBlockOffset);\n            if (openBlockDepth >= closeBlockDepth) {\n              break;\n            }\n          }\n          current = this.remove(current);\n        }\n      } else {\n        while (current !== null) {\n          current = this.remove(current);\n        }\n      }\n      // current cursor parentNode should be openCandidate if element\n      // or openCandidate.parentNode if comment\n      this.disableRehydration(current);\n    }\n  }\n\n  override __openBlock(): void {\n    const { currentCursor } = this;\n    if (currentCursor === null) return;\n\n    const blockDepth = this.blockDepth;\n\n    this.blockDepth++;\n\n    const { candidate } = currentCursor;\n    if (candidate === null) return;\n\n    const { tagName } = currentCursor.element;\n\n    if (\n      isOpenBlock(candidate) &&\n      getBlockDepthWithOffset(candidate, this.startingBlockOffset) === blockDepth\n    ) {\n      this.candidate = this.remove(candidate);\n      currentCursor.openBlockDepth = blockDepth;\n    } else if (tagName !== 'TITLE' && tagName !== 'SCRIPT' && tagName !== 'STYLE') {\n      this.clearMismatch(candidate);\n    }\n  }\n\n  override __closeBlock(): void {\n    const { currentCursor } = this;\n    if (currentCursor === null) return;\n\n    // openBlock is the last rehydrated open block\n    const openBlockDepth = currentCursor.openBlockDepth;\n\n    // this currently is the expected next open block depth\n    this.blockDepth--;\n\n    const { candidate } = currentCursor;\n\n    let isRehydrating = false;\n\n    if (candidate !== null) {\n      isRehydrating = true;\n      //assert(\n      //  openBlockDepth === this.blockDepth,\n      //  'when rehydrating, openBlockDepth should match this.blockDepth here'\n      //);\n\n      if (\n        isCloseBlock(candidate) &&\n        getBlockDepthWithOffset(candidate, this.startingBlockOffset) === openBlockDepth\n      ) {\n        const nextSibling = this.remove(candidate);\n        this.candidate = nextSibling;\n        currentCursor.openBlockDepth--;\n      } else {\n        // close the block and clear mismatch in parent container\n        // we will be either at the end of the element\n        // or at the end of our containing block\n        this.clearMismatch(candidate);\n        isRehydrating = false;\n      }\n    }\n\n    if (isRehydrating === false) {\n      // check if nextSibling matches our expected close block\n      // if so, we remove the close block comment and\n      // restore rehydration after clearMismatch disabled\n      const nextSibling = currentCursor.nextSibling;\n      if (\n        nextSibling !== null &&\n        isCloseBlock(nextSibling) &&\n        getBlockDepthWithOffset(nextSibling, this.startingBlockOffset) === this.blockDepth\n      ) {\n        // restore rehydration state\n        const candidate = this.remove(nextSibling);\n        this.enableRehydration(candidate);\n\n        currentCursor.openBlockDepth--;\n      }\n    }\n  }\n\n  override __appendNode(node: SimpleNode): SimpleNode {\n    const { candidate } = this;\n\n    // This code path is only used when inserting precisely one node. It needs more\n    // comparison logic, but we can probably lean on the cases where this code path\n    // is actually used.\n    if (candidate) {\n      return candidate;\n    } else {\n      return super.__appendNode(node);\n    }\n  }\n\n  override __appendHTML(html: string): Bounds {\n    const candidateBounds = this.markerBounds();\n\n    if (candidateBounds) {\n      const first = candidateBounds.firstNode()!;\n      const last = candidateBounds.lastNode()!;\n\n      const newBounds = new ConcreteBounds(this.element, first.nextSibling!, last.previousSibling!);\n\n      const possibleEmptyMarker = this.remove(first);\n      this.remove(last);\n\n      if (possibleEmptyMarker !== null && isEmpty(possibleEmptyMarker)) {\n        this.candidate = this.remove(possibleEmptyMarker);\n\n        if (this.candidate !== null) {\n          this.clearMismatch(this.candidate);\n        }\n      }\n\n      return newBounds;\n    } else {\n      return super.__appendHTML(html);\n    }\n  }\n\n  protected remove(node: SimpleNode): Nullable<SimpleNode> {\n    const element = expect(node.parentNode, `cannot remove a detached node`) as SimpleElement;\n    const next = node.nextSibling;\n    element.removeChild(node);\n    return next;\n  }\n\n  private markerBounds(): Nullable<Bounds> {\n    const _candidate = this.candidate;\n\n    if (_candidate && isMarker(_candidate)) {\n      const first = _candidate;\n      let last = expect(first.nextSibling, `BUG: serialization markers must be paired`);\n\n      while (last && !isMarker(last)) {\n        last = expect(last.nextSibling, `BUG: serialization markers must be paired`);\n      }\n\n      return new ConcreteBounds(this.element, first, last);\n    } else {\n      return null;\n    }\n  }\n\n  override __appendText(string: string): SimpleText {\n    const { candidate } = this;\n\n    if (candidate) {\n      if (isTextNode(candidate)) {\n        if (candidate.nodeValue !== string) {\n          candidate.nodeValue = string;\n        }\n        this.candidate = candidate.nextSibling;\n\n        return candidate;\n      } else if (isSeparator(candidate)) {\n        this.candidate = this.remove(candidate);\n\n        return this.__appendText(string);\n      } else if (isEmpty(candidate) && string === '') {\n        this.candidate = this.remove(candidate);\n\n        return this.__appendText(string);\n      } else {\n        this.clearMismatch(candidate);\n\n        return super.__appendText(string);\n      }\n    } else {\n      return super.__appendText(string);\n    }\n  }\n\n  override __appendComment(string: string): SimpleComment {\n    const _candidate = this.candidate;\n    if (_candidate && isComment(_candidate)) {\n      if (_candidate.nodeValue !== string) {\n        _candidate.nodeValue = string;\n      }\n\n      this.candidate = _candidate.nextSibling;\n      return _candidate;\n    } else if (_candidate) {\n      this.clearMismatch(_candidate);\n    }\n\n    return super.__appendComment(string);\n  }\n\n  override __openElement(tag: string): SimpleElement {\n    const _candidate = this.candidate;\n\n    if (_candidate && isElement(_candidate) && isSameNodeType(_candidate, tag)) {\n      this.unmatchedAttributes = [].slice.call(_candidate.attributes);\n      return _candidate;\n    } else if (_candidate) {\n      if (isElement(_candidate) && _candidate.tagName === 'TBODY') {\n        this.pushElement(_candidate, null);\n        this.currentCursor!.injectedOmittedNode = true;\n        return this.__openElement(tag);\n      }\n      this.clearMismatch(_candidate);\n    }\n\n    return super.__openElement(tag);\n  }\n\n  override __setAttribute(name: string, value: string, namespace: Nullable<AttrNamespace>): void {\n    const unmatched = this.unmatchedAttributes;\n\n    if (unmatched) {\n      const attr = findByName(unmatched, name);\n      if (attr) {\n        if (attr.value !== value) {\n          attr.value = value;\n        }\n        unmatched.splice(unmatched.indexOf(attr), 1);\n        return;\n      }\n    }\n\n    return super.__setAttribute(name, value, namespace);\n  }\n\n  override __setProperty(name: string, value: string): void {\n    const unmatched = this.unmatchedAttributes;\n\n    if (unmatched) {\n      const attr = findByName(unmatched, name);\n      if (attr) {\n        if (attr.value !== value) {\n          attr.value = value;\n        }\n        unmatched.splice(unmatched.indexOf(attr), 1);\n        return;\n      }\n    }\n\n    return super.__setProperty(name, value);\n  }\n\n  override __flushElement(parent: SimpleElement, constructing: SimpleElement): void {\n    const { unmatchedAttributes: unmatched } = this;\n    if (unmatched) {\n      for (const attr of unmatched) {\n        this.constructing!.removeAttribute(attr.name);\n      }\n      this.unmatchedAttributes = null;\n    } else {\n      super.__flushElement(parent, constructing);\n    }\n  }\n\n  override willCloseElement() {\n    const { candidate, currentCursor } = this;\n\n    if (candidate !== null) {\n      this.clearMismatch(candidate);\n    }\n\n    if (currentCursor && currentCursor.injectedOmittedNode) {\n      this.popElement();\n    }\n\n    super.willCloseElement();\n  }\n\n  getMarker(element: HTMLElement, guid: string): Nullable<SimpleNode> {\n    const marker = element.querySelector(`script[glmr=\"${guid}\"]`);\n    if (marker) {\n      return castToSimple(marker);\n    }\n    return null;\n  }\n\n  override __pushRemoteElement(\n    element: SimpleElement,\n    cursorId: string,\n    insertBefore: Maybe<SimpleNode>\n  ): Nullable<RemoteLiveBlock> {\n    const marker = this.getMarker(castToBrowser(element, 'HTML'), cursorId);\n\n    assert(\n      !marker || marker.parentNode === element,\n      `expected remote element marker's parent node to match remote element`\n    );\n\n    // when insertBefore is not present, we clear the element\n    if (insertBefore === undefined) {\n      while (element.firstChild !== null && element.firstChild !== marker) {\n        this.remove(element.firstChild);\n      }\n      insertBefore = null;\n    }\n\n    const cursor = new RehydratingCursor(element, null, this.blockDepth);\n    this[CURSOR_STACK].push(cursor);\n\n    if (marker === null) {\n      this.disableRehydration(insertBefore);\n    } else {\n      this.candidate = this.remove(marker);\n    }\n\n    const block = new RemoteLiveBlock(element);\n    return this.pushLiveBlock(block, true);\n  }\n\n  override didAppendBounds(bounds: Bounds): Bounds {\n    super.didAppendBounds(bounds);\n    if (this.candidate) {\n      const last = bounds.lastNode();\n      this.candidate = last && last.nextSibling;\n    }\n    return bounds;\n  }\n}\n\nfunction isTextNode(node: SimpleNode): node is SimpleText {\n  return node.nodeType === 3;\n}\n\nfunction isComment(node: SimpleNode): node is SimpleComment {\n  return node.nodeType === 8;\n}\n\nfunction isOpenBlock(node: SimpleNode): node is SimpleComment {\n  return node.nodeType === COMMENT_NODE && node.nodeValue.lastIndexOf('%+b:', 0) === 0;\n}\n\nfunction isCloseBlock(node: SimpleNode): node is SimpleComment {\n  return node.nodeType === COMMENT_NODE && node.nodeValue.lastIndexOf('%-b:', 0) === 0;\n}\n\nfunction getBlockDepth(node: SimpleComment): number {\n  return parseInt(node.nodeValue.slice(4), 10);\n}\n\nfunction getBlockDepthWithOffset(node: SimpleComment, offset: number): number {\n  return getBlockDepth(node) - offset;\n}\n\nfunction isElement(node: SimpleNode): node is SimpleElement {\n  return node.nodeType === 1;\n}\n\nfunction isMarker(node: SimpleNode): boolean {\n  return node.nodeType === 8 && node.nodeValue === '%glmr%';\n}\n\nfunction isSeparator(node: SimpleNode): boolean {\n  return node.nodeType === 8 && node.nodeValue === '%|%';\n}\n\nfunction isEmpty(node: SimpleNode): boolean {\n  return node.nodeType === 8 && node.nodeValue === '% %';\n}\n\nfunction isSameNodeType(candidate: SimpleElement, tag: string) {\n  if (candidate.namespaceURI === NS_SVG) {\n    return candidate.tagName === tag;\n  }\n  return candidate.tagName === tag.toUpperCase();\n}\n\nfunction findByName(array: SimpleAttr[], name: string): SimpleAttr | undefined {\n  for (const attr of array) {\n    if (attr.name === name) return attr;\n  }\n\n  return undefined;\n}\n\nexport function rehydrationBuilder(env: Environment, cursor: CursorImpl): ElementBuilder {\n  return RehydrateBuilder.forInitialRender(env, cursor);\n}\n"],"names":["LOCAL_DEBUG","window","location","test","search","LOCAL_SHOULD_LOG","DynamicScopeImpl","bucket","constructor","this","assign","get","key","unwrap","set","reference","child","PartialScopeImpl","root","self","size","owner","refs","Array","fill","UNDEFINED_REFERENCE","init","sized","slots","callerScope","evalScope","partialMap","getSelf","getSymbol","symbol","getBlock","block","getEvalScope","getPartialMap","bind","value","bindSelf","bindSymbol","bindBlock","bindEvalScope","map","bindPartialMap","bindCallerScope","scope","getCallerScope","slice","index","length","RangeError","INNER_VM","Symbol","DESTROYABLE_STACK","STACKS","REGISTERS","HEAP","CONSTANTS","ARGS","CursorImpl","element","nextSibling","ConcreteBounds","parentNode","first","last","parentElement","firstNode","lastNode","move","bounds","parent","current","next","insertBefore","expect","clear","removeChild","normalizeStringValue","isEmpty","String","toString","isSafeString","toHTML","isNode","nodeType","isString","normalizeProperty","slotName","type","normalized","lower","toLowerCase","tagName","propName","tag","ATTR_OVERRIDES","toUpperCase","preferAttr","INPUT","form","autocorrect","list","SELECT","OPTION","TEXTAREA","LABEL","FIELDSET","LEGEND","OBJECT","OUTPUT","BUTTON","badProtocols","badTags","badTagsForDataURI","badAttributes","badAttributesForDataURI","has","array","item","indexOf","checkURI","attribute","checkDataURI","requiresSanitization","_protocolForUrlImplementation","DebugStyleAttributeManager","protocolForUrl","url","URL","parse","nodeURL","protocol","_url","error","Error","findProtocolForURL","sanitizeAttributeValue","str","dynamicAttribute","attr","namespace","isTrusting","namespaceURI","name","NS_SVG","buildDynamicAttribute","SafeDynamicProperty","isUserInputValue","InputValueDynamicAttribute","isOptionSelected","OptionSelectedDynamicAttribute","DefaultDynamicProperty","buildDynamicProperty","SafeDynamicAttribute","SimpleDynamicAttribute","DynamicAttribute","dom","_env","normalizedValue","normalizeValue","__setAttribute","update","removeAttribute","setAttribute","normalizedName","super","__setProperty","removeAttributeNS","env","sanitized","input","castToBrowser","currentValue","option","selected","warnIfStyleNotTrusted","First","node","Last","CURSOR_STACK","NewElementBuilder","updateOperations","constructing","operations","Stack","modifierStack","blockStack","forInitialRender","cursor","initialize","resume","stack","reset","pushLiveBlock","pushElement","getAppendOperations","getDOM","pushSimpleBlock","debugBlocks","toArray","hasBlocks","popElement","pop","SimpleLiveBlock","pushUpdatableBlock","UpdatableBlockImpl","pushBlockList","LiveBlockList","isRemote","didAppendBounds","__openBlock","push","popBlock","finalize","__closeBlock","openElement","__openElement","createElement","flushElement","modifiers","__flushElement","pushModifiers","didOpenElement","closeElement","willCloseElement","popModifiers","pushRemoteElement","guid","__pushRemoteElement","_guid","undefined","lastChild","RemoteLiveBlock","popRemoteElement","didAppendNode","appendText","string","__appendText","text","createTextNode","__appendNode","__appendFragment","fragment","firstChild","ret","comment","__appendComment","__appendHTML","html","insertHTMLBefore","appendDynamicHTML","trustedContent","appendDynamicText","untrustedContent","appendDynamicFragment","appendDynamicNode","appendComment","createComment","setStaticAttribute","setDynamicAttribute","trusting","nesting","registerDestructor","destroy","boundList","_element","assert","_node","_bounds","_stack","clientBuilder","APPEND_OPCODES","evaluateOpcode","Op","Size","add","evaluate","kind","syscall","debugBefore","vm","opcode","params","opName","sp","pos","fetchRegister","$pc","debug","isMachine","LOCAL_LOGGER","log","logOpcode","debugParams","prop","fetchValue","$sp","recordStackSize","pc","state","debugAfter","pre","meta","opcodeMetadata","actualChange","check","stackChange","registers","$ra","$fp","elements","s","isArray","isScopeReference","valueForRef","operation","TYPE","INNER","OWNER","RESOLVED","CURRIED_VALUES","WeakSet","isCurriedValue","isCurriedType","CurriedValue","inner","args","resolved","resolveCurriedValue","curriedValue","positional","named","definition","currentWrapper","curriedArgs","curriedNamed","curriedPositional","concat","unshift","curry","spec","hasCustomDebugRenderTreeLifecycle","manager","ChildScope","pushChildScope","PopScope","popScope","PushDynamicScope","pushDynamicScope","PopDynamicScope","popDynamicScope","Constant","op1","other","getValue","decodeHandle","ConstantReference","createConstRef","Primitive","primitive","isHandle","decodeImmediate","PrimitiveReference","ref","CheckPrimitive","NULL_REFERENCE","TRUE_REFERENCE","FALSE_REFERENCE","createPrimitiveRef","Dup","register","op2","offset","position","CheckNumber","dup","Pop","count","Load","load","Fetch","fetch","BindDynamicScope","_names","names","getArray","bindDynamicScope","Enter","enter","Exit","exit","PushSymbolTable","_table","PushBlockScope","CompileBlock","compile","InvokeYield","handle","CheckOption","CheckHandle","CheckScope","table","CheckBlockSymbolTable","parameters","CheckInstanceof","VMArgumentsImpl","pushFrame","pushScope","invokingScope","locals","localsCount","i","at","call","JumpIf","target","CheckReference","Boolean","isConstRef","goto","updateWith","Assert","JumpUnless","JumpEq","comparison","peek","AssertSame","ToBoolean","valueRef","createComputeRef","toBool","throw","AssertFilter","filter","JumpIfNotModifiedOpcode","CONSTANT_TAG","lastRevision","INITIAL","didModify","alwaysRevalidate","validateTag","consumeTag","valueForTag","BeginTrackFrameOpcode","debugLabel","beginTrackFrame","EndTrackFrameOpcode","endTrackFrame","Text","Comment","OpenElement","OpenDynamicElement","CheckString","PushRemoteElement","elementRef","insertBeforeRef","guidRef","CheckElement","CheckMaybe","CheckNode","associateDestroyable","PopRemoteElement","FlushElement","$t0","CheckOperations","flush","loadValue","CloseElement","forEach","modifier","scheduleInstallModifier","d","getDestroyable","Modifier","isInteractive","getOwner","CheckArguments","create","capture","instance","addModifier","getTag","UpdateModifierOpcode","DynamicModifier","initialOwner","instanceRef","hostDefinition","isObject","CurriedTypes","resolvedDefinition","curriedOwner","getInternalModifierManager","debugToString","resolvedName","UpdateDynamicModifierOpcode","lastUpdated","scheduleUpdateModifier","CURRENT_TAG","newInstance","destroyable","associateDestroyableChild","StaticAttr","_name","_value","op3","_namespace","DynamicAttr","_trusting","UpdateDynamicAttributeOpcode","updateRef","initialized","PushComponentDefinition","capabilities","lookup","ResolveDynamicComponent","_isStrict","component","CheckOr","CheckCurriedComponentDefinition","constants","isStrict","$t1","resolver","lookupComponent","resolvedComponent","resolveComponent","runtime","ResolveCurriedComponent","PushDynamicComponentInstance","PushArgs","_blockNames","flags","positionalCount","atNames","blockNames","EMPTY_STRING_ARRAY","setup","PushEmptyArgs","empty","CaptureArgs","capturedArgs","PrepareArgs","_state","Component","resolvedValue","merge","realloc","prepend","managerHasCapability","InternalComponentCapabilities","prepareArgs","blocks","values","preparedArgs","Object","keys","CreateComponent","CheckComponentInstance","createInstance","dynamicScope","hasDefaultBlock","createArgs","createCaller","updateHook","UpdateComponentOpcode","RegisterComponentDestructor","willDestroy","BeginComponentTransaction","getDebugName","beginCacheGroup","PutComponentOperations","ComponentElementOperations","ComponentAttr","StaticComponentAttr","attributes","dict","classes","deferred","setDeferredAttr","mergeClasses","every","c","allStringClasses","join","symbolName","blockName","symbols","DidCreateElement","didCreateElement","GetComponentSelf","selfRef","debugRenderTree","moduleName","compilable","dynamicLayout","getDynamicLayout","getDebugCustomRenderTree","DebugRenderTreeUpdateOpcode","template","GetComponentTagName","getTagName","GetComponentLayout","wrapped","unwrapTemplate","defaultTemplate","asWrappedLayout","asLayout","context","symbolTable","Main","CheckComponentDefinition","invocation","CheckInvocation","PopulateLayout","CheckProgramSymbolTable","VirtualRootScope","CheckFinishedComponentInstance","hasSubOwner","pushRootScope","SetupForEval","hasEval","SetNamedVariables","callerNames","atName","SetBlocks","enumerate","symbolNames","InvokeComponentLayout","DidRenderLayout","EMPTY_ARGS","reverse","didRender","DebugRenderTreeDidRenderOpcode","CheckInterface","didRenderLayout","CheckFunction","didCreate","DidUpdateLayoutOpcode","CommitComponentTransaction","commitCacheGroup","_vm","didUpdateLayout","didUpdate","COMPUTE","wrap","validate","REFERENCE","expected","CheckIterator","CheckHelper","CheckUndefinedReference","CheckCapturedArguments","CheckArray","CheckDict","CheckComponentManager","getCapabilities","CheckCapabilities","CheckUnknown","CheckObject","CheckCompilableBlock","CheckCompilableProgram","CheckScopeBlock","PositionalArgumentsImpl","NamedArgumentsImpl","BlockArgumentsImpl","base","namedCount","namedBase","positionalBase","blocksCount","blocksBase","newBase","copy","EMPTY_POSITIONAL","EMPTY_NAMED","EMPTY_REFERENCES","emptyArray","_references","references","additions","_atNames","toSyntheticName","toAtName","idx","createDebugAliasRef","newNames","toSymbolName","EMPTY_BLOCK_VALUES","internalValues","_symbolNames","internalTag","CapturedBlockArgumentsImpl","createCapturedArgs","reifyNamed","reified","entries","reifyPositional","reifyArgs","freeze","castToString","resolveHelper","helper","managerOrHelper","getInternalHelperManager","getHelper","isUndefinedReference","Curry","$v0","lastValue","curriedDefinition","createCurryRef","DynamicHelper","helperRef","helperInstanceRef","Helper","resolvedDef","_hasDestroyableChildren","helperValueRef","GetVariable","expr","referenceForSymbol","SetVariable","SetBlock","ResolveMaybeLocal","childRefFor","RootScope","GetProperty","_key","GetBlock","_block","SpreadBlock","handleOrCompilable","HasBlock","HasBlockParams","hasBlockParams","Concat","out","partsRefs","parts","IfInline","condition","truthy","falsy","Not","GetDynamicVar","nameRef","Log","console","DynamicTextContent","nodeValue","toContentType","shouldCoerce","ContentType","CurriedType","hasInternalComponentManager","hasInternalHelperManager","SafeString","isFragment","Fragment","Node","toDynamicContentType","debugCallback","info","DynamicContentType","AppendHTML","rawValue","AppendSafeHTML","CheckSafeString","AppendText","AppendDocumentFragment","CheckDocumentFragment","AppendNode","callback","setDebuggerCallback","cb","resetDebuggerCallback","ScopeInspector","debugInfo","slot","path","split","head","tail","reduce","r","part","Debugger","_symbols","_debugInfo","inspector","EnterList","relativeStart","elseTarget","listRef","keyRef","keyValue","iteratorRef","createIteratorRef","iterator","enterList","ExitList","exitList","Iterate","breaks","registerItem","enterItem","CAPABILITIES","dynamicTag","attributeHook","elementHook","TemplateOnlyComponentManager","TEMPLATE_ONLY_COMPONENT_MANAGER","TemplateOnlyComponentDefinition","templateOnlyComponent","setInternalComponentManager","prototype","SVG_INTEGRATION_POINTS","foreignObject","desc","title","BLACKLIST_TABLE","DOMOperations","document","setupUselessElement","uselessElement","isElementInSVGNamespace","isHTMLIntegrationPoint","createElementNS","prev","previousSibling","insertAdjacentHTML","INSERT_BEFORE_END","HTMLElement","INSERT_BEFORE_BEGIN","data","applySVGInnerHTMLFix","DOMClass","svgNamespace","svg","e","childNodes","shouldApplyFix","div","source","wrappedHtml","clearElement","INSERT_AFTER_BEGIN","moveNodesBefore","fixSVG","applyTextNodeMergingFix","mergingTextDiv","appendChild","uselessComment","didSetUselessComment","nextPrevious","doc","castToSimple","appliedTreeConstruction","setAttributeNS","DOMTreeConstruction","WHITESPACE","isWhitespace","DOMChangesImpl","insertAfter","DOMChanges","GUID","Ref","id","release","label","DebugRenderTreeImpl","WeakMap","roots","Set","nodes","begin","internalNode","nodeFor","commit","captureRefs","delete","captured","captureNode","captureTemplate","captureBounds","children","TRANSACTION","TransactionImpl","scheduledInstallModifiers","scheduledUpdateModifiers","createdComponents","updatedComponents","modifierTag","track","install","updateTag","EnvironmentImpl","options","delegate","enableDebugTooling","DebugRenderTree","appendOperations","transaction","onTransactionCommit","runtimeContext","artifacts","program","RuntimeProgramImpl","heap","inTransaction","internalHelper","setInternalHelperManager","normalizeTextValue","buildUntouchableThis","fn","callbackRef","assertCallbackIsFn","invocationArgs","isInvokableRef","sourceRef","pathRef","isDict","getPath","setPath","wrapHashProxy","hash","Proxy","deprecate","Map","ARGS_CACHES","getArgs","proxy","SimpleArgsProxy","argsCache","computeArgs","createCache","invokeHelper","internalManager","getDelegateFor","cache","createHelper","hasValue","isDestroying","isDestroyed","hasDestroyable","untouchableContext","OnModifierState","createUpdatableTag","once","passive","shouldUpdate","updateFromArgs","eventName","userProvidedCallbackReference","userProvidedCallback","actual","needsCustomCallback","event","preventDefault","adds","removes","removeEventListener","addEventListener","on","setInternalModifierManager","counters","_owner","LowLevelVM","currentOpSize","externs","loadRegister","setPc","isNaN","popFrame","pushSmallFrame","popSmallFrame","getaddr","returnTo","return","nextStatement","operationSize","evaluateOuter","evaluateInner","evaluateMachine","evaluateSyscall","MachineOp","PushFrame","PopFrame","InvokeStatic","InvokeVirtual","Jump","Return","ReturnTo","UpdatingVM","frameStack","execute","opcodes","handler","hasErrored","runInTrackingTransaction","_execute","resetTracking","try","frame","ops","UpdatingVMFrame","handleException","ResumableVMStateImpl","resumeCallback","builder","BlockOpcode","TryOpcode","destroyChildren","elementStack","updating","result","pushUpdating","drop","ListItemOpcode","retained","memo","updateReferences","shouldRemove","ListBlockOpcode","opcodeMap","marker","lastIterator","iterableRef","initializeChild","sync","itemMap","currentOpcodeIndex","seenIndex","retainItem","itemOpcode","moveItem","seenUnretained","insertItem","deleteItem","logStep","before","currentSibling","moveBounds","exceptionHandler","RenderResultImpl","rerender","EvaluationStackImpl","restore","snapshot","seal","from","to","n","top","start","end","items","Stacks","VM","destructor","ARGS$1","s0","s1","t0","t1","v0","isLowLevelRegister","$s0","$s1","assertGlobalContextWasSet","initVM","evalStack","initial","treeBuilder","numSymbols","vmState","unwrapHandle","captureState","guard","tryOpcode","didEnter","createIteratorItemRef","memoRef","listBlock","addr","popUpdating","tryUpdating","done","TemplateIteratorImpl","renderSync","renderMain","layout","renderComponent","argList","argNames","renderInvocation","stdlib","main","record","acc","recordToReference","SERIALIZATION_FIRST_NODE_STRING","isSerializationFirstNode","RehydratingCursor","candidate","openBlockDepth","injectedOmittedNode","startingBlockDepth","RehydrateBuilder","unmatchedAttributes","blockDepth","startingBlockOffset","currentCursor","isOpenBlock","getBlockDepth","newBlockDepth","newCandidate","closingNode","isCloseBlock","newClosingBlock","disableRehydration","enableRehydration","clearMismatch","getBlockDepthWithOffset","remove","isRehydrating","candidateBounds","markerBounds","newBounds","possibleEmptyMarker","_candidate","isMarker","isSeparator","isElement","isSameNodeType","unmatched","findByName","splice","getMarker","querySelector","cursorId","COMMENT_NODE","lastIndexOf","parseInt","rehydrationBuilder"],"mappings":"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"}