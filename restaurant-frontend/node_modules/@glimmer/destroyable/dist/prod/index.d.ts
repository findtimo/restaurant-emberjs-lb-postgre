import { Destroyable, Destructor } from '@glimmer/interfaces';
declare function associateDestroyableChild<T extends Destroyable>(parent: Destroyable, child: T): T;
declare function registerDestructor<T extends Destroyable>(destroyable: T, destructor: Destructor<T>, eager?: boolean): Destructor<T>;
declare function unregisterDestructor<T extends Destroyable>(destroyable: T, destructor: Destructor<T>, eager?: boolean): void;
declare function destroy(destroyable: Destroyable): void;
declare function destroyChildren(destroyable: Destroyable): void;
declare function _hasDestroyableChildren(destroyable: Destroyable): boolean;
declare function isDestroying(destroyable: Destroyable): boolean;
declare function isDestroyed(destroyable: Destroyable): boolean;
declare let enableDestroyableTracking: undefined | (() => void);
declare let assertDestroyablesDestroyed: undefined | (() => void);
export { associateDestroyableChild, registerDestructor, unregisterDestructor, destroy, destroyChildren, _hasDestroyableChildren, isDestroying, isDestroyed, enableDestroyableTracking, assertDestroyablesDestroyed };
//# sourceMappingURL=index.d.ts.map