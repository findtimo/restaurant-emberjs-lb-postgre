{"version":3,"file":"index.js","sources":["../../lib/source/loc/kinds.ts","../../lib/v2/objects/resolution.ts"],"sourcesContent":["export enum OffsetKind {\n  /**\n   * We have already computed the character position of this offset or span.\n   */\n  CharPosition = 'CharPosition',\n\n  /**\n   * This offset or span was instantiated with a Handlebars SourcePosition or SourceLocation. Its\n   * character position will be computed on demand.\n   */\n  HbsPosition = 'HbsPosition',\n\n  /**\n   * for (rare) situations where a node is created but there was no source location (e.g. the name\n   * \"default\" in default blocks when the word \"default\" never appeared in source). This is used\n   * by the internals when there is a legitimate reason for the internals to synthesize a node\n   * with no location.\n   */\n  InternalsSynthetic = 'InternalsSynthetic',\n  /**\n   * For situations where a node represents zero parts of the source (for example, empty arguments).\n   * In general, we attempt to assign these nodes *some* position (empty arguments can be\n   * positioned immediately after the callee), but it's not always possible\n   */\n  NonExistent = 'NonExistent',\n  /**\n   * For situations where a source location was expected, but it didn't correspond to the node in\n   * the source. This happens if a plugin creates broken locations.\n   */\n  Broken = 'Broken',\n}\n","/**\n * A free variable is resolved according to a resolution rule:\n *\n * 1. Strict resolution\n * 2. Namespaced resolution\n * 3. Fallback resolution\n */\n\nimport type { GetContextualFreeOpcode } from '@glimmer/interfaces';\nimport { SexpOpcodes } from '@glimmer/wire-format';\n\n/**\n * Strict resolution is used:\n *\n * 1. in a strict mode template\n * 2. in an unambiguous invocation with dot paths\n */\nexport const STRICT_RESOLUTION = {\n  resolution: (): GetContextualFreeOpcode => SexpOpcodes.GetStrictKeyword,\n  serialize: (): SerializedResolution => 'Strict',\n  isAngleBracket: false as const,\n};\n\nexport type StrictResolution = typeof STRICT_RESOLUTION;\n\nexport const HTML_RESOLUTION = {\n  ...STRICT_RESOLUTION,\n  isAngleBracket: true as const,\n};\n\nexport type HtmlResolution = typeof HTML_RESOLUTION;\n\nexport function isStrictResolution(value: unknown): value is StrictResolution {\n  return value === STRICT_RESOLUTION;\n}\n\n/**\n * A `LooseModeResolution` includes:\n *\n * - 0 or more namespaces to resolve the variable in\n * - optional fallback behavior\n *\n * In practice, there are a limited number of possible combinations of these degrees of freedom,\n * and they are captured by the `Ambiguity` union below.\n */\nexport class LooseModeResolution {\n  /**\n   * Namespaced resolution is used in an unambiguous syntax position:\n   *\n   * 1. `(sexp)` (namespace: `Helper`)\n   * 2. `{{#block}}` (namespace: `Component`)\n   * 3. `<a {{modifier}}>` (namespace: `Modifier`)\n   * 4. `<Component />` (namespace: `Component`)\n   *\n   * @see {NamespacedAmbiguity}\n   */\n  static namespaced(namespace: FreeVarNamespace, isAngleBracket = false): LooseModeResolution {\n    return new LooseModeResolution(\n      {\n        namespaces: [namespace],\n        fallback: false,\n      },\n      isAngleBracket\n    );\n  }\n\n  /**\n   * Fallback resolution is used when no namespaced resolutions are possible, but fallback\n   * resolution is still allowed.\n   *\n   * ```hbs\n   * {{x.y}}\n   * ```\n   *\n   * @see {FallbackAmbiguity}\n   */\n  static fallback(): LooseModeResolution {\n    return new LooseModeResolution({ namespaces: [], fallback: true });\n  }\n\n  /**\n   * Append resolution is used when the variable should be resolved in both the `component` and\n   * `helper` namespaces. Fallback resolution is optional.\n   *\n   * ```hbs\n   * {{x}}\n   * ```\n   *\n   * ^ `x` should be resolved in the `component` and `helper` namespaces with fallback resolution.\n   *\n   * ```hbs\n   * {{x y}}\n   * ```\n   *\n   * ^ `x` should be resolved in the `component` and `helper` namespaces without fallback\n   * resolution.\n   *\n   * @see {ComponentOrHelperAmbiguity}\n   */\n  static append({ invoke }: { invoke: boolean }): LooseModeResolution {\n    return new LooseModeResolution({\n      namespaces: [FreeVarNamespace.Component, FreeVarNamespace.Helper],\n      fallback: !invoke,\n    });\n  }\n\n  /**\n   * Trusting append resolution is used when the variable should be resolved in both the `component` and\n   * `helper` namespaces. Fallback resolution is optional.\n   *\n   * ```hbs\n   * {{{x}}}\n   * ```\n   *\n   * ^ `x` should be resolved in the `component` and `helper` namespaces with fallback resolution.\n   *\n   * ```hbs\n   * {{{x y}}}\n   * ```\n   *\n   * ^ `x` should be resolved in the `component` and `helper` namespaces without fallback\n   * resolution.\n   *\n   * @see {HelperAmbiguity}\n   */\n  static trustingAppend({ invoke }: { invoke: boolean }): LooseModeResolution {\n    return new LooseModeResolution({\n      namespaces: [FreeVarNamespace.Helper],\n      fallback: !invoke,\n    });\n  }\n\n  /**\n   * Attribute resolution is used when the variable should be resolved as a `helper` with fallback\n   * resolution.\n   *\n   * ```hbs\n   * <a href={{x}} />\n   * <a href=\"{{x}}.html\" />\n   * ```\n   *\n   * ^ resolved in the `helper` namespace with fallback\n   *\n   * @see {HelperAmbiguity}\n   */\n  static attr(): LooseModeResolution {\n    return new LooseModeResolution({ namespaces: [FreeVarNamespace.Helper], fallback: true });\n  }\n\n  constructor(\n    readonly ambiguity: Ambiguity,\n    readonly isAngleBracket = false\n  ) {}\n\n  resolution(): GetContextualFreeOpcode {\n    if (this.ambiguity.namespaces.length === 0) {\n      return SexpOpcodes.GetStrictKeyword;\n    } else if (this.ambiguity.namespaces.length === 1) {\n      if (this.ambiguity.fallback) {\n        // simple namespaced resolution with fallback must be attr={{x}}\n        return SexpOpcodes.GetFreeAsHelperHeadOrThisFallback;\n      } else {\n        // simple namespaced resolution without fallback\n        switch (this.ambiguity.namespaces[0]) {\n          case FreeVarNamespace.Helper:\n            return SexpOpcodes.GetFreeAsHelperHead;\n          case FreeVarNamespace.Modifier:\n            return SexpOpcodes.GetFreeAsModifierHead;\n          case FreeVarNamespace.Component:\n            return SexpOpcodes.GetFreeAsComponentHead;\n        }\n      }\n    } else if (this.ambiguity.fallback) {\n      // component or helper + fallback ({{something}})\n      return SexpOpcodes.GetFreeAsComponentOrHelperHeadOrThisFallback;\n    } else {\n      // component or helper without fallback ({{something something}})\n      return SexpOpcodes.GetFreeAsComponentOrHelperHead;\n    }\n  }\n\n  serialize(): SerializedResolution {\n    if (this.ambiguity.namespaces.length === 0) {\n      return 'Loose';\n    } else if (this.ambiguity.namespaces.length === 1) {\n      if (this.ambiguity.fallback) {\n        // simple namespaced resolution with fallback must be attr={{x}}\n        return ['ambiguous', SerializedAmbiguity.Attr];\n      } else {\n        return ['ns', this.ambiguity.namespaces[0]];\n      }\n    } else if (this.ambiguity.fallback) {\n      // component or helper + fallback ({{something}})\n      return ['ambiguous', SerializedAmbiguity.Append];\n    } else {\n      // component or helper without fallback ({{something something}})\n      return ['ambiguous', SerializedAmbiguity.Invoke];\n    }\n  }\n}\n\nexport const ARGUMENT_RESOLUTION = LooseModeResolution.fallback();\n\nexport enum FreeVarNamespace {\n  Helper = 'Helper',\n  Modifier = 'Modifier',\n  Component = 'Component',\n}\n\nexport const HELPER_NAMESPACE = FreeVarNamespace.Helper;\nexport const MODIFIER_NAMESPACE = FreeVarNamespace.Modifier;\nexport const COMPONENT_NAMESPACE = FreeVarNamespace.Component;\n\n/**\n * A `ComponentOrHelperAmbiguity` might be a component or a helper, with an optional fallback\n *\n * ```hbs\n * {{x}}\n * ```\n *\n * ^ `x` is resolved in the `component` and `helper` namespaces, with fallback\n *\n * ```hbs\n * {{x y}}\n * ```\n *\n * ^ `x` is resolved in the `component` and `helper` namespaces, without fallback\n */\ntype ComponentOrHelperAmbiguity = {\n  namespaces: [FreeVarNamespace.Component, FreeVarNamespace.Helper];\n  fallback: boolean;\n};\n\n/**\n * A `HelperAmbiguity` must be a helper, but it has fallback. If it didn't have fallback, it would\n * be a `NamespacedAmbiguity`.\n *\n * ```hbs\n * <a href={{x}} />\n * <a href=\"{{x}}.html\" />\n * ```\n *\n * ^ `x` is resolved in the `helper` namespace with fallback\n */\ntype HelperAmbiguity = { namespaces: [FreeVarNamespace.Helper]; fallback: boolean };\n\n/**\n * A `NamespacedAmbiguity` must be resolved in a particular namespace, without fallback.\n *\n * ```hbs\n * <X />\n * ```\n *\n * ^ `X` is resolved in the `component` namespace without fallback\n *\n * ```hbs\n * (x)\n * ```\n *\n * ^ `x` is resolved in the `helper` namespace without fallback\n *\n * ```hbs\n * <a {{x}} />\n * ```\n *\n * ^ `x` is resolved in the `modifier` namespace without fallback\n */\ntype NamespacedAmbiguity = {\n  namespaces: [FreeVarNamespace.Component | FreeVarNamespace.Helper | FreeVarNamespace.Modifier];\n  fallback: false;\n};\n\ntype FallbackAmbiguity = {\n  namespaces: [];\n  fallback: true;\n};\n\ntype Ambiguity =\n  | ComponentOrHelperAmbiguity\n  | HelperAmbiguity\n  | NamespacedAmbiguity\n  | FallbackAmbiguity;\n\nexport type FreeVarResolution = StrictResolution | HtmlResolution | LooseModeResolution;\n\n// Serialization\n\nconst enum SerializedAmbiguity {\n  // {{x}}\n  Append = 'Append',\n  // href={{x}}\n  Attr = 'Attr',\n  // {{x y}} (not attr)\n  Invoke = 'Invoke',\n}\n\nexport type SerializedResolution =\n  | 'Strict'\n  | 'Loose'\n  | ['ns', FreeVarNamespace]\n  | ['ambiguous', SerializedAmbiguity];\n\nexport function loadResolution(resolution: SerializedResolution): FreeVarResolution {\n  if (typeof resolution === 'string') {\n    switch (resolution) {\n      case 'Loose':\n        return LooseModeResolution.fallback();\n      case 'Strict':\n        return STRICT_RESOLUTION;\n    }\n  }\n\n  switch (resolution[0]) {\n    case 'ambiguous':\n      switch (resolution[1]) {\n        case SerializedAmbiguity.Append:\n          return LooseModeResolution.append({ invoke: false });\n        case SerializedAmbiguity.Attr:\n          return LooseModeResolution.attr();\n        case SerializedAmbiguity.Invoke:\n          return LooseModeResolution.append({ invoke: true });\n      }\n\n    case 'ns':\n      return LooseModeResolution.namespaced(resolution[1]);\n  }\n}\n"],"names":["OffsetKind"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,IAAAA,UAAA,0BAAAA,UAAA,EAAA;EAAAA,UAAA,CAAA,cAAA,CAAA,GAAA,cAAA,CAAA;EAAAA,UAAA,CAAA,aAAA,CAAA,GAAA,aAAA,CAAA;EAAAA,UAAA,CAAA,oBAAA,CAAA,GAAA,oBAAA,CAAA;EAAAA,UAAA,CAAA,aAAA,CAAA,GAAA,aAAA,CAAA;EAAAA,UAAA,CAAA,QAAA,CAAA,GAAA,QAAA,CAAA;AAAA,EAAA,OAAAA,UAAA,CAAA;AAAA,CAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}