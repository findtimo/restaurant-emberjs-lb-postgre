{"version":3,"file":"index.cjs","sources":["../../lib/array-utils.ts","../../lib/assert.ts","../../lib/intern.ts","../../lib/object-utils.ts"],"sourcesContent":["export const EMPTY_ARRAY: readonly unknown[] = Object.freeze([]) as readonly unknown[];\n\nexport function emptyArray<T>(): T[] {\n  return EMPTY_ARRAY as T[];\n}\n\nexport const EMPTY_STRING_ARRAY = emptyArray<string>();\nexport const EMPTY_NUMBER_ARRAY = emptyArray<number>();\n\n/**\n * This function returns `true` if the input array is the special empty array sentinel,\n * which is sometimes used for optimizations.\n */\nexport function isEmptyArray(input: unknown[] | readonly unknown[]): boolean {\n  return input === EMPTY_ARRAY;\n}\n\nexport function* reverse<T>(input: T[]): IterableIterator<T> {\n  for (let i = input.length - 1; i >= 0; i--) {\n    yield input[i]!;\n  }\n}\n\nexport function* enumerate<T>(input: Iterable<T>): IterableIterator<[number, T]> {\n  let i = 0;\n  for (const item of input) {\n    yield [i++, item];\n  }\n}\n","// import Logger from './logger';\n\nimport { LOCAL_LOGGER } from '../index';\n\n// let alreadyWarned = false;\n\nexport function debugAssert(test: any, msg: string): asserts test {\n  // if (!alreadyWarned) {\n  //   alreadyWarned = true;\n  //   Logger.warn(\"Don't leave debug assertions on in public builds\");\n  // }\n\n  if (!test) {\n    throw new Error(msg || 'assertion failure');\n  }\n}\n\nexport function prodAssert() {}\n\nexport function deprecate(desc: string) {\n  LOCAL_LOGGER.warn(`DEPRECATION: ${desc}`);\n}\n\nexport default debugAssert;\n","/**\n  Strongly hint runtimes to intern the provided string.\n\n  When do I need to use this function?\n\n  For the most part, never. Pre-mature optimization is bad, and often the\n  runtime does exactly what you need it to, and more often the trade-off isn't\n  worth it.\n\n  Why?\n\n  Runtimes store strings in at least 2 different representations:\n  Ropes and Symbols (interned strings). The Rope provides a memory efficient\n  data-structure for strings created from concatenation or some other string\n  manipulation like splitting.\n\n  Unfortunately checking equality of different ropes can be quite costly as\n  runtimes must resort to clever string comparison algorithms. These\n  algorithms typically cost in proportion to the length of the string.\n  Luckily, this is where the Symbols (interned strings) shine. As Symbols are\n  unique by their string content, equality checks can be done by pointer\n  comparison.\n\n  How do I know if my string is a rope or symbol?\n\n  Typically (warning general sweeping statement, but truthy in runtimes at\n  present) static strings created as part of the JS source are interned.\n  Strings often used for comparisons can be interned at runtime if some\n  criteria are met.  One of these criteria can be the size of the entire rope.\n  For example, in chrome 38 a rope longer then 12 characters will not\n  intern, nor will segments of that rope.\n\n  Some numbers: http://jsperf.com/eval-vs-keys/8\n\n  Known Trickâ„¢\n\n  @private\n  @return {String} interned version of the provided string\n*/\nexport default function intern(str: string): string {\n  let obj: Record<string, number> = {};\n  obj[str] = 1;\n  for (let key in obj) {\n    if (key === str) {\n      return key;\n    }\n  }\n  return str;\n}\n","export let assign = Object.assign;\n\nexport function values<T>(obj: { [s: string]: T }): T[] {\n  return Object.values(obj);\n}\n\nexport type ObjectEntry<D extends object> = { [P in keyof D]: [P, D[P]] }[keyof D];\n\nexport function entries<D extends object>(dict: D): ObjectEntry<D>[] {\n  return Object.entries(dict) as ObjectEntry<D>[];\n}\n"],"names":["EMPTY_ARRAY","Object","freeze","assign"],"mappings}