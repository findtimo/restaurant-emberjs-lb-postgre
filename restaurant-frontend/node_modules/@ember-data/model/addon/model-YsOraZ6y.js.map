{"version":3,"file":"model-YsOraZ6y.js","sources":["../src/-private/many-array.ts","../../../node_modules/.pnpm/@babel+runtime@7.23.9/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js","../src/-private/promise-proxy-base.js","../src/-private/promise-belongs-to.ts","../src/-private/promise-many-array.ts","../src/-private/debug/assert-polymorphic-type.ts","../src/-private/references/has-many.ts","../src/-private/references/belongs-to.ts","../src/-private/legacy-relationships-support.ts","../../../node_modules/.pnpm/@babel+runtime@7.23.9/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js","../src/-private/errors.ts","../src/-private/model-methods.ts","../src/-private/notify-changes.ts","../src/-private/record-state.ts","../src/-private/model.js"],"sourcesContent":["/**\n  @module @ember-data/store\n*/\nimport { assert, deprecate } from '@ember/debug';\n\nimport { DEPRECATE_MANY_ARRAY_DUPLICATES } from '@ember-data/deprecations';\nimport type Store from '@ember-data/store';\nimport {\n  ARRAY_SIGNAL,\n  isStableIdentifier,\n  MUTATE,\n  notifyArray,\n  RecordArray,\n  recordIdentifierFor,\n  SOURCE,\n} from '@ember-data/store/-private';\nimport type { IdentifierArrayCreateOptions } from '@ember-data/store/-private/record-arrays/identifier-array';\nimport type { CreateRecordProperties } from '@ember-data/store/-private/store-service';\nimport type { Cache } from '@ember-data/store/-types/q/cache';\nimport type { ModelSchema } from '@ember-data/store/-types/q/ds-model';\nimport type { RecordInstance } from '@ember-data/store/-types/q/record-instance';\nimport type { FindOptions } from '@ember-data/store/-types/q/store';\nimport type { Signal } from '@ember-data/tracking/-private';\nimport { addToTransaction } from '@ember-data/tracking/-private';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { Links, PaginationLinks } from '@warp-drive/core-types/spec/raw';\n\nimport type { LegacySupport } from './legacy-relationships-support';\n\nexport interface ManyArrayCreateArgs {\n  identifiers: StableRecordIdentifier[];\n  type: string;\n  store: Store;\n  allowMutation: boolean;\n  manager: LegacySupport;\n\n  identifier: StableRecordIdentifier;\n  cache: Cache;\n  meta: Record<string, unknown> | null;\n  links: Links | PaginationLinks | null;\n  key: string;\n  isPolymorphic: boolean;\n  isAsync: boolean;\n  _inverseIsAsync: boolean;\n  isLoaded: boolean;\n}\n/**\n  A `ManyArray` is a `MutableArray` that represents the contents of a has-many\n  relationship.\n\n  The `ManyArray` is instantiated lazily the first time the relationship is\n  requested.\n\n  This class is not intended to be directly instantiated by consuming applications.\n\n  ### Inverses\n\n  Often, the relationships in Ember Data applications will have\n  an inverse. For example, imagine the following models are\n  defined:\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment') comments;\n  }\n  ```\n\n  ```app/models/comment.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class CommentModel extends Model {\n    @belongsTo('post') post;\n  }\n  ```\n\n  If you created a new instance of `Post` and added\n  a `Comment` record to its `comments` has-many\n  relationship, you would expect the comment's `post`\n  property to be set to the post that contained\n  the has-many.\n\n  We call the record to which a relationship belongs-to the\n  relationship's _owner_.\n\n  @class ManyArray\n  @public\n*/\nexport default class RelatedCollection extends RecordArray {\n  declare isAsync: boolean;\n  /**\n    The loading state of this array\n\n    @property {Boolean} isLoaded\n    @public\n    */\n\n  declare isLoaded: boolean;\n  /**\n    `true` if the relationship is polymorphic, `false` otherwise.\n\n    @property {Boolean} isPolymorphic\n    @private\n    */\n  declare isPolymorphic: boolean;\n  declare _inverseIsAsync: boolean;\n  /**\n    Metadata associated with the request for async hasMany relationships.\n\n    Example\n\n    Given that the server returns the following JSON payload when fetching a\n    hasMany relationship:\n\n    ```js\n    {\n      \"comments\": [{\n        \"id\": 1,\n        \"comment\": \"This is the first comment\",\n      }, {\n    // ...\n      }],\n\n      \"meta\": {\n        \"page\": 1,\n        \"total\": 5\n      }\n    }\n    ```\n\n    You can then access the meta data via the `meta` property:\n\n    ```js\n    let comments = await post.comments;\n    let meta = comments.meta;\n\n    // meta.page => 1\n    // meta.total => 5\n    ```\n\n    @property {Object | null} meta\n    @public\n    */\n  declare meta: Record<string, unknown> | null;\n  /**\n     * Retrieve the links for this relationship\n     *\n     @property {Object | null} links\n     @public\n     */\n  declare links: Links | PaginationLinks | null;\n  declare identifier: StableRecordIdentifier;\n  declare cache: Cache;\n  // @ts-expect-error\n  declare _manager: LegacySupport;\n  declare store: Store;\n  declare key: string;\n  declare type: ModelSchema;\n\n  constructor(options: ManyArrayCreateArgs) {\n    super(options as unknown as IdentifierArrayCreateOptions);\n    this.isLoaded = options.isLoaded || false;\n    this.isAsync = options.isAsync || false;\n    this.isPolymorphic = options.isPolymorphic || false;\n    this.identifier = options.identifier;\n    this.key = options.key;\n  }\n\n  [MUTATE](\n    target: StableRecordIdentifier[],\n    receiver: typeof Proxy<StableRecordIdentifier[]>,\n    prop: string,\n    args: unknown[],\n    _SIGNAL: Signal\n  ): unknown {\n    switch (prop) {\n      case 'length 0': {\n        Reflect.set(target, 'length', 0);\n        mutateReplaceRelatedRecords(this, [], _SIGNAL);\n        return true;\n      }\n      case 'replace cell': {\n        const [index, prior, value] = args as [number, StableRecordIdentifier, StableRecordIdentifier];\n        target[index] = value;\n        mutateReplaceRelatedRecord(this, { value, prior, index }, _SIGNAL);\n        return true;\n      }\n      case 'push': {\n        const newValues = extractIdentifiersFromRecords(args);\n\n        assertNoDuplicates(\n          this,\n          target,\n          (currentState) => currentState.push(...newValues),\n          `Cannot push duplicates to a hasMany's state.`\n        );\n\n        if (DEPRECATE_MANY_ARRAY_DUPLICATES) {\n          // dedupe\n          const seen = new Set(target);\n          const unique = new Set<RecordInstance>();\n\n          args.forEach((item) => {\n            const identifier = recordIdentifierFor(item);\n            if (!seen.has(identifier)) {\n              seen.add(identifier);\n              unique.add(item);\n            }\n          });\n\n          const newArgs = Array.from(unique);\n          const result = Reflect.apply(target[prop], receiver, newArgs) as RecordInstance[];\n\n          if (newArgs.length) {\n            mutateAddToRelatedRecords(this, { value: extractIdentifiersFromRecords(newArgs) }, _SIGNAL);\n          }\n          return result;\n        }\n\n        // else, no dedupe, error on duplicates\n        const result = Reflect.apply(target[prop], receiver, args) as RecordInstance[];\n        if (newValues.length) {\n          mutateAddToRelatedRecords(this, { value: newValues }, _SIGNAL);\n        }\n        return result;\n      }\n\n      case 'pop': {\n        const result: unknown = Reflect.apply(target[prop], receiver, args);\n        if (result) {\n          mutateRemoveFromRelatedRecords(this, { value: recordIdentifierFor(result as RecordInstance) }, _SIGNAL);\n        }\n        return result;\n      }\n\n      case 'unshift': {\n        const newValues = extractIdentifiersFromRecords(args);\n\n        assertNoDuplicates(\n          this,\n          target,\n          (currentState) => currentState.unshift(...newValues),\n          `Cannot unshift duplicates to a hasMany's state.`\n        );\n\n        if (DEPRECATE_MANY_ARRAY_DUPLICATES) {\n          // dedupe\n          const seen = new Set(target);\n          const unique = new Set<RecordInstance>();\n\n          args.forEach((item) => {\n            const identifier = recordIdentifierFor(item);\n            if (!seen.has(identifier)) {\n              seen.add(identifier);\n              unique.add(item);\n            }\n          });\n\n          const newArgs = Array.from(unique);\n          const result: unknown = Reflect.apply(target[prop], receiver, newArgs);\n\n          if (newArgs.length) {\n            mutateAddToRelatedRecords(this, { value: extractIdentifiersFromRecords(newArgs), index: 0 }, _SIGNAL);\n          }\n          return result;\n        }\n\n        // else, no dedupe, error on duplicates\n        const result = Reflect.apply(target[prop], receiver, args) as RecordInstance[];\n        if (newValues.length) {\n          mutateAddToRelatedRecords(this, { value: newValues, index: 0 }, _SIGNAL);\n        }\n        return result;\n      }\n\n      case 'shift': {\n        const result: unknown = Reflect.apply(target[prop], receiver, args);\n\n        if (result) {\n          mutateRemoveFromRelatedRecords(\n            this,\n            { value: recordIdentifierFor(result as RecordInstance), index: 0 },\n            _SIGNAL\n          );\n        }\n        return result;\n      }\n\n      case 'sort': {\n        const result: unknown = Reflect.apply(target[prop], receiver, args);\n        mutateSortRelatedRecords(this, (result as RecordInstance[]).map(recordIdentifierFor), _SIGNAL);\n        return result;\n      }\n\n      case 'splice': {\n        const [start, deleteCount, ...adds] = args as [number, number, ...RecordInstance[]];\n\n        // detect a full replace\n        if (start === 0 && deleteCount === this[SOURCE].length) {\n          const newValues = extractIdentifiersFromRecords(adds);\n\n          assertNoDuplicates(\n            this,\n            target,\n            (currentState) => currentState.splice(start, deleteCount, ...newValues),\n            `Cannot replace a hasMany's state with a new state that contains duplicates.`\n          );\n\n          if (DEPRECATE_MANY_ARRAY_DUPLICATES) {\n            // dedupe\n            const current = new Set(adds);\n            const unique = Array.from(current);\n            const newArgs = ([start, deleteCount] as unknown[]).concat(unique);\n\n            const result = Reflect.apply(target[prop], receiver, newArgs) as RecordInstance[];\n\n            mutateReplaceRelatedRecords(this, extractIdentifiersFromRecords(unique), _SIGNAL);\n            return result;\n          }\n\n          // else, no dedupe, error on duplicates\n          const result = Reflect.apply(target[prop], receiver, args) as RecordInstance[];\n          mutateReplaceRelatedRecords(this, newValues, _SIGNAL);\n          return result;\n        }\n\n        const newValues = extractIdentifiersFromRecords(adds);\n        assertNoDuplicates(\n          this,\n          target,\n          (currentState) => currentState.splice(start, deleteCount, ...newValues),\n          `Cannot splice a hasMany's state with a new state that contains duplicates.`\n        );\n\n        if (DEPRECATE_MANY_ARRAY_DUPLICATES) {\n          // dedupe\n          const currentState = target.slice();\n          currentState.splice(start, deleteCount);\n\n          const seen = new Set(currentState);\n          const unique: RecordInstance[] = [];\n          adds.forEach((item) => {\n            const identifier = recordIdentifierFor(item);\n            if (!seen.has(identifier)) {\n              seen.add(identifier);\n              unique.push(item);\n            }\n          });\n\n          const newArgs = [start, deleteCount, ...unique];\n          const result = Reflect.apply(target[prop], receiver, newArgs) as RecordInstance[];\n\n          if (deleteCount > 0) {\n            mutateRemoveFromRelatedRecords(this, { value: result.map(recordIdentifierFor), index: start }, _SIGNAL);\n          }\n\n          if (unique.length > 0) {\n            mutateAddToRelatedRecords(this, { value: extractIdentifiersFromRecords(unique), index: start }, _SIGNAL);\n          }\n\n          return result;\n        }\n\n        // else, no dedupe, error on duplicates\n        const result = Reflect.apply(target[prop], receiver, args) as RecordInstance[];\n        if (deleteCount > 0) {\n          mutateRemoveFromRelatedRecords(this, { value: result.map(recordIdentifierFor), index: start }, _SIGNAL);\n        }\n        if (newValues.length > 0) {\n          mutateAddToRelatedRecords(this, { value: newValues, index: start }, _SIGNAL);\n        }\n        return result;\n      }\n      default:\n        assert(`unable to convert ${prop} into a transaction that updates the cache state for this record array`);\n    }\n  }\n\n  notify() {\n    const signal = this[ARRAY_SIGNAL];\n    signal.shouldReset = true;\n    // @ts-expect-error\n    notifyArray(this);\n  }\n\n  /**\n    Reloads all of the records in the manyArray. If the manyArray\n    holds a relationship that was originally fetched using a links url\n    Ember Data will revisit the original links url to repopulate the\n    relationship.\n\n    If the manyArray holds the result of a `store.query()` reload will\n    re-run the original query.\n\n    Example\n\n    ```javascript\n    let user = store.peekRecord('user', '1')\n    await login(user);\n\n    let permissions = await user.permissions;\n    await permissions.reload();\n    ```\n\n    @method reload\n    @public\n  */\n  reload(options?: FindOptions) {\n    // TODO this is odd, we don't ask the store for anything else like this?\n    return this._manager.reloadHasMany(this.key, options);\n  }\n\n  /**\n    Saves all of the records in the `ManyArray`.\n\n    Example\n\n    ```javascript\n    let inbox = await store.findRecord('inbox', '1');\n    let messages = await inbox.messages;\n    messages.forEach((message) => {\n      message.isRead = true;\n    });\n    messages.save();\n    ```\n\n    @method save\n    @public\n    @return {PromiseArray} promise\n  */\n\n  /**\n    Create a child record within the owner\n\n    @method createRecord\n    @public\n    @param {Object} hash\n    @return {Model} record\n  */\n  createRecord(hash: CreateRecordProperties): RecordInstance {\n    const { store } = this;\n    assert(`Expected modelName to be set`, this.modelName);\n    const record = store.createRecord(this.modelName, hash);\n    this.push(record);\n\n    return record;\n  }\n\n  override destroy() {\n    super.destroy(false);\n  }\n}\nRelatedCollection.prototype.isAsync = false;\nRelatedCollection.prototype.isPolymorphic = false;\nRelatedCollection.prototype.identifier = null as unknown as StableRecordIdentifier;\nRelatedCollection.prototype.cache = null as unknown as Cache;\nRelatedCollection.prototype._inverseIsAsync = false;\nRelatedCollection.prototype.key = '';\nRelatedCollection.prototype.DEPRECATED_CLASS_NAME = 'ManyArray';\n\ntype PromiseProxyRecord = { then(): void; content: RecordInstance | null | undefined };\n\nfunction assertRecordPassedToHasMany(record: RecordInstance | PromiseProxyRecord) {\n  assert(\n    `All elements of a hasMany relationship must be instances of Model, you passed $${typeof record}`,\n    (function () {\n      try {\n        recordIdentifierFor(record);\n        return true;\n      } catch {\n        return false;\n      }\n    })()\n  );\n}\n\nfunction extractIdentifiersFromRecords(records: RecordInstance[]): StableRecordIdentifier[] {\n  return records.map(extractIdentifierFromRecord);\n}\n\nfunction extractIdentifierFromRecord(recordOrPromiseRecord: PromiseProxyRecord | RecordInstance) {\n  assertRecordPassedToHasMany(recordOrPromiseRecord);\n  return recordIdentifierFor(recordOrPromiseRecord);\n}\n\nfunction assertNoDuplicates(\n  collection: RelatedCollection,\n  target: StableRecordIdentifier[],\n  callback: (currentState: StableRecordIdentifier[]) => void,\n  reason: string\n) {\n  const state = target.slice();\n  callback(state);\n\n  if (state.length !== new Set(state).size) {\n    const duplicates = state.filter((currentValue, currentIndex) => state.indexOf(currentValue) !== currentIndex);\n\n    if (DEPRECATE_MANY_ARRAY_DUPLICATES) {\n      deprecate(\n        `${reason} This behavior is deprecated. Found duplicates for the following records within the new state provided to \\`<${\n          collection.identifier.type\n        }:${collection.identifier.id || collection.identifier.lid}>.${collection.key}\\`\\n\\t- ${Array.from(\n          new Set(duplicates)\n        )\n          .map((r) => (isStableIdentifier(r) ? r.lid : recordIdentifierFor(r).lid))\n          .sort((a, b) => a.localeCompare(b))\n          .join('\\n\\t- ')}`,\n        false,\n        {\n          id: 'ember-data:deprecate-many-array-duplicates',\n          for: 'ember-data',\n          until: '6.0',\n          since: {\n            enabled: '5.3',\n            available: '5.3',\n          },\n        }\n      );\n    } else {\n      throw new Error(\n        `${reason} Found duplicates for the following records within the new state provided to \\`<${\n          collection.identifier.type\n        }:${collection.identifier.id || collection.identifier.lid}>.${collection.key}\\`\\n\\t- ${Array.from(\n          new Set(duplicates)\n        )\n          .map((r) => (isStableIdentifier(r) ? r.lid : recordIdentifierFor(r).lid))\n          .sort((a, b) => a.localeCompare(b))\n          .join('\\n\\t- ')}`\n      );\n    }\n  }\n}\n\nfunction mutateAddToRelatedRecords(\n  collection: RelatedCollection,\n  operationInfo: { value: StableRecordIdentifier | StableRecordIdentifier[]; index?: number },\n  _SIGNAL: Signal\n) {\n  mutate(\n    collection,\n    {\n      op: 'addToRelatedRecords',\n      record: collection.identifier,\n      field: collection.key,\n      ...operationInfo,\n    },\n    _SIGNAL\n  );\n}\n\nfunction mutateRemoveFromRelatedRecords(\n  collection: RelatedCollection,\n  operationInfo: { value: StableRecordIdentifier | StableRecordIdentifier[]; index?: number },\n  _SIGNAL: Signal\n) {\n  mutate(\n    collection,\n    {\n      op: 'removeFromRelatedRecords',\n      record: collection.identifier,\n      field: collection.key,\n      ...operationInfo,\n    },\n    _SIGNAL\n  );\n}\n\nfunction mutateReplaceRelatedRecord(\n  collection: RelatedCollection,\n  operationInfo: {\n    value: StableRecordIdentifier;\n    prior: StableRecordIdentifier;\n    index: number;\n  },\n  _SIGNAL: Signal\n) {\n  mutate(\n    collection,\n    {\n      op: 'replaceRelatedRecord',\n      record: collection.identifier,\n      field: collection.key,\n      ...operationInfo,\n    },\n    _SIGNAL\n  );\n}\n\nfunction mutateReplaceRelatedRecords(collection: RelatedCollection, value: StableRecordIdentifier[], _SIGNAL: Signal) {\n  mutate(\n    collection,\n    {\n      op: 'replaceRelatedRecords',\n      record: collection.identifier,\n      field: collection.key,\n      value,\n    },\n    _SIGNAL\n  );\n}\n\nfunction mutateSortRelatedRecords(collection: RelatedCollection, value: StableRecordIdentifier[], _SIGNAL: Signal) {\n  mutate(\n    collection,\n    {\n      op: 'sortRelatedRecords',\n      record: collection.identifier,\n      field: collection.key,\n      value,\n    },\n    _SIGNAL\n  );\n}\n\nfunction mutate(collection: RelatedCollection, mutation: Parameters<LegacySupport['mutate']>[0], _SIGNAL: Signal) {\n  collection._manager.mutate(mutation);\n  addToTransaction(_SIGNAL);\n}\n","export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}","import PromiseProxyMixin from '@ember/object/promise-proxy-mixin';\nimport ObjectProxy from '@ember/object/proxy';\n\nexport const PromiseObject = ObjectProxy.extend(PromiseProxyMixin);\n","import { assert } from '@ember/debug';\nimport { computed } from '@ember/object';\nimport type PromiseProxyMixin from '@ember/object/promise-proxy-mixin';\nimport type ObjectProxy from '@ember/object/proxy';\n\nimport type Store from '@ember-data/store';\nimport type { RecordInstance } from '@ember-data/store/-types/q/record-instance';\nimport { cached } from '@ember-data/tracking';\n\nimport type { LegacySupport } from './legacy-relationships-support';\nimport { PromiseObject } from './promise-proxy-base';\nimport type BelongsToReference from './references/belongs-to';\n\nexport interface BelongsToProxyMeta {\n  key: string;\n  store: Store;\n  legacySupport: LegacySupport;\n  modelName: string;\n}\nexport interface BelongsToProxyCreateArgs {\n  promise: Promise<RecordInstance | null>;\n  content?: RecordInstance | null;\n  _belongsToState: BelongsToProxyMeta;\n}\n\ninterface PromiseObjectType<T> extends PromiseProxyMixin<T | null>, ObjectProxy<T> {\n  // eslint-disable-next-line @typescript-eslint/no-misused-new\n  new <PT>(...args: unknown[]): PromiseObjectType<PT>;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ndeclare class PromiseObjectType<T> {}\n\nconst Extended: PromiseObjectType<RecordInstance> = PromiseObject as unknown as PromiseObjectType<RecordInstance>;\n\n/**\n @module @ember-data/model\n */\n\n/**\n  A PromiseBelongsTo is a PromiseObject that also proxies certain method calls\n  to the underlying belongsTo model.\n  Right now we proxy:\n    * `reload()`\n  @class PromiseBelongsTo\n  @extends PromiseObject\n  @private\n*/\nclass PromiseBelongsTo extends Extended<RecordInstance> {\n  declare _belongsToState: BelongsToProxyMeta;\n\n  @cached\n  get id() {\n    const { key, legacySupport } = this._belongsToState;\n    const ref = legacySupport.referenceFor('belongsTo', key) as BelongsToReference;\n\n    return ref.id();\n  }\n\n  // we don't proxy meta because we would need to proxy it to the relationship state container\n  //  however, meta on relationships does not trigger change notifications.\n  //  if you need relationship meta, you should do `record.belongsTo(relationshipName).meta()`\n  @computed()\n  get meta() {\n    // eslint-disable-next-line no-constant-condition\n    if (1) {\n      assert(\n        'You attempted to access meta on the promise for the async belongsTo relationship ' +\n          `${this._belongsToState.modelName}:${this._belongsToState.key}'.` +\n          '\\nUse `record.belongsTo(relationshipName).meta()` instead.',\n        false\n      );\n    }\n    return;\n  }\n\n  async reload(options: Record<string, unknown>): Promise<this> {\n    assert('You are trying to reload an async belongsTo before it has been created', this.content !== undefined);\n    const { key, legacySupport } = this._belongsToState;\n    await legacySupport.reloadBelongsTo(key, options);\n    return this;\n  }\n}\n\nexport default PromiseBelongsTo;\n","import { assert } from '@ember/debug';\n\nimport { DEPRECATE_COMPUTED_CHAINS } from '@ember-data/deprecations';\nimport type { FindOptions } from '@ember-data/store/-types/q/store';\nimport { compat } from '@ember-data/tracking';\nimport { defineSignal } from '@ember-data/tracking/-private';\n\nimport type ManyArray from './many-array';\n\nexport interface HasManyProxyCreateArgs {\n  promise: Promise<ManyArray>;\n  content?: ManyArray;\n}\n\n/**\n @module @ember-data/model\n */\n/**\n  This class is returned as the result of accessing an async hasMany relationship\n  on an instance of a Model extending from `@ember-data/model`.\n\n  A PromiseManyArray is an iterable proxy that allows templates to consume related\n  ManyArrays and update once their contents are no longer pending.\n\n  In your JS code you should resolve the promise first.\n\n  ```js\n  const comments = await post.comments;\n  ```\n\n  @class PromiseManyArray\n  @public\n*/\nexport default class PromiseManyArray {\n  declare promise: Promise<ManyArray> | null;\n  declare isDestroyed: boolean;\n\n  constructor(promise: Promise<ManyArray>, content?: ManyArray) {\n    this._update(promise, content);\n    this.isDestroyed = false;\n  }\n\n  //---- Methods/Properties on ArrayProxy that we will keep as our API\n\n  declare content: ManyArray | null;\n\n  /**\n   * Retrieve the length of the content\n   * @property length\n   * @public\n   */\n  @compat\n  get length(): number {\n    // shouldn't be needed, but ends up being needed\n    // for computed chains even in 4.x\n    if (DEPRECATE_COMPUTED_CHAINS) {\n      this['[]'];\n    }\n    return this.content ? this.content.length : 0;\n  }\n\n  /**\n   * Iterate the proxied content. Called by the glimmer iterator in #each\n   * We do not guarantee that forEach will always be available. This\n   * may eventually be made to use Symbol.Iterator once glimmer supports it.\n   *\n   * @method forEach\n   * @param cb\n   * @return\n   * @private\n   */\n  forEach(cb: Parameters<typeof Array.prototype.forEach>[0]) {\n    if (this.content && this.length) {\n      this.content.forEach(cb);\n    }\n  }\n\n  /**\n   * Reload the relationship\n   * @method reload\n   * @public\n   * @param options\n   * @return\n   */\n  reload(options: FindOptions) {\n    assert('You are trying to reload an async manyArray before it has been created', this.content);\n    void this.content.reload(options);\n    return this;\n  }\n\n  //----  Properties/Methods from the PromiseProxyMixin that we will keep as our API\n\n  /**\n   * Whether the loading promise is still pending\n   *\n   * @property {boolean} isPending\n   * @public\n   */\n  declare isPending: boolean;\n  /**\n   * Whether the loading promise rejected\n   *\n   * @property {boolean} isRejected\n   * @public\n   */\n  declare isRejected: boolean;\n  /**\n   * Whether the loading promise succeeded\n   *\n   * @property {boolean} isFulfilled\n   * @public\n   */\n  declare isFulfilled: boolean;\n  /**\n   * Whether the loading promise completed (resolved or rejected)\n   *\n   * @property {boolean} isSettled\n   * @public\n   */\n  declare isSettled: boolean;\n\n  /**\n   * chain this promise\n   *\n   * @method then\n   * @public\n   * @param success\n   * @param fail\n   * @return Promise\n   */\n  then(s: Parameters<typeof Promise.prototype.then>[0], f: Parameters<typeof Promise.prototype.then>[1]) {\n    return this.promise!.then(s, f);\n  }\n\n  /**\n   * catch errors thrown by this promise\n   * @method catch\n   * @public\n   * @param callback\n   * @return Promise\n   */\n  catch(cb: Parameters<typeof Promise.prototype.catch>[0]) {\n    return this.promise!.catch(cb);\n  }\n\n  /**\n   * run cleanup after this promise completes\n   *\n   * @method finally\n   * @public\n   * @param callback\n   * @return Promise\n   */\n  finally(cb: Parameters<typeof Promise.prototype.finally>[0]) {\n    return this.promise!.finally(cb);\n  }\n\n  //---- Methods on EmberObject that we should keep\n\n  destroy() {\n    this.isDestroyed = true;\n    this.content = null;\n    this.promise = null;\n  }\n\n  //---- Methods/Properties on ManyArray that we own and proxy to\n\n  /**\n   * Retrieve the links for this relationship\n   * @property links\n   * @public\n   */\n  @compat\n  get links() {\n    return this.content ? this.content.links : undefined;\n  }\n\n  /**\n   * Retrieve the meta for this relationship\n   * @property meta\n   * @public\n   */\n  @compat\n  get meta() {\n    return this.content ? this.content.meta : undefined;\n  }\n\n  //---- Our own stuff\n\n  _update(promise: Promise<ManyArray>, content?: ManyArray) {\n    if (content !== undefined) {\n      this.content = content;\n    }\n\n    this.promise = tapPromise(this, promise);\n  }\n\n  static create({ promise, content }: HasManyProxyCreateArgs): PromiseManyArray {\n    return new this(promise, content);\n  }\n}\ndefineSignal(PromiseManyArray.prototype, 'content', null);\ndefineSignal(PromiseManyArray.prototype, 'isPending', false);\ndefineSignal(PromiseManyArray.prototype, 'isRejected', false);\ndefineSignal(PromiseManyArray.prototype, 'isFulfilled', false);\ndefineSignal(PromiseManyArray.prototype, 'isSettled', false);\n\n// this will error if someone tries to call\n// A(identifierArray) since it is not configurable\n// which is preferrable to the `meta` override we used\n// before which required importing all of Ember\nif (DEPRECATE_COMPUTED_CHAINS) {\n  const desc = {\n    enumerable: true,\n    configurable: false,\n    get: function (this: PromiseManyArray) {\n      return this.content?.length && this.content;\n    },\n  };\n  compat(desc);\n\n  // ember-source < 3.23 (e.g. 3.20 lts)\n  // requires that the tag `'[]'` be notified\n  // on the ArrayProxy in order for `{{#each}}`\n  // to recompute. We entangle the '[]' tag from content\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  Object.defineProperty(PromiseManyArray.prototype, '[]', desc);\n}\n\nfunction tapPromise(proxy: PromiseManyArray, promise: Promise<ManyArray>) {\n  proxy.isPending = true;\n  proxy.isSettled = false;\n  proxy.isFulfilled = false;\n  proxy.isRejected = false;\n  return Promise.resolve(promise).then(\n    (content) => {\n      proxy.isPending = false;\n      proxy.isFulfilled = true;\n      proxy.isSettled = true;\n      proxy.content = content;\n      return content;\n    },\n    (error) => {\n      proxy.isPending = false;\n      proxy.isFulfilled = false;\n      proxy.isRejected = true;\n      proxy.isSettled = true;\n      throw error;\n    }\n  );\n}\n","import { assert } from '@ember/debug';\nimport { DEBUG } from '@ember-data/env';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type Store from '@ember-data/store';\nimport type { UpgradedMeta } from '@ember-data/graph/-private/-edge-definition';\n\n/*\n  Assert that `addedRecord` has a valid type so it can be added to the\n  relationship of the `record`.\n\n  The assert basically checks if the `addedRecord` can be added to the\n  relationship (specified via `relationshipMeta`) of the `record`.\n\n  This utility should only be used internally, as both record parameters must\n  be stable record identifiers and the `relationshipMeta` needs to be the meta\n  information about the relationship, retrieved via\n  `record.relationshipFor(key)`.\n*/\nlet assertPolymorphicType: (\n  parentIdentifier: StableRecordIdentifier,\n  parentDefinition: UpgradedMeta,\n  addedIdentifier: StableRecordIdentifier,\n  store: Store\n) => void;\n\nif (DEBUG) {\n  assertPolymorphicType = function assertPolymorphicType(\n    parentIdentifier: StableRecordIdentifier,\n    parentDefinition: UpgradedMeta,\n    addedIdentifier: StableRecordIdentifier,\n    store: Store\n  ) {\n    if (parentDefinition.inverseIsImplicit) {\n      return;\n    }\n    if (parentDefinition.isPolymorphic) {\n      let meta = store.getSchemaDefinitionService().relationshipsDefinitionFor(addedIdentifier)[\n        parentDefinition.inverseKey\n      ];\n      assert(\n        `The schema for the relationship '${parentDefinition.inverseKey}' on '${addedIdentifier.type}' type does not implement '${parentDefinition.type}' and thus cannot be assigned to the '${parentDefinition.key}' relationship in '${parentIdentifier.type}'. The definition should specify 'as: \"${parentDefinition.type}\"' in options.`,\n        meta?.options.as === parentDefinition.type\n      );\n    }\n  };\n}\n\nexport { assertPolymorphicType };\n","import { assert } from '@ember/debug';\n\nimport { DEBUG } from '@ember-data/env';\nimport type { CollectionEdge } from '@ember-data/graph/-private/edges/collection';\nimport type { Graph } from '@ember-data/graph/-private/graph';\nimport type Store from '@ember-data/store';\nimport type { NotificationType } from '@ember-data/store/-private/managers/notification-manager';\nimport type { FindOptions } from '@ember-data/store/-types/q/store';\nimport { cached, compat } from '@ember-data/tracking';\nimport { defineSignal } from '@ember-data/tracking/-private';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { CollectionRelationship } from '@warp-drive/core-types/cache/relationship';\nimport type {\n  CollectionResourceDocument,\n  CollectionResourceRelationship,\n  ExistingResourceObject,\n  LinkObject,\n  Meta,\n  PaginationLinks,\n} from '@warp-drive/core-types/spec/raw';\n\nimport { assertPolymorphicType } from '../debug/assert-polymorphic-type';\nimport type { LegacySupport } from '../legacy-relationships-support';\nimport { areAllInverseRecordsLoaded, LEGACY_SUPPORT } from '../legacy-relationships-support';\nimport type ManyArray from '../many-array';\n\n/**\n  @module @ember-data/model\n*/\ninterface ResourceIdentifier {\n  links?: {\n    related?: string | LinkObject;\n  };\n  meta?: Meta;\n}\n\nfunction isResourceIdentiferWithRelatedLinks(\n  value: CollectionResourceRelationship | ResourceIdentifier | null\n): value is ResourceIdentifier & { links: { related: string | LinkObject | null } } {\n  return Boolean(value && value.links && value.links.related);\n}\n/**\n A `HasManyReference` is a low-level API that allows access\n and manipulation of a hasMany relationship.\n\n It is especially useful when you're dealing with `async` relationships\n from `@ember-data/model` as it allows synchronous access to\n the relationship data if loaded, as well as APIs for loading, reloading\n the data or accessing available information without triggering a load.\n\n It may also be useful when using `sync` relationships with `@ember-data/model`\n that need to be loaded/reloaded with more precise timing than marking the\n relationship as `async` and relying on autofetch would have allowed.\n\n However,keep in mind that marking a relationship as `async: false` will introduce\n bugs into your application if the data is not always guaranteed to be available\n by the time the relationship is accessed. Ergo, it is recommended when using this\n approach to utilize `links` for unloaded relationship state instead of identifiers.\n\n Reference APIs are entangled with the relationship's underlying state,\n thus any getters or cached properties that utilize these will properly\n invalidate if the relationship state changes.\n\n References are \"stable\", meaning that multiple calls to retrieve the reference\n  for a given relationship will always return the same HasManyReference.\n\n @class HasManyReference\n @public\n */\nexport default class HasManyReference {\n  declare graph: Graph;\n  declare store: Store;\n  declare hasManyRelationship: CollectionEdge;\n  /**\n   * The field name on the parent record for this has-many relationship.\n   *\n   * @property {String} key\n   * @public\n   */\n  declare key: string;\n\n  /**\n   * The type of resource this relationship will contain.\n   *\n   * @property {String} type\n   * @public\n   */\n  declare type: string;\n\n  // unsubscribe tokens given to us by the notification manager\n  ___token!: object;\n  ___identifier: StableRecordIdentifier;\n  ___relatedTokenMap!: Map<StableRecordIdentifier, object>;\n\n  declare _ref: number;\n\n  constructor(\n    store: Store,\n    graph: Graph,\n    parentIdentifier: StableRecordIdentifier,\n    hasManyRelationship: CollectionEdge,\n    key: string\n  ) {\n    this.graph = graph;\n    this.key = key;\n    this.hasManyRelationship = hasManyRelationship;\n    this.type = hasManyRelationship.definition.type;\n\n    this.store = store;\n    this.___identifier = parentIdentifier;\n    this.___token = store.notifications.subscribe(\n      parentIdentifier,\n      (_: StableRecordIdentifier, bucket: NotificationType, notifiedKey?: string) => {\n        if (bucket === 'relationships' && notifiedKey === key) {\n          this._ref++;\n        }\n      }\n    );\n    this.___relatedTokenMap = new Map();\n    // TODO inverse\n  }\n\n  /**\n   * This method should never be called by user code.\n   *\n   * @internal\n   */\n  destroy() {\n    this.store.notifications.unsubscribe(this.___token);\n    this.___relatedTokenMap.forEach((token) => {\n      this.store.notifications.unsubscribe(token);\n    });\n    this.___relatedTokenMap.clear();\n  }\n\n  /**\n   * An array of identifiers for the records that this reference refers to.\n   *\n   * @property {StableRecordIdentifier[]} identifiers\n   * @public\n   */\n  @cached\n  @compat\n  get identifiers(): StableRecordIdentifier[] {\n    this._ref; // consume the tracked prop\n\n    const resource = this._resource();\n\n    const map = this.___relatedTokenMap;\n    this.___relatedTokenMap = new Map();\n\n    if (resource && resource.data) {\n      return resource.data.map((resourceIdentifier) => {\n        const identifier = this.store.identifierCache.getOrCreateRecordIdentifier(resourceIdentifier);\n        let token = map.get(identifier);\n\n        if (token) {\n          map.delete(identifier);\n        } else {\n          token = this.store.notifications.subscribe(\n            identifier,\n            (_: StableRecordIdentifier, bucket: NotificationType, notifiedKey?: string) => {\n              if (bucket === 'identity' || (bucket === 'attributes' && notifiedKey === 'id')) {\n                this._ref++;\n              }\n            }\n          );\n        }\n        this.___relatedTokenMap.set(identifier, token);\n\n        return identifier;\n      });\n    }\n\n    map.forEach((token) => {\n      this.store.notifications.unsubscribe(token);\n    });\n    map.clear();\n\n    return [];\n  }\n\n  _resource() {\n    const cache = this.store.cache;\n    return cache.getRelationship(this.___identifier, this.key) as CollectionResourceRelationship;\n  }\n\n  /**\n   This returns a string that represents how the reference will be\n   looked up when it is loaded. If the relationship has a link it will\n   use the \"link\" otherwise it defaults to \"id\".\n\n   Example\n\n   ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n\n   export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   // get the identifier of the reference\n   if (commentsRef.remoteType() === \"ids\") {\n     let ids = commentsRef.ids();\n   } else if (commentsRef.remoteType() === \"link\") {\n     let link = commentsRef.link();\n   }\n   ```\n\n   @method remoteType\n   @public\n   @return {String} The name of the remote type. This should either be `link` or `ids`\n   */\n  remoteType(): 'link' | 'ids' {\n    const value = this._resource();\n    if (value && value.links && value.links.related) {\n      return 'link';\n    }\n\n    return 'ids';\n  }\n\n  /**\n   `ids()` returns an array of the record IDs in this relationship.\n\n   Example\n\n   ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n\n   export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   commentsRef.ids(); // ['1']\n   ```\n\n   @method ids\n    @public\n   @return {Array} The ids in this has-many relationship\n   */\n  ids(): Array<string | null> {\n    return this.identifiers.map((identifier) => identifier.id);\n  }\n\n  /**\n   The link Ember Data will use to fetch or reload this belongs-to\n   relationship. By default it uses only the \"related\" resource linkage.\n\n   Example\n\n   ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n   export default Model.extend({\n      user: belongsTo('user', { async: true, inverse: null })\n    });\n\n   let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: '/articles/1/author'\n            }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n\n   // get the identifier of the reference\n   if (userRef.remoteType() === \"link\") {\n      let link = userRef.link();\n    }\n   ```\n\n   @method link\n   @public\n   @return {String} The link Ember Data will use to fetch or reload this belongs-to relationship.\n   */\n  link(): string | null {\n    const resource = this._resource();\n\n    if (isResourceIdentiferWithRelatedLinks(resource)) {\n      if (resource.links) {\n        const related = resource.links.related;\n        return !related || typeof related === 'string' ? related : related.href;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * any links that have been received for this relationship\n   *\n   * @method links\n   * @public\n   * @return\n   */\n  links(): PaginationLinks | null {\n    const resource = this._resource();\n\n    return resource && resource.links ? resource.links : null;\n  }\n\n  /**\n   The meta data for the has-many relationship.\n\n   Example\n\n   ```javascript\n   // models/blog.js\n   import Model, { hasMany } from '@ember-data/model';\n   export default Model.extend({\n      users: hasMany('user', { async: true, inverse: null })\n    });\n\n   let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          users: {\n            links: {\n              related: {\n                href: '/articles/1/authors'\n              },\n            },\n            meta: {\n              lastUpdated: 1458014400000\n            }\n          }\n        }\n      }\n    });\n\n   let usersRef = blog.hasMany('user');\n\n   usersRef.meta() // { lastUpdated: 1458014400000 }\n   ```\n\n  @method meta\n  @public\n  @return {Object|null} The meta information for the belongs-to relationship.\n  */\n  meta(): Meta | null {\n    let meta: Meta | null = null;\n    const resource = this._resource();\n    if (resource && resource.meta && typeof resource.meta === 'object') {\n      meta = resource.meta;\n    }\n    return meta;\n  }\n\n  /**\n   `push` can be used to update the data in the relationship and EmberData\n   will treat the new data as the canonical value of this relationship on\n   the backend. An empty array will signify the canonical value should be\n   empty.\n\n   Example model\n\n   ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n\n   export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n\n   Setup some initial state, note we haven't loaded the comments yet:\n\n   ```js\n   const post = store.push({\n     data: {\n       type: 'post',\n       id: '1',\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: '1' }]\n         }\n       }\n     }\n   });\n\n   const commentsRef = post.hasMany('comments');\n   commentsRef.ids(); // ['1']\n   ```\n\n   Update the state using `push`, note we can do this even without\n   having loaded these comments yet by providing resource identifiers.\n\n   Both full resources and resource identifiers are supported.\n\n   ```js\n   await commentsRef.push({\n    data: [\n     { type: 'comment', id: '2' },\n     { type: 'comment', id: '3' },\n    ]\n   });\n\n   commentsRef.ids(); // ['2', '3']\n   ```\n\n   For convenience, you can also pass in an array of resources or resource identifiers\n   without wrapping them in the `data` property:\n\n   ```js\n   await commentsRef.push([\n     { type: 'comment', id: '4' },\n     { type: 'comment', id: '5' },\n   ]);\n\n   commentsRef.ids(); // ['4', '5']\n   ```\n\n   When using the `data` property, you may also include other resource data via included,\n   as well as provide new links and meta to the relationship.\n\n   ```js\n   await commentsRef.push({\n     links: {\n       related: '/posts/1/comments'\n     },\n     meta: {\n       total: 2\n     },\n     data: [\n       { type: 'comment', id: '4' },\n       { type: 'comment', id: '5' },\n     ],\n     included: [\n       { type: 'other-thing', id: '1', attributes: { foo: 'bar' },\n     ]\n   });\n   ```\n\n   By default, the store will attempt to fetch any unloaded records before resolving\n   the returned promise with the ManyArray.\n\n   Alternatively, pass `true` as the second argument to avoid fetching unloaded records\n   and instead the promise will resolve with void without attempting to fetch. This is\n   particularly useful if you want to update the state of the relationship without\n   forcing the load of all of the associated records.\n\n   @method push\n   @public\n   @param {Array|Object} doc a JSONAPI document object describing the new value of this relationship.\n   @param {Boolean} [skipFetch] if `true`, do not attempt to fetch unloaded records\n   @return {Promise<ManyArray | void>}\n  */\n  async push(\n    doc: ExistingResourceObject[] | CollectionResourceDocument,\n    skipFetch?: boolean\n  ): Promise<ManyArray | void> {\n    const { store } = this;\n    const dataDoc = Array.isArray(doc) ? { data: doc } : doc;\n    const isResourceData = Array.isArray(dataDoc.data) && dataDoc.data.length > 0 && isMaybeResource(dataDoc.data[0]);\n\n    // enforce that one of links, meta or data is present\n    assert(\n      `You must provide at least one of 'links', 'meta' or 'data' when calling hasManyReference.push`,\n      'links' in dataDoc || 'meta' in dataDoc || 'data' in dataDoc\n    );\n\n    const identifiers = !Array.isArray(dataDoc.data)\n      ? []\n      : isResourceData\n        ? (store._push(dataDoc, true) as StableRecordIdentifier[])\n        : dataDoc.data.map((i) => store.identifierCache.getOrCreateRecordIdentifier(i));\n    const { identifier } = this.hasManyRelationship;\n\n    if (DEBUG) {\n      const relationshipMeta = this.hasManyRelationship.definition;\n\n      identifiers.forEach((added) => {\n        assertPolymorphicType(identifier, relationshipMeta, added, store);\n      });\n    }\n\n    const newData: CollectionResourceRelationship = {};\n    // only set data if it was passed in\n    if (Array.isArray(dataDoc.data)) {\n      newData.data = identifiers;\n    }\n    if ('links' in dataDoc) {\n      newData.links = dataDoc.links;\n    }\n    if ('meta' in dataDoc) {\n      newData.meta = dataDoc.meta;\n    }\n    store._join(() => {\n      this.graph.push({\n        op: 'updateRelationship',\n        record: identifier,\n        field: this.key,\n        value: newData,\n      });\n    });\n\n    if (!skipFetch) return this.load();\n  }\n\n  _isLoaded() {\n    const hasRelationshipDataProperty = this.hasManyRelationship.state.hasReceivedData;\n    if (!hasRelationshipDataProperty) {\n      return false;\n    }\n\n    const relationship = this.graph.getData(this.hasManyRelationship.identifier, this.key) as CollectionRelationship;\n\n    return relationship.data?.every((identifier) => {\n      return this.store._instanceCache.recordIsLoaded(identifier, true) === true;\n    });\n  }\n\n  /**\n   `value()` synchronously returns the current value of the has-many\n   relationship. Unlike `record.relationshipName`, calling\n   `value()` on a reference does not trigger a fetch if the async\n   relationship is not yet loaded. If the relationship is not loaded\n   it will always return `null`.\n\n   Example\n\n   ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n\n   export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   post.comments.then(function(comments) {\n     commentsRef.value() === comments\n   })\n   ```\n\n   @method value\n    @public\n   @return {ManyArray}\n   */\n  value(): ManyArray | null {\n    const support: LegacySupport = (LEGACY_SUPPORT as Map<StableRecordIdentifier, LegacySupport>).get(\n      this.___identifier\n    )!;\n\n    const loaded = this._isLoaded();\n\n    if (!loaded) {\n      // subscribe to changes\n      // for when we are not loaded yet\n      this._ref;\n      return null;\n    }\n\n    return support.getManyArray(this.key);\n  }\n\n  /**\n   Loads the relationship if it is not already loaded.  If the\n   relationship is already loaded this method does not trigger a new\n   load. This causes a request to the specified\n   relationship link or reloads all items currently in the relationship.\n\n   Example\n\n   ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n\n   export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   commentsRef.load().then(function(comments) {\n     //...\n   });\n   ```\n\n   You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference.\n\n   Example\n\n   ```javascript\n   commentsRef.load({ adapterOptions: { isPrivate: true } })\n     .then(function(comments) {\n       //...\n     });\n   ```\n\n   ```app/adapters/comment.js\n   export default ApplicationAdapter.extend({\n     findMany(store, type, id, snapshots) {\n       // In the adapter you will have access to adapterOptions.\n       let adapterOptions = snapshots[0].adapterOptions;\n     }\n   });\n   ```\n\n   @method load\n   @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the ManyArray in\n   this has-many relationship.\n   */\n  async load(options?: FindOptions): Promise<ManyArray> {\n    const support: LegacySupport = (LEGACY_SUPPORT as Map<StableRecordIdentifier, LegacySupport>).get(\n      this.___identifier\n    )!;\n    const fetchSyncRel =\n      !this.hasManyRelationship.definition.isAsync && !areAllInverseRecordsLoaded(this.store, this._resource());\n    return fetchSyncRel\n      ? (support.reloadHasMany(this.key, options) as Promise<ManyArray>)\n      : // we cast to fix the return type since typescript and eslint don't understand async functions\n        // properly\n        (support.getHasMany(this.key, options) as Promise<ManyArray> | ManyArray);\n  }\n\n  /**\n   Reloads this has-many relationship. This causes a request to the specified\n   relationship link or reloads all items currently in the relationship.\n\n   Example\n\n   ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n\n   export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   commentsRef.reload().then(function(comments) {\n     //...\n   });\n   ```\n\n   You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference. A full example\n   can be found in the `load` method.\n\n   Example\n\n   ```javascript\n   commentsRef.reload({ adapterOptions: { isPrivate: true } })\n   ```\n\n   @method reload\n    @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the ManyArray in this has-many relationship.\n   */\n  reload(options?: FindOptions) {\n    const support: LegacySupport = (LEGACY_SUPPORT as Map<StableRecordIdentifier, LegacySupport>).get(\n      this.___identifier\n    )!;\n    return support.reloadHasMany(this.key, options);\n  }\n}\ndefineSignal(HasManyReference.prototype, '_ref', 0);\n\nexport function isMaybeResource(object: ExistingResourceObject | ResourceIdentifier): object is ExistingResourceObject {\n  const keys = Object.keys(object).filter((k) => k !== 'id' && k !== 'type' && k !== 'lid');\n  return keys.length > 0;\n}\n","import { DEBUG } from '@ember-data/env';\nimport type { ResourceEdge } from '@ember-data/graph/-private/edges/resource';\nimport type { Graph } from '@ember-data/graph/-private/graph';\nimport type Store from '@ember-data/store';\nimport type { NotificationType } from '@ember-data/store/-private/managers/notification-manager';\nimport type { RecordInstance } from '@ember-data/store/-types/q/record-instance';\nimport { cached, compat } from '@ember-data/tracking';\nimport { defineSignal } from '@ember-data/tracking/-private';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { StableExistingRecordIdentifier } from '@warp-drive/core-types/identifier';\nimport type {\n  LinkObject,\n  Links,\n  Meta,\n  SingleResourceDocument,\n  SingleResourceRelationship,\n} from '@warp-drive/core-types/spec/raw';\n\nimport { assertPolymorphicType } from '../debug/assert-polymorphic-type';\nimport type { LegacySupport } from '../legacy-relationships-support';\nimport { areAllInverseRecordsLoaded, LEGACY_SUPPORT } from '../legacy-relationships-support';\nimport { isMaybeResource } from './has-many';\n\n/**\n  @module @ember-data/model\n*/\n\ninterface ResourceIdentifier {\n  links?: {\n    related?: string | LinkObject;\n  };\n  meta?: Meta;\n}\n\nfunction isResourceIdentiferWithRelatedLinks(\n  value: SingleResourceRelationship | ResourceIdentifier | null\n): value is ResourceIdentifier & { links: { related: string | LinkObject | null } } {\n  return Boolean(value && value.links && value.links.related);\n}\n\n/**\n A `BelongsToReference` is a low-level API that allows access\n and manipulation of a belongsTo relationship.\n\n It is especially useful when you're dealing with `async` relationships\n from `@ember-data/model` as it allows synchronous access to\n the relationship data if loaded, as well as APIs for loading, reloading\n the data or accessing available information without triggering a load.\n\n It may also be useful when using `sync` relationships with `@ember-data/model`\n that need to be loaded/reloaded with more precise timing than marking the\n relationship as `async` and relying on autofetch would have allowed.\n\n However,keep in mind that marking a relationship as `async: false` will introduce\n bugs into your application if the data is not always guaranteed to be available\n by the time the relationship is accessed. Ergo, it is recommended when using this\n approach to utilize `links` for unloaded relationship state instead of identifiers.\n\n Reference APIs are entangled with the relationship's underlying state,\n thus any getters or cached properties that utilize these will properly\n invalidate if the relationship state changes.\n\n References are \"stable\", meaning that multiple calls to retrieve the reference\n  for a given relationship will always return the same HasManyReference.\n\n @class BelongsToReference\n @public\n */\nexport default class BelongsToReference {\n  declare graph: Graph;\n  declare store: Store;\n  declare belongsToRelationship: ResourceEdge;\n  /**\n   * The field name on the parent record for this has-many relationship.\n   *\n   * @property {String} key\n   * @public\n   */\n  declare key: string;\n\n  /**\n   * The type of resource this relationship will contain.\n   *\n   * @property {String} type\n   * @public\n   */\n  declare type: string;\n\n  // unsubscribe tokens given to us by the notification manager\n  declare ___token: object;\n  declare ___identifier: StableRecordIdentifier;\n  declare ___relatedToken: object | null;\n\n  declare _ref: number;\n\n  constructor(\n    store: Store,\n    graph: Graph,\n    parentIdentifier: StableRecordIdentifier,\n    belongsToRelationship: ResourceEdge,\n    key: string\n  ) {\n    this.graph = graph;\n    this.key = key;\n    this.belongsToRelationship = belongsToRelationship;\n    this.type = belongsToRelationship.definition.type;\n    this.store = store;\n    this.___identifier = parentIdentifier;\n    this.___relatedToken = null;\n\n    this.___token = store.notifications.subscribe(\n      parentIdentifier,\n      (_: StableRecordIdentifier, bucket: NotificationType, notifiedKey?: string) => {\n        if (bucket === 'relationships' && notifiedKey === key) {\n          this._ref++;\n        }\n      }\n    );\n\n    // TODO inverse\n  }\n\n  destroy() {\n    // TODO @feature we need the notification manager often enough\n    // we should potentially just expose it fully public\n    this.store.notifications.unsubscribe(this.___token);\n    this.___token = null as unknown as object;\n    if (this.___relatedToken) {\n      this.store.notifications.unsubscribe(this.___relatedToken);\n      this.___relatedToken = null;\n    }\n  }\n\n  /**\n   * The identifier of the record that this reference refers to.\n   * `null` if no related record is known.\n   *\n   * @property {StableRecordIdentifier | null} identifier\n   * @public\n   */\n  @cached\n  @compat\n  get identifier(): StableRecordIdentifier | null {\n    if (this.___relatedToken) {\n      this.store.notifications.unsubscribe(this.___relatedToken);\n      this.___relatedToken = null;\n    }\n\n    const resource = this._resource();\n    if (resource && resource.data) {\n      const identifier = this.store.identifierCache.getOrCreateRecordIdentifier(resource.data);\n      this.___relatedToken = this.store.notifications.subscribe(\n        identifier,\n        (_: StableRecordIdentifier, bucket: NotificationType, notifiedKey?: string) => {\n          if (bucket === 'identity' || (bucket === 'attributes' && notifiedKey === 'id')) {\n            this._ref++;\n          }\n        }\n      );\n\n      return identifier;\n    }\n\n    return null;\n  }\n\n  /**\n   The `id` of the record that this reference refers to. Together, the\n   `type()` and `id()` methods form a composite key for the identity\n   map. This can be used to access the id of an async relationship\n   without triggering a fetch that would normally happen if you\n   attempted to use `record.relationship.id`.\n\n   Example\n\n   ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n    @belongsTo('user', { async: true, inverse: null }) user;\n   }\n\n   let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n\n   // get the identifier of the reference\n   if (userRef.remoteType() === \"id\") {\n      let id = userRef.id();\n    }\n   ```\n\n   @method id\n   @public\n   @return {String} The id of the record in this belongsTo relationship.\n   */\n  id(): string | null {\n    return this.identifier?.id || null;\n  }\n\n  /**\n   The link Ember Data will use to fetch or reload this belongs-to\n   relationship. By default it uses only the \"related\" resource linkage.\n\n   Example\n\n   ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n   export default Model.extend({\n      user: belongsTo('user', { async: true, inverse: null })\n    });\n\n   let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: '/articles/1/author'\n            }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n\n   // get the identifier of the reference\n   if (userRef.remoteType() === \"link\") {\n      let link = userRef.link();\n    }\n   ```\n\n   @method link\n   @public\n   @return {String} The link Ember Data will use to fetch or reload this belongs-to relationship.\n   */\n  link(): string | null {\n    const resource = this._resource();\n\n    if (isResourceIdentiferWithRelatedLinks(resource)) {\n      if (resource.links) {\n        const related = resource.links.related;\n        return !related || typeof related === 'string' ? related : related.href;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * any links that have been received for this relationship\n   *\n   * @method links\n   * @public\n   * @return\n   */\n  links(): Links | null {\n    const resource = this._resource();\n\n    return resource && resource.links ? resource.links : null;\n  }\n\n  /**\n   The meta data for the belongs-to relationship.\n\n   Example\n\n   ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n   export default Model.extend({\n      user: belongsTo('user', { async: true, inverse: null })\n    });\n\n   let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            links: {\n              related: {\n                href: '/articles/1/author'\n              },\n            },\n            meta: {\n              lastUpdated: 1458014400000\n            }\n          }\n        }\n      }\n    });\n\n   let userRef = blog.belongsTo('user');\n\n   userRef.meta() // { lastUpdated: 1458014400000 }\n   ```\n\n   @method meta\n    @public\n   @return {Object} The meta information for the belongs-to relationship.\n   */\n  meta(): Meta | null {\n    let meta: Meta | null = null;\n    const resource = this._resource();\n    if (resource && resource.meta && typeof resource.meta === 'object') {\n      meta = resource.meta;\n    }\n    return meta;\n  }\n\n  _resource() {\n    this._ref; // subscribe\n    const cache = this.store.cache;\n    return cache.getRelationship(this.___identifier, this.key) as SingleResourceRelationship;\n  }\n\n  /**\n   This returns a string that represents how the reference will be\n   looked up when it is loaded. If the relationship has a link it will\n   use the \"link\" otherwise it defaults to \"id\".\n\n   Example\n\n   ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n\n   export default class PostModel extends Model {\n     @hasMany('comment', { async: true, inverse: null }) comments;\n   }\n   ```\n\n   ```javascript\n   let post = store.push({\n     data: {\n       type: 'post',\n       id: 1,\n       relationships: {\n         comments: {\n           data: [{ type: 'comment', id: 1 }]\n         }\n       }\n     }\n   });\n\n   let commentsRef = post.hasMany('comments');\n\n   // get the identifier of the reference\n   if (commentsRef.remoteType() === \"ids\") {\n     let ids = commentsRef.ids();\n   } else if (commentsRef.remoteType() === \"link\") {\n     let link = commentsRef.link();\n   }\n   ```\n\n   @method remoteType\n   @public\n   @return {String} The name of the remote type. This should either be `link` or `id`\n   */\n  remoteType(): 'link' | 'id' {\n    const value = this._resource();\n    if (isResourceIdentiferWithRelatedLinks(value)) {\n      return 'link';\n    }\n    return 'id';\n  }\n\n  /**\n   `push` can be used to update the data in the relationship and EmberData\n   will treat the new data as the canonical value of this relationship on\n   the backend. A value of `null` (e.g. `{ data: null }`) can be passed to\n   clear the relationship.\n\n   Example model\n\n   ```app/models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n      @belongsTo('user', { async: true, inverse: null }) user;\n    }\n   ```\n\n   Setup some initial state, note we haven't loaded the user yet:\n\n   ```js\n   const blog = store.push({\n      data: {\n        type: 'blog',\n        id: '1',\n        relationships: {\n          user: {\n            data: { type: 'user', id: '1' }\n          }\n        }\n      }\n   });\n\n   const userRef = blog.belongsTo('user');\n   userRef.id(); // '1'\n   ```\n\n   Update the state using `push`, note we can do this even without\n   having loaded the user yet by providing a resource-identifier.\n\n   Both full a resource and a resource-identifier are supported.\n\n   ```js\n   await userRef.push({\n      data: {\n        type: 'user',\n        id: '2',\n      }\n    });\n\n    userRef.id(); // '2'\n   ```\n\n   You may also pass in links and meta fore the relationship, and sideload\n   additional resources that might be required.\n\n   ```js\n    await userRef.push({\n        data: {\n          type: 'user',\n          id: '2',\n        },\n        links: {\n          related: '/articles/1/author'\n        },\n        meta: {\n          lastUpdated: Date.now()\n        },\n        included: [\n          {\n            type: 'user-preview',\n            id: '2',\n            attributes: {\n              username: '@runspired'\n            }\n          }\n        ]\n      });\n    ```\n\n   By default, the store will attempt to fetch the record if it is not loaded or its\n   resource data is not included in the call to `push` before resolving the returned\n   promise with the new state..\n\n   Alternatively, pass `true` as the second argument to avoid fetching unloaded records\n   and instead the promise will resolve with void without attempting to fetch. This is\n   particularly useful if you want to update the state of the relationship without\n   forcing the load of all of the associated record.\n\n   @method push\n   @public\n   @param {Object} doc a JSONAPI document object describing the new value of this relationship.\n   @param {Boolean} [skipFetch] if `true`, do not attempt to fetch unloaded records\n   @return {Promise<RecordInstance | null | void>}\n  */\n  async push(doc: SingleResourceDocument, skipFetch?: boolean): Promise<RecordInstance | null | void> {\n    const { store } = this;\n    const isResourceData = doc.data && isMaybeResource(doc.data);\n    const added = isResourceData\n      ? (store._push(doc, true) as StableExistingRecordIdentifier)\n      : doc.data\n        ? (store.identifierCache.getOrCreateRecordIdentifier(doc.data) as StableExistingRecordIdentifier)\n        : null;\n    const { identifier } = this.belongsToRelationship;\n\n    if (DEBUG) {\n      if (added) {\n        assertPolymorphicType(identifier, this.belongsToRelationship.definition, added, store);\n      }\n    }\n\n    const newData: SingleResourceRelationship = {};\n\n    // only set data if it was passed in\n    if (doc.data || doc.data === null) {\n      newData.data = added;\n    }\n    if ('links' in doc) {\n      newData.links = doc.links;\n    }\n    if ('meta' in doc) {\n      newData.meta = doc.meta;\n    }\n    store._join(() => {\n      this.graph.push({\n        op: 'updateRelationship',\n        record: identifier,\n        field: this.key,\n        value: newData,\n      });\n    });\n\n    if (!skipFetch) return this.load();\n  }\n\n  /**\n   `value()` synchronously returns the current value of the belongs-to\n   relationship. Unlike `record.relationshipName`, calling\n   `value()` on a reference does not trigger a fetch if the async\n   relationship is not yet loaded. If the relationship is not loaded\n   it will always return `null`.\n\n   Example\n\n   ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n     @belongsTo('user', { async: true, inverse: null }) user;\n   }\n\n   let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n\n   userRef.value(); // null\n\n   // provide data for reference\n   userRef.push({\n      data: {\n        type: 'user',\n        id: 1,\n        attributes: {\n          username: \"@user\"\n        }\n      }\n    }).then(function(user) {\n      userRef.value(); // user\n    });\n   ```\n\n   @method value\n    @public\n   @return {Model} the record in this relationship\n   */\n  value(): RecordInstance | null {\n    const resource = this._resource();\n    return resource && resource.data ? this.store.peekRecord(resource.data) : null;\n  }\n\n  /**\n   Loads a record in a belongs-to relationship if it is not already\n   loaded. If the relationship is already loaded this method does not\n   trigger a new load.\n\n   Example\n\n   ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n     @belongsTo('user', { async: true, inverse: null }) user;\n   }\n\n   let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n\n   userRef.value(); // null\n\n   userRef.load().then(function(user) {\n      userRef.value() === user\n    });\n   ```\n\n   You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference.\n\n   Example\n\n   ```javascript\n   userRef.load({ adapterOptions: { isPrivate: true } }).then(function(user) {\n     userRef.value() === user;\n   });\n   ```\n   ```app/adapters/user.js\n   import Adapter from '@ember-data/adapter';\n\n   export default class UserAdapter extends Adapter {\n     findRecord(store, type, id, snapshot) {\n       // In the adapter you will have access to adapterOptions.\n       let adapterOptions = snapshot.adapterOptions;\n     }\n   });\n   ```\n\n   @method load\n    @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the record in this belongs-to relationship.\n   */\n  async load(options?: Record<string, unknown>): Promise<RecordInstance | null> {\n    const support: LegacySupport = (LEGACY_SUPPORT as Map<StableRecordIdentifier, LegacySupport>).get(\n      this.___identifier\n    )!;\n    const fetchSyncRel =\n      !this.belongsToRelationship.definition.isAsync && !areAllInverseRecordsLoaded(this.store, this._resource());\n    return fetchSyncRel\n      ? support.reloadBelongsTo(this.key, options).then(() => this.value())\n      : // we cast to fix the return type since typescript and eslint don't understand async functions\n        // properly\n        (support.getBelongsTo(this.key, options) as Promise<RecordInstance | null>);\n  }\n\n  /**\n   Triggers a reload of the value in this relationship. If the\n   remoteType is `\"link\"` Ember Data will use the relationship link to\n   reload the relationship. Otherwise it will reload the record by its\n   id.\n\n   Example\n\n   ```javascript\n   // models/blog.js\n   import Model, { belongsTo } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n     @belongsTo('user', { async: true, inverse: null }) user;\n   }\n\n   let blog = store.push({\n      data: {\n        type: 'blog',\n        id: 1,\n        relationships: {\n          user: {\n            data: { type: 'user', id: 1 }\n          }\n        }\n      }\n    });\n   let userRef = blog.belongsTo('user');\n\n   userRef.reload().then(function(user) {\n      userRef.value() === user\n    });\n   ```\n\n   You may also pass in an options object whose properties will be\n   fed forward. This enables you to pass `adapterOptions` into the\n   request given to the adapter via the reference. A full example\n   can be found in the `load` method.\n\n   Example\n\n   ```javascript\n   userRef.reload({ adapterOptions: { isPrivate: true } })\n   ```\n\n   @method reload\n    @public\n   @param {Object} options the options to pass in.\n   @return {Promise} a promise that resolves with the record in this belongs-to relationship after the reload has completed.\n   */\n  reload(options?: Record<string, unknown>) {\n    const support: LegacySupport = (LEGACY_SUPPORT as Map<StableRecordIdentifier, LegacySupport>).get(\n      this.___identifier\n    )!;\n    return support.reloadBelongsTo(this.key, options).then(() => this.value());\n  }\n}\ndefineSignal(BelongsToReference.prototype, '_ref', 0);\n","import { assert } from '@ember/debug';\n\nimport { importSync } from '@embroider/macros';\n\nimport { DEBUG } from '@ember-data/env';\nimport type { UpgradedMeta } from '@ember-data/graph/-private/-edge-definition';\nimport type { CollectionEdge } from '@ember-data/graph/-private/edges/collection';\nimport type { ResourceEdge } from '@ember-data/graph/-private/edges/resource';\nimport type { Graph, GraphEdge } from '@ember-data/graph/-private/graph';\nimport { upgradeStore } from '@ember-data/legacy-compat/-private';\nimport { HAS_JSON_API_PACKAGE } from '@ember-data/packages';\nimport type Store from '@ember-data/store';\nimport {\n  fastPush,\n  isStableIdentifier,\n  peekCache,\n  recordIdentifierFor,\n  SOURCE,\n  storeFor,\n} from '@ember-data/store/-private';\nimport type { Cache } from '@ember-data/store/-types/q/cache';\nimport type { JsonApiRelationship } from '@ember-data/store/-types/q/record-data-json-api';\nimport type { RecordInstance } from '@ember-data/store/-types/q/record-instance';\nimport type { FindOptions } from '@ember-data/store/-types/q/store';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { CollectionRelationship } from '@warp-drive/core-types/cache/relationship';\nimport type { LocalRelationshipOperation } from '@warp-drive/core-types/graph';\nimport type { CollectionResourceRelationship, SingleResourceRelationship } from '@warp-drive/core-types/spec/raw';\n\nimport RelatedCollection from './many-array';\nimport type { MinimalLegacyRecord } from './model-methods';\nimport type { BelongsToProxyCreateArgs, BelongsToProxyMeta } from './promise-belongs-to';\nimport PromiseBelongsTo from './promise-belongs-to';\nimport type { HasManyProxyCreateArgs } from './promise-many-array';\nimport PromiseManyArray from './promise-many-array';\nimport BelongsToReference from './references/belongs-to';\nimport HasManyReference from './references/has-many';\n\ntype PromiseBelongsToFactory = { create(args: BelongsToProxyCreateArgs): PromiseBelongsTo };\n\nexport const LEGACY_SUPPORT: Map<StableRecordIdentifier | MinimalLegacyRecord, LegacySupport> = new Map();\n\nexport function lookupLegacySupport(record: MinimalLegacyRecord): LegacySupport {\n  const identifier = recordIdentifierFor(record);\n  assert(`Expected a record`, identifier);\n  let support = LEGACY_SUPPORT.get(identifier);\n\n  if (!support) {\n    assert(`Memory Leak Detected`, !record.isDestroyed && !record.isDestroying);\n    support = new LegacySupport(record);\n    LEGACY_SUPPORT.set(identifier, support);\n    LEGACY_SUPPORT.set(record, support);\n  }\n\n  return support;\n}\n\nexport class LegacySupport {\n  declare record: MinimalLegacyRecord;\n  declare store: Store;\n  declare graph: Graph;\n  declare cache: Cache;\n  declare references: Record<string, BelongsToReference | HasManyReference>;\n  declare identifier: StableRecordIdentifier;\n  declare _manyArrayCache: Record<string, RelatedCollection>;\n  declare _relationshipPromisesCache: Record<string, Promise<RelatedCollection | RecordInstance>>;\n  declare _relationshipProxyCache: Record<string, PromiseManyArray | PromiseBelongsTo | undefined>;\n  declare _pending: Record<string, Promise<StableRecordIdentifier | null> | undefined>;\n\n  declare isDestroying: boolean;\n  declare isDestroyed: boolean;\n\n  constructor(record: MinimalLegacyRecord) {\n    this.record = record;\n    this.store = storeFor(record)!;\n    this.identifier = recordIdentifierFor(record);\n    this.cache = peekCache(record);\n\n    if (HAS_JSON_API_PACKAGE) {\n      const graphFor = (importSync('@ember-data/graph/-private') as typeof import('@ember-data/graph/-private'))\n        .graphFor;\n\n      this.graph = graphFor(this.store);\n    }\n\n    this._manyArrayCache = Object.create(null) as Record<string, RelatedCollection>;\n    this._relationshipPromisesCache = Object.create(null) as Record<\n      string,\n      Promise<RelatedCollection | RecordInstance>\n    >;\n    this._relationshipProxyCache = Object.create(null) as Record<string, PromiseManyArray | PromiseBelongsTo>;\n    this._pending = Object.create(null) as Record<string, Promise<StableRecordIdentifier | null>>;\n    this.references = Object.create(null) as Record<string, BelongsToReference>;\n  }\n\n  _syncArray(array: RelatedCollection) {\n    // It’s possible the parent side of the relationship may have been destroyed by this point\n    if (this.isDestroyed || this.isDestroying) {\n      return;\n    }\n    const currentState = array[SOURCE];\n    const identifier = this.identifier;\n\n    const [identifiers, jsonApi] = this._getCurrentState(identifier, array.key);\n\n    if (jsonApi.meta) {\n      array.meta = jsonApi.meta;\n    }\n\n    if (jsonApi.links) {\n      array.links = jsonApi.links;\n    }\n\n    currentState.length = 0;\n    fastPush(currentState, identifiers);\n  }\n\n  mutate(mutation: LocalRelationshipOperation): void {\n    this.cache.mutate(mutation);\n  }\n\n  _findBelongsTo(\n    key: string,\n    resource: SingleResourceRelationship,\n    relationship: ResourceEdge,\n    options?: FindOptions\n  ): Promise<RecordInstance | null> {\n    // TODO @runspired follow up if parent isNew then we should not be attempting load here\n    // TODO @runspired follow up on whether this should be in the relationship requests cache\n    return this._findBelongsToByJsonApiResource(resource, this.identifier, relationship, options).then(\n      (identifier: StableRecordIdentifier | null) =>\n        handleCompletedRelationshipRequest(this, key, relationship, identifier),\n      (e: Error) => handleCompletedRelationshipRequest(this, key, relationship, null, e)\n    );\n  }\n\n  reloadBelongsTo(key: string, options?: FindOptions): Promise<RecordInstance | null> {\n    const loadingPromise = this._relationshipPromisesCache[key] as Promise<RecordInstance | null> | undefined;\n    if (loadingPromise) {\n      return loadingPromise;\n    }\n\n    const relationship = this.graph.get(this.identifier, key);\n    assert(`Expected ${key} to be a belongs-to relationship`, isBelongsTo(relationship));\n\n    const resource = this.cache.getRelationship(this.identifier, key) as SingleResourceRelationship;\n    relationship.state.hasFailedLoadAttempt = false;\n    relationship.state.shouldForceReload = true;\n    const promise = this._findBelongsTo(key, resource, relationship, options);\n    if (this._relationshipProxyCache[key]) {\n      // @ts-expect-error\n      return this._updatePromiseProxyFor('belongsTo', key, { promise });\n    }\n    return promise;\n  }\n\n  getBelongsTo(key: string, options?: FindOptions): PromiseBelongsTo | RecordInstance | null {\n    const { identifier, cache } = this;\n    const resource = cache.getRelationship(this.identifier, key) as SingleResourceRelationship;\n    const relatedIdentifier = resource && resource.data ? resource.data : null;\n    assert(`Expected a stable identifier`, !relatedIdentifier || isStableIdentifier(relatedIdentifier));\n\n    const store = this.store;\n    const relationship = this.graph.get(this.identifier, key);\n    assert(`Expected ${key} to be a belongs-to relationship`, isBelongsTo(relationship));\n\n    const isAsync = relationship.definition.isAsync;\n    const _belongsToState: BelongsToProxyMeta = {\n      key,\n      store,\n      legacySupport: this,\n      modelName: relationship.definition.type,\n    };\n\n    if (isAsync) {\n      if (relationship.state.hasFailedLoadAttempt) {\n        return this._relationshipProxyCache[key] as PromiseBelongsTo;\n      }\n\n      const promise = this._findBelongsTo(key, resource, relationship, options);\n      const isLoaded = relatedIdentifier && store._instanceCache.recordIsLoaded(relatedIdentifier);\n\n      return this._updatePromiseProxyFor('belongsTo', key, {\n        promise,\n        content: isLoaded ? store._instanceCache.getRecord(relatedIdentifier) : null,\n        _belongsToState,\n      });\n    } else {\n      if (relatedIdentifier === null) {\n        return null;\n      } else {\n        const toReturn = store._instanceCache.getRecord(relatedIdentifier);\n        assert(\n          `You looked up the '${key}' relationship on a '${identifier.type}' with id ${\n            identifier.id || 'null'\n          } but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async (\\`belongsTo(<type>, { async: true, inverse: <inverse> })\\`)`,\n          toReturn === null || store._instanceCache.recordIsLoaded(relatedIdentifier, true)\n        );\n        return toReturn;\n      }\n    }\n  }\n\n  setDirtyBelongsTo(key: string, value: RecordInstance | null) {\n    return this.cache.mutate(\n      {\n        op: 'replaceRelatedRecord',\n        record: this.identifier,\n        field: key,\n        value: extractIdentifierFromRecord(value),\n      },\n      // @ts-expect-error\n      true\n    );\n  }\n\n  _getCurrentState(\n    identifier: StableRecordIdentifier,\n    field: string\n  ): [StableRecordIdentifier[], CollectionRelationship] {\n    const jsonApi = this.cache.getRelationship(identifier, field) as CollectionRelationship;\n    const cache = this.store._instanceCache;\n    const identifiers: StableRecordIdentifier[] = [];\n    if (jsonApi.data) {\n      for (let i = 0; i < jsonApi.data.length; i++) {\n        const relatedIdentifier: StableRecordIdentifier = jsonApi.data[i];\n        assert(`Expected a stable identifier`, isStableIdentifier(relatedIdentifier));\n        if (cache.recordIsLoaded(relatedIdentifier, true)) {\n          identifiers.push(relatedIdentifier);\n        }\n      }\n    }\n\n    return [identifiers, jsonApi];\n  }\n\n  getManyArray(key: string, definition?: UpgradedMeta): RelatedCollection {\n    if (HAS_JSON_API_PACKAGE) {\n      let manyArray: RelatedCollection | undefined = this._manyArrayCache[key];\n      if (!definition) {\n        definition = this.graph.get(this.identifier, key).definition;\n      }\n\n      if (!manyArray) {\n        const [identifiers, doc] = this._getCurrentState(this.identifier, key);\n\n        manyArray = new RelatedCollection({\n          store: this.store,\n          type: definition.type,\n          identifier: this.identifier,\n          cache: this.cache,\n          identifiers,\n          key,\n          meta: doc.meta || null,\n          links: doc.links || null,\n          isPolymorphic: definition.isPolymorphic,\n          isAsync: definition.isAsync,\n          _inverseIsAsync: definition.inverseIsAsync,\n          manager: this,\n          isLoaded: !definition.isAsync,\n          allowMutation: true,\n        });\n        this._manyArrayCache[key] = manyArray;\n      }\n\n      return manyArray;\n    }\n    assert('hasMany only works with the @ember-data/json-api package');\n  }\n\n  fetchAsyncHasMany(\n    key: string,\n    relationship: CollectionEdge,\n    manyArray: RelatedCollection,\n    options?: FindOptions\n  ): Promise<RelatedCollection> {\n    if (HAS_JSON_API_PACKAGE) {\n      let loadingPromise = this._relationshipPromisesCache[key] as Promise<RelatedCollection> | undefined;\n      if (loadingPromise) {\n        return loadingPromise;\n      }\n\n      const jsonApi = this.cache.getRelationship(this.identifier, key) as CollectionRelationship;\n      const promise = this._findHasManyByJsonApiResource(jsonApi, this.identifier, relationship, options);\n\n      if (!promise) {\n        manyArray.isLoaded = true;\n        return Promise.resolve(manyArray);\n      }\n\n      loadingPromise = promise.then(\n        () => handleCompletedRelationshipRequest(this, key, relationship, manyArray),\n        (e: Error) => handleCompletedRelationshipRequest(this, key, relationship, manyArray, e)\n      );\n      this._relationshipPromisesCache[key] = loadingPromise;\n      return loadingPromise;\n    }\n    assert('hasMany only works with the @ember-data/json-api package');\n  }\n\n  reloadHasMany(key: string, options?: FindOptions) {\n    if (HAS_JSON_API_PACKAGE) {\n      const loadingPromise = this._relationshipPromisesCache[key];\n      if (loadingPromise) {\n        return loadingPromise;\n      }\n      const relationship = this.graph.get(this.identifier, key) as CollectionEdge;\n      const { definition, state } = relationship;\n\n      state.hasFailedLoadAttempt = false;\n      state.shouldForceReload = true;\n      const manyArray = this.getManyArray(key, definition);\n      const promise = this.fetchAsyncHasMany(key, relationship, manyArray, options);\n\n      if (this._relationshipProxyCache[key]) {\n        return this._updatePromiseProxyFor('hasMany', key, { promise });\n      }\n\n      return promise;\n    }\n    assert(`hasMany only works with the @ember-data/json-api package`);\n  }\n\n  getHasMany(key: string, options?: FindOptions): PromiseManyArray | RelatedCollection {\n    if (HAS_JSON_API_PACKAGE) {\n      const relationship = this.graph.get(this.identifier, key) as CollectionEdge;\n      const { definition, state } = relationship;\n      const manyArray = this.getManyArray(key, definition);\n\n      if (definition.isAsync) {\n        if (state.hasFailedLoadAttempt) {\n          return this._relationshipProxyCache[key] as PromiseManyArray;\n        }\n\n        const promise = this.fetchAsyncHasMany(key, relationship, manyArray, options);\n\n        return this._updatePromiseProxyFor('hasMany', key, { promise, content: manyArray });\n      } else {\n        assert(\n          `You looked up the '${key}' relationship on a '${this.identifier.type}' with id ${\n            this.identifier.id || 'null'\n          } but some of the associated records were not loaded. Either make sure they are all loaded together with the parent record, or specify that the relationship is async ('hasMany(<type>, { async: true, inverse: <inverse> })')`,\n          !anyUnloaded(this.store, relationship)\n        );\n\n        return manyArray;\n      }\n    }\n    assert(`hasMany only works with the @ember-data/json-api package`);\n  }\n\n  _updatePromiseProxyFor(kind: 'hasMany', key: string, args: HasManyProxyCreateArgs): PromiseManyArray;\n  _updatePromiseProxyFor(kind: 'belongsTo', key: string, args: BelongsToProxyCreateArgs): PromiseBelongsTo;\n  _updatePromiseProxyFor(\n    kind: 'belongsTo',\n    key: string,\n    args: { promise: Promise<RecordInstance | null> }\n  ): PromiseBelongsTo;\n  _updatePromiseProxyFor(\n    kind: 'hasMany' | 'belongsTo',\n    key: string,\n    args: BelongsToProxyCreateArgs | HasManyProxyCreateArgs | { promise: Promise<RecordInstance | null> }\n  ): PromiseBelongsTo | PromiseManyArray {\n    let promiseProxy = this._relationshipProxyCache[key];\n    if (kind === 'hasMany') {\n      const { promise, content } = args as HasManyProxyCreateArgs;\n      if (promiseProxy) {\n        assert(`Expected a PromiseManyArray`, '_update' in promiseProxy);\n        promiseProxy._update(promise, content);\n      } else {\n        promiseProxy = this._relationshipProxyCache[key] = new PromiseManyArray(promise, content);\n      }\n      return promiseProxy;\n    }\n    if (promiseProxy) {\n      const { promise, content } = args as BelongsToProxyCreateArgs;\n      assert(`Expected a PromiseBelongsTo`, '_belongsToState' in promiseProxy);\n\n      if (content !== undefined) {\n        promiseProxy.set('content', content);\n      }\n      void promiseProxy.set('promise', promise);\n    } else {\n      promiseProxy = (PromiseBelongsTo as unknown as PromiseBelongsToFactory).create(args as BelongsToProxyCreateArgs);\n      this._relationshipProxyCache[key] = promiseProxy;\n    }\n\n    return promiseProxy;\n  }\n\n  referenceFor(kind: string | null, name: string) {\n    let reference = this.references[name];\n\n    if (!reference) {\n      if (!HAS_JSON_API_PACKAGE) {\n        // TODO @runspired while this feels odd, it is not a regression in capability because we do\n        // not today support references pulling from RecordDatas other than our own\n        // because of the intimate API access involved. This is something we will need to redesign.\n        assert(`snapshot.belongsTo only supported for @ember-data/json-api`);\n      }\n      const { graph, identifier } = this;\n      const relationship = graph.get(identifier, name);\n\n      if (DEBUG) {\n        if (kind) {\n          const modelName = identifier.type;\n          const actualRelationshipKind = relationship.definition.kind;\n          assert(\n            `You tried to get the '${name}' relationship on a '${modelName}' via record.${kind}('${name}'), but the relationship is of kind '${actualRelationshipKind}'. Use record.${actualRelationshipKind}('${name}') instead.`,\n            actualRelationshipKind === kind\n          );\n        }\n      }\n\n      const relationshipKind = relationship.definition.kind;\n\n      if (relationshipKind === 'belongsTo') {\n        reference = new BelongsToReference(this.store, graph, identifier, relationship as ResourceEdge, name);\n      } else if (relationshipKind === 'hasMany') {\n        reference = new HasManyReference(this.store, graph, identifier, relationship as CollectionEdge, name);\n      }\n\n      this.references[name] = reference;\n    }\n\n    return reference;\n  }\n\n  _findHasManyByJsonApiResource(\n    resource: CollectionResourceRelationship,\n    parentIdentifier: StableRecordIdentifier,\n    relationship: CollectionEdge,\n    options: FindOptions = {}\n  ): Promise<void | unknown[]> | void {\n    if (HAS_JSON_API_PACKAGE) {\n      if (!resource) {\n        return;\n      }\n      const { definition, state } = relationship;\n      upgradeStore(this.store);\n      const adapter = this.store.adapterFor(definition.type);\n      const { isStale, hasDematerializedInverse, hasReceivedData, isEmpty, shouldForceReload } = state;\n      const allInverseRecordsAreLoaded = areAllInverseRecordsLoaded(this.store, resource);\n      const identifiers = resource.data;\n      const shouldFindViaLink =\n        resource.links &&\n        resource.links.related &&\n        (typeof adapter.findHasMany === 'function' || typeof identifiers === 'undefined') &&\n        (shouldForceReload || hasDematerializedInverse || isStale || (!allInverseRecordsAreLoaded && !isEmpty));\n\n      const relationshipMeta = this.store\n        .getSchemaDefinitionService()\n        .relationshipsDefinitionFor({ type: definition.inverseType })[definition.key];\n\n      const request = {\n        useLink: shouldFindViaLink,\n        field: relationshipMeta,\n        links: resource.links,\n        meta: resource.meta,\n        options,\n        record: parentIdentifier,\n      };\n\n      // fetch via link\n      if (shouldFindViaLink) {\n        assert(`Expected collection to be an array`, !identifiers || Array.isArray(identifiers));\n        assert(`Expected stable identifiers`, !identifiers || identifiers.every(isStableIdentifier));\n\n        return this.store.request({\n          op: 'findHasMany',\n          records: identifiers || [],\n          data: request,\n          cacheOptions: { [Symbol.for('wd:skip-cache')]: true },\n        }) as unknown as Promise<void>;\n      }\n\n      const preferLocalCache = hasReceivedData && !isEmpty;\n      const hasLocalPartialData =\n        hasDematerializedInverse || (isEmpty && Array.isArray(identifiers) && identifiers.length > 0);\n      const attemptLocalCache = !shouldForceReload && !isStale && (preferLocalCache || hasLocalPartialData);\n\n      if (attemptLocalCache && allInverseRecordsAreLoaded) {\n        return;\n      }\n\n      const hasData = hasReceivedData && !isEmpty;\n      if (attemptLocalCache || hasData || hasLocalPartialData) {\n        assert(`Expected collection to be an array`, Array.isArray(identifiers));\n        assert(`Expected stable identifiers`, identifiers.every(isStableIdentifier));\n\n        options.reload = options.reload || !attemptLocalCache || undefined;\n        return this.store.request({\n          op: 'findHasMany',\n          records: identifiers,\n          data: request,\n          cacheOptions: { [Symbol.for('wd:skip-cache')]: true },\n        }) as unknown as Promise<void>;\n      }\n\n      // we were explicitly told we have no data and no links.\n      //   TODO if the relationshipIsStale, should we hit the adapter anyway?\n      return;\n    }\n    assert(`hasMany only works with the @ember-data/json-api package`);\n  }\n\n  _findBelongsToByJsonApiResource(\n    resource: SingleResourceRelationship,\n    parentIdentifier: StableRecordIdentifier,\n    relationship: ResourceEdge,\n    options: FindOptions = {}\n  ): Promise<StableRecordIdentifier | null> {\n    if (!resource) {\n      return Promise.resolve(null);\n    }\n    const key = relationship.definition.key;\n\n    // interleaved promises mean that we MUST cache this here\n    // in order to prevent infinite re-render if the request\n    // fails.\n    if (this._pending[key]) {\n      return this._pending[key]!;\n    }\n\n    const identifier = resource.data ? resource.data : null;\n    assert(`Expected a stable identifier`, !identifier || isStableIdentifier(identifier));\n\n    const { isStale, hasDematerializedInverse, hasReceivedData, isEmpty, shouldForceReload } = relationship.state;\n\n    const allInverseRecordsAreLoaded = areAllInverseRecordsLoaded(this.store, resource);\n    const shouldFindViaLink =\n      resource.links?.related &&\n      (shouldForceReload || hasDematerializedInverse || isStale || (!allInverseRecordsAreLoaded && !isEmpty));\n\n    const relationshipMeta = this.store.getSchemaDefinitionService().relationshipsDefinitionFor(this.identifier)[\n      relationship.definition.key\n    ];\n    assert(`Attempted to access a belongsTo relationship but no definition exists for it`, relationshipMeta);\n    const request = {\n      useLink: shouldFindViaLink,\n      field: relationshipMeta,\n      links: resource.links,\n      meta: resource.meta,\n      options,\n      record: parentIdentifier,\n    };\n\n    // fetch via link\n    if (shouldFindViaLink) {\n      const future = this.store.request<StableRecordIdentifier | null>({\n        op: 'findBelongsTo',\n        records: identifier ? [identifier] : [],\n        data: request,\n        cacheOptions: { [Symbol.for('wd:skip-cache')]: true },\n      });\n      this._pending[key] = future\n        .then((doc) => doc.content)\n        .finally(() => {\n          this._pending[key] = undefined;\n        });\n      return this._pending[key]!;\n    }\n\n    const preferLocalCache = hasReceivedData && allInverseRecordsAreLoaded && !isEmpty;\n    const hasLocalPartialData = hasDematerializedInverse || (isEmpty && resource.data);\n    // null is explicit empty, undefined is \"we don't know anything\"\n    const localDataIsEmpty = !identifier;\n    const attemptLocalCache = !shouldForceReload && !isStale && (preferLocalCache || hasLocalPartialData);\n\n    // we dont need to fetch and are empty\n    if (attemptLocalCache && localDataIsEmpty) {\n      return Promise.resolve(null);\n    }\n\n    // we dont need to fetch because we are local state\n    const resourceIsLocal = identifier?.id === null;\n    if ((attemptLocalCache && allInverseRecordsAreLoaded) || resourceIsLocal) {\n      return Promise.resolve(identifier);\n    }\n\n    // we may need to fetch\n    if (identifier) {\n      assert(`Cannot fetch belongs-to relationship with no information`, identifier);\n      options.reload = options.reload || !attemptLocalCache || undefined;\n\n      this._pending[key] = this.store\n        .request<StableRecordIdentifier | null>({\n          op: 'findBelongsTo',\n          records: [identifier],\n          data: request,\n          cacheOptions: { [Symbol.for('wd:skip-cache')]: true },\n        })\n        .then((doc) => doc.content)\n        .finally(() => {\n          this._pending[key] = undefined;\n        });\n      return this._pending[key]!;\n    }\n\n    // we were explicitly told we have no data and no links.\n    //   TODO if the relationshipIsStale, should we hit the adapter anyway?\n    return Promise.resolve(null);\n  }\n\n  destroy() {\n    this.isDestroying = true;\n\n    let cache: Record<string, { destroy(): void } | undefined> = this._manyArrayCache;\n    this._manyArrayCache = Object.create(null) as Record<string, RelatedCollection>;\n    Object.keys(cache).forEach((key) => {\n      cache[key]!.destroy();\n    });\n\n    cache = this._relationshipProxyCache;\n    this._relationshipProxyCache = Object.create(null) as Record<string, PromiseManyArray | PromiseBelongsTo>;\n    Object.keys(cache).forEach((key) => {\n      const proxy = cache[key]!;\n      if (proxy.destroy) {\n        proxy.destroy();\n      }\n    });\n\n    cache = this.references;\n    this.references = Object.create(null) as Record<string, BelongsToReference | HasManyReference>;\n    Object.keys(cache).forEach((key) => {\n      cache[key]!.destroy();\n    });\n    this.isDestroyed = true;\n  }\n}\n\nfunction handleCompletedRelationshipRequest(\n  recordExt: LegacySupport,\n  key: string,\n  relationship: ResourceEdge,\n  value: StableRecordIdentifier | null\n): RecordInstance | null;\nfunction handleCompletedRelationshipRequest(\n  recordExt: LegacySupport,\n  key: string,\n  relationship: CollectionEdge,\n  value: RelatedCollection\n): RelatedCollection;\nfunction handleCompletedRelationshipRequest(\n  recordExt: LegacySupport,\n  key: string,\n  relationship: ResourceEdge,\n  value: null,\n  error: Error\n): never;\nfunction handleCompletedRelationshipRequest(\n  recordExt: LegacySupport,\n  key: string,\n  relationship: CollectionEdge,\n  value: RelatedCollection,\n  error: Error\n): never;\nfunction handleCompletedRelationshipRequest(\n  recordExt: LegacySupport,\n  key: string,\n  relationship: ResourceEdge | CollectionEdge,\n  value: RelatedCollection | StableRecordIdentifier | null,\n  error?: Error\n): RelatedCollection | RecordInstance | null {\n  delete recordExt._relationshipPromisesCache[key];\n  relationship.state.shouldForceReload = false;\n  const isHasMany = relationship.definition.kind === 'hasMany';\n\n  if (isHasMany) {\n    // we don't notify the record property here to avoid refetch\n    // only the many array\n    (value as RelatedCollection).notify();\n  }\n\n  if (error) {\n    relationship.state.hasFailedLoadAttempt = true;\n    const proxy = recordExt._relationshipProxyCache[key];\n    // belongsTo relationships are sometimes unloaded\n    // when a load fails, in this case we need\n    // to make sure that we aren't proxying\n    // to destroyed content\n    // for the sync belongsTo reload case there will be no proxy\n    // for the async reload case there will be no proxy if the ui\n    // has never been accessed\n    if (proxy && !isHasMany) {\n      // @ts-expect-error unsure why this is not resolving the boolean but async belongsTo is weird\n      if (proxy.content && proxy.content.isDestroying) {\n        (proxy as PromiseBelongsTo).set('content', null);\n      }\n      recordExt.store.notifications._flush();\n    }\n\n    throw error;\n  }\n\n  if (isHasMany) {\n    (value as RelatedCollection).isLoaded = true;\n  } else {\n    recordExt.store.notifications._flush();\n  }\n\n  relationship.state.hasFailedLoadAttempt = false;\n  // only set to not stale if no error is thrown\n  relationship.state.isStale = false;\n\n  return isHasMany || !value\n    ? (value as RelatedCollection | null)\n    : recordExt.store.peekRecord(value as StableRecordIdentifier);\n}\n\ntype PromiseProxyRecord = { then(): void; content: RecordInstance | null | undefined };\n\nfunction extractIdentifierFromRecord(record: PromiseProxyRecord | RecordInstance | null) {\n  if (!record) {\n    return null;\n  }\n\n  return recordIdentifierFor(record);\n}\n\nfunction anyUnloaded(store: Store, relationship: CollectionEdge) {\n  const graph = store._graph;\n  assert(`Expected a Graph instance to be available`, graph);\n  const relationshipData = graph.getData(\n    relationship.identifier,\n    relationship.definition.key\n  ) as CollectionRelationship;\n  const state = relationshipData.data;\n  const cache = store._instanceCache;\n  const unloaded = state?.find((s) => {\n    const isLoaded = cache.recordIsLoaded(s, true);\n    return !isLoaded;\n  });\n\n  return unloaded || false;\n}\n\nexport function areAllInverseRecordsLoaded(store: Store, resource: JsonApiRelationship): boolean {\n  const instanceCache = store._instanceCache;\n  const identifiers = resource.data;\n\n  if (Array.isArray(identifiers)) {\n    assert(`Expected stable identifiers`, identifiers.every(isStableIdentifier));\n    // treat as collection\n    // check for unloaded records\n    return identifiers.every((identifier: StableRecordIdentifier) => instanceCache.recordIsLoaded(identifier));\n  }\n\n  // treat as single resource\n  if (!identifiers) return true;\n\n  assert(`Expected stable identifiers`, isStableIdentifier(identifiers));\n  return instanceCache.recordIsLoaded(identifiers);\n}\n\nfunction isBelongsTo(relationship: GraphEdge): relationship is ResourceEdge {\n  return relationship.definition.kind === 'belongsTo';\n}\n","export default function _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}","import { A, type NativeArray } from '@ember/array';\nimport ArrayProxy from '@ember/array/proxy';\nimport { computed, get } from '@ember/object';\nimport { mapBy, not } from '@ember/object/computed';\n\nimport type RecordState from './record-state';\n\ntype ValidationError = {\n  attribute: string;\n  message: string;\n};\n/**\n  @module @ember-data/model\n*/\ninterface ArrayProxyWithCustomOverrides<T> extends Omit<ArrayProxy<T>, 'clear' | 'content'> {\n  // Omit causes `content` to be merged with the class def for ArrayProxy\n  // which then causes it to be seen as a property, disallowing defining it\n  // as an accessor. This restores our ability to define it as an accessor.\n  content: NativeArray<T>;\n  clear(): void;\n  _has(name: string): boolean;\n}\n\n// we force the type here to our own construct because mixin and extend patterns\n// lose generic signatures. We also do this because we need to Omit `clear` from\n// the type of ArrayProxy as we override it's signature.\nconst ArrayProxyWithCustomOverrides = ArrayProxy as unknown as new <T>() => ArrayProxyWithCustomOverrides<T>;\n\n/**\n  Holds validation errors for a given record, organized by attribute names.\n\n  This class is not directly instantiable.\n\n  Every `Model` has an `errors` property that is an instance of\n  `Errors`. This can be used to display validation error\n  messages returned from the server when a `record.save()` rejects.\n\n  For Example, if you had a `User` model that looked like this:\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('string') username;\n    @attr('string') email;\n  }\n  ```\n  And you attempted to save a record that did not validate on the backend:\n\n  ```javascript\n  let user = store.createRecord('user', {\n    username: 'tomster',\n    email: 'invalidEmail'\n  });\n  user.save();\n  ```\n\n  Your backend would be expected to return an error response that described\n  the problem, so that error messages can be generated on the app.\n\n  API responses will be translated into instances of `Errors` differently,\n  depending on the specific combination of adapter and serializer used. You\n  may want to check the documentation or the source code of the libraries\n  that you are using, to know how they expect errors to be communicated.\n\n  Errors can be displayed to the user by accessing their property name\n  to get an array of all the error objects for that property. Each\n  error object is a JavaScript object with two keys:\n\n  - `message` A string containing the error message from the backend\n  - `attribute` The name of the property associated with this error message\n\n  ```handlebars\n  <label>Username: <Input @value={{@model.username}} /> </label>\n  {{#each @model.errors.username as |error|}}\n    <div class=\"error\">\n      {{error.message}}\n    </div>\n  {{/each}}\n\n  <label>Email: <Input @value={{@model.email}} /> </label>\n  {{#each @model.errors.email as |error|}}\n    <div class=\"error\">\n      {{error.message}}\n    </div>\n  {{/each}}\n  ```\n\n  You can also access the special `messages` property on the error\n  object to get an array of all the error strings.\n\n  ```handlebars\n  {{#each @model.errors.messages as |message|}}\n    <div class=\"error\">\n      {{message}}\n    </div>\n  {{/each}}\n  ```\n\n  @class Errors\n  @public\n  @extends Ember.ArrayProxy\n */\nclass Errors extends ArrayProxyWithCustomOverrides<ValidationError> {\n  declare __record: { currentState: RecordState };\n  /**\n    @property errorsByAttributeName\n    @type {MapWithDefault}\n    @private\n  */\n  @computed()\n  get errorsByAttributeName(): Map<string, NativeArray<ValidationError>> {\n    return new Map();\n  }\n\n  /**\n    Returns errors for a given attribute\n\n    ```javascript\n    let user = store.createRecord('user', {\n      username: 'tomster',\n      email: 'invalidEmail'\n    });\n    user.save().catch(function(){\n      user.errors.errorsFor('email'); // returns:\n      // [{attribute: \"email\", message: \"Doesn't look like a valid email.\"}]\n    });\n    ```\n\n    @method errorsFor\n    @public\n    @param {String} attribute\n    @return {Array}\n  */\n  errorsFor(attribute: string): NativeArray<ValidationError> {\n    const map = this.errorsByAttributeName;\n\n    let errors = map.get(attribute);\n\n    if (errors === undefined) {\n      errors = A<ValidationError>();\n      map.set(attribute, errors);\n    }\n\n    // Errors may be a native array with extensions turned on. Since we access\n    // the array via a method, and not a computed or using `Ember.get`, it does\n    // not entangle properly with autotracking, so we entangle manually by\n    // getting the `[]` property.\n    get(errors, '[]');\n\n    return errors;\n  }\n\n  /**\n    An array containing all of the error messages for this\n    record. This is useful for displaying all errors to the user.\n\n    ```handlebars\n    {{#each @model.errors.messages as |message|}}\n      <div class=\"error\">\n        {{message}}\n      </div>\n    {{/each}}\n    ```\n\n    @property messages\n    @public\n    @type {Array}\n  */\n  @mapBy('content', 'message')\n  declare messages: string[];\n\n  /**\n    @property content\n    @type {Array}\n    @private\n  */\n  @computed()\n  override get content(): NativeArray<ValidationError> {\n    return A();\n  }\n\n  /**\n    @method unknownProperty\n    @private\n  */\n  unknownProperty(attribute: string) {\n    const errors = this.errorsFor(attribute);\n    if (errors.length === 0) {\n      return undefined;\n    }\n    return errors;\n  }\n\n  /**\n    Total number of errors.\n\n    @property length\n    @type {Number}\n    @public\n    @readOnly\n  */\n\n  /**\n    `true` if we have no errors.\n\n    @property isEmpty\n    @type {Boolean}\n    @public\n    @readOnly\n  */\n  @not('length')\n  declare isEmpty: boolean;\n\n  /**\n   Manually adds errors to the record. This will trigger the `becameInvalid` event/ lifecycle method on\n    the record and transition the record into an `invalid` state.\n\n   Example\n   ```javascript\n    let errors = user.errors;\n\n    // add multiple errors\n    errors.add('password', [\n      'Must be at least 12 characters',\n      'Must contain at least one symbol',\n      'Cannot contain your name'\n    ]);\n\n    errors.errorsFor('password');\n    // =>\n    // [\n    //   { attribute: 'password', message: 'Must be at least 12 characters' },\n    //   { attribute: 'password', message: 'Must contain at least one symbol' },\n    //   { attribute: 'password', message: 'Cannot contain your name' },\n    // ]\n\n    // add a single error\n    errors.add('username', 'This field is required');\n\n    errors.errorsFor('username');\n    // =>\n    // [\n    //   { attribute: 'username', message: 'This field is required' },\n    // ]\n   ```\n    @method add\n    @public\n    @param {string} attribute - the property name of an attribute or relationship\n    @param {string[]|string} messages - an error message or array of error messages for the attribute\n   */\n  add(attribute: string, messages: string[] | string): void {\n    const errors = this._findOrCreateMessages(attribute, messages);\n    this.addObjects(errors);\n\n    this.errorsFor(attribute).addObjects(errors);\n    this.__record.currentState.notify('isValid');\n\n    this.notifyPropertyChange(attribute);\n  }\n\n  /**\n    @method _findOrCreateMessages\n    @private\n  */\n  _findOrCreateMessages(attribute: string, messages: string | string[]): ValidationError[] {\n    const errors = this.errorsFor(attribute);\n    const messagesArray = Array.isArray(messages) ? messages : [messages];\n    const _messages: ValidationError[] = new Array(messagesArray.length) as ValidationError[];\n\n    for (let i = 0; i < messagesArray.length; i++) {\n      const message = messagesArray[i];\n      const err = errors.findBy('message', message);\n      if (err) {\n        _messages[i] = err;\n      } else {\n        _messages[i] = {\n          attribute: attribute,\n          message,\n        };\n      }\n    }\n\n    return _messages;\n  }\n\n  /**\n   Manually removes all errors for a given member from the record.\n     This will transition the record into a `valid` state, and\n    triggers the `becameValid` event and lifecycle method.\n\n   Example:\n\n   ```javascript\n    let errors = user.errors;\n    errors.add('phone', ['error-1', 'error-2']);\n\n    errors.errorsFor('phone');\n    // =>\n    // [\n    //   { attribute: 'phone', message: 'error-1' },\n    //   { attribute: 'phone', message: 'error-2' },\n    // ]\n\n    errors.remove('phone');\n\n    errors.errorsFor('phone');\n    // => undefined\n   ```\n   @method remove\n    @public\n   @param {string} member - the property name of an attribute or relationship\n   */\n  remove(attribute: string) {\n    if (this.isEmpty) {\n      return;\n    }\n\n    const content = this.rejectBy('attribute', attribute);\n    this.content.setObjects(content);\n\n    // Although errorsByAttributeName.delete is technically enough to sync errors state, we also\n    // must mutate the array as well for autotracking\n    const errors = this.errorsFor(attribute);\n    for (let i = 0; i < errors.length; i++) {\n      if (errors[i].attribute === attribute) {\n        // .replace from Ember.NativeArray is necessary. JS splice will not work.\n        errors.replace(i, 1);\n      }\n    }\n    this.errorsByAttributeName.delete(attribute);\n\n    this.__record.currentState.notify('isValid');\n    this.notifyPropertyChange(attribute);\n    this.notifyPropertyChange('length');\n  }\n\n  /**\n   Manually clears all errors for the record.\n     This will transition the record into a `valid` state, and\n     will trigger the `becameValid` event and lifecycle method.\n\n  Example:\n\n   ```javascript\n   let errors = user.errors;\n   errors.add('username', ['error-a']);\n   errors.add('phone', ['error-1', 'error-2']);\n\n   errors.errorsFor('username');\n   // =>\n   // [\n   //   { attribute: 'username', message: 'error-a' },\n   // ]\n\n   errors.errorsFor('phone');\n   // =>\n   // [\n   //   { attribute: 'phone', message: 'error-1' },\n   //   { attribute: 'phone', message: 'error-2' },\n   // ]\n\n   errors.clear();\n\n   errors.errorsFor('username');\n   // => undefined\n\n   errors.errorsFor('phone');\n   // => undefined\n\n   errors.messages\n   // => []\n   ```\n   @method clear\n   @public\n   */\n  override clear(): void {\n    if (this.isEmpty) {\n      return;\n    }\n\n    const errorsByAttributeName = this.errorsByAttributeName;\n    const attributes: string[] = [];\n\n    errorsByAttributeName.forEach(function (_, attribute) {\n      attributes.push(attribute);\n    });\n\n    errorsByAttributeName.clear();\n    attributes.forEach((attribute) => {\n      this.notifyPropertyChange(attribute);\n    });\n\n    this.__record.currentState.notify('isValid');\n    super.clear();\n  }\n\n  /**\n    Checks if there are error messages for the given attribute.\n\n    ```app/controllers/user/edit.js\n    import Controller from '@ember/controller';\n    import { action } from '@ember/object';\n\n    export default class UserEditController extends Controller {\n      @action\n      save(user) {\n        if (user.errors.has('email')) {\n          return alert('Please update your email before attempting to save.');\n        }\n        user.save();\n      }\n    }\n    ```\n\n    @method has\n    @public\n    @param {String} attribute\n    @return {Boolean} true if there some errors on given attribute\n  */\n  has(attribute: string): boolean {\n    return this.errorsFor(attribute).length > 0;\n  }\n}\n\nexport default Errors;\n","import { assert } from '@ember/debug';\n\nimport { importSync } from '@embroider/macros';\n\nimport { upgradeStore } from '@ember-data/legacy-compat/-private';\nimport type Store from '@ember-data/store';\nimport { recordIdentifierFor } from '@ember-data/store';\nimport { peekCache } from '@ember-data/store/-private';\nimport { RecordStore } from '@warp-drive/core-types/symbols';\n\nimport type Errors from './errors';\nimport { lookupLegacySupport } from './legacy-relationships-support';\nimport type RecordState from './record-state';\n\nexport interface MinimalLegacyRecord {\n  errors: Errors;\n  ___recordState: RecordState;\n  currentState: RecordState;\n  isDestroyed: boolean;\n  isDestroying: boolean;\n  isReloading: boolean;\n  [RecordStore]: Store;\n\n  deleteRecord(): void;\n  unloadRecord(): void;\n  save<T extends MinimalLegacyRecord>(this: T, options?: Record<string, unknown>): Promise<T>;\n  destroyRecord<T extends MinimalLegacyRecord>(this: T, options?: Record<string, unknown>): Promise<T>;\n}\n\nexport function rollbackAttributes(this: MinimalLegacyRecord) {\n  const { currentState } = this;\n  const { isNew } = currentState;\n\n  this[RecordStore]._join(() => {\n    peekCache(this).rollbackAttrs(recordIdentifierFor(this));\n    this.errors.clear();\n    currentState.cleanErrorRequests();\n    if (isNew) {\n      this.unloadRecord();\n    }\n  });\n}\n\nexport function unloadRecord(this: MinimalLegacyRecord) {\n  if (this.currentState.isNew && (this.isDestroyed || this.isDestroying)) {\n    return;\n  }\n  this[RecordStore].unloadRecord(this);\n}\n\nexport function belongsTo(this: MinimalLegacyRecord, prop: string) {\n  return lookupLegacySupport(this).referenceFor('belongsTo', prop);\n}\n\nexport function hasMany(this: MinimalLegacyRecord, prop: string) {\n  return lookupLegacySupport(this).referenceFor('hasMany', prop);\n}\n\nexport function reload(this: MinimalLegacyRecord, options: Record<string, unknown> = {}) {\n  options.isReloading = true;\n  options.reload = true;\n\n  const identifier = recordIdentifierFor(this);\n  assert(`You cannot reload a record without an ID`, identifier.id);\n\n  this.isReloading = true;\n  const promise = this[RecordStore].request({\n    op: 'findRecord',\n    data: {\n      options,\n      record: identifier,\n    },\n    cacheOptions: { [Symbol.for('wd:skip-cache')]: true },\n  })\n    .then(() => this)\n    .finally(() => {\n      this.isReloading = false;\n    });\n\n  return promise;\n}\n\nexport function changedAttributes(this: MinimalLegacyRecord) {\n  return peekCache(this).changedAttrs(recordIdentifierFor(this));\n}\n\nexport function serialize(this: MinimalLegacyRecord, options?: Record<string, unknown>) {\n  upgradeStore(this[RecordStore]);\n  return this[RecordStore].serializeRecord(this, options);\n}\n\nexport function deleteRecord(this: MinimalLegacyRecord) {\n  // ensure we've populated currentState prior to deleting a new record\n  if (this.currentState) {\n    this[RecordStore].deleteRecord(this);\n  }\n}\n\nexport function save<T extends MinimalLegacyRecord>(this: T, options?: Record<string, unknown>): Promise<T> {\n  let promise: Promise<T>;\n\n  if (this.currentState.isNew && this.currentState.isDeleted) {\n    promise = Promise.resolve(this);\n  } else {\n    this.errors.clear();\n    promise = this[RecordStore].saveRecord(this, options) as Promise<T>;\n  }\n\n  return promise;\n}\n\nexport function destroyRecord(this: MinimalLegacyRecord, options?: Record<string, unknown>) {\n  const { isNew } = this.currentState;\n  this.deleteRecord();\n  if (isNew) {\n    return Promise.resolve(this);\n  }\n  return this.save(options).then((_) => {\n    this.unloadRecord();\n    return this;\n  });\n}\n\nexport function createSnapshot(this: MinimalLegacyRecord) {\n  const store = this[RecordStore];\n\n  upgradeStore(store);\n  if (!store._fetchManager) {\n    const FetchManager = (\n      importSync('@ember-data/legacy-compat/-private') as typeof import('@ember-data/legacy-compat/-private')\n    ).FetchManager;\n    store._fetchManager = new FetchManager(store);\n  }\n\n  return store._fetchManager.createSnapshot(recordIdentifierFor(this));\n}\n","import { assert } from '@ember/debug';\nimport { cacheFor } from '@ember/object/internals';\n\nimport type Store from '@ember-data/store';\nimport type { NotificationType } from '@ember-data/store/-private/managers/notification-manager';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\nimport type { RelationshipSchema } from '@warp-drive/core-types/schema';\n\nimport { LEGACY_SUPPORT } from './legacy-relationships-support';\nimport type Model from './model';\n\nexport default function notifyChanges(\n  identifier: StableRecordIdentifier,\n  value: NotificationType,\n  key: string | undefined,\n  record: Model,\n  store: Store\n) {\n  if (value === 'attributes') {\n    if (key) {\n      notifyAttribute(store, identifier, key, record);\n    } else {\n      record.eachAttribute((name) => {\n        notifyAttribute(store, identifier, name, record);\n      });\n    }\n  } else if (value === 'relationships') {\n    if (key) {\n      const meta = record.constructor.relationshipsByName.get(key);\n      assert(`Expected to find a relationship for ${key} on ${identifier.type}`, meta);\n      notifyRelationship(identifier, key, record, meta);\n    } else {\n      record.eachRelationship((name, meta) => {\n        notifyRelationship(identifier, name, record, meta);\n      });\n    }\n  } else if (value === 'identity') {\n    record.notifyPropertyChange('id');\n  }\n}\n\nfunction notifyRelationship(identifier: StableRecordIdentifier, key: string, record: Model, meta: RelationshipSchema) {\n  if (meta.kind === 'belongsTo') {\n    record.notifyPropertyChange(key);\n  } else if (meta.kind === 'hasMany') {\n    const support = LEGACY_SUPPORT.get(identifier);\n    const manyArray = support && support._manyArrayCache[key];\n    const hasPromise = support && support._relationshipPromisesCache[key];\n\n    if (manyArray && hasPromise) {\n      // do nothing, we will notify the ManyArray directly\n      // once the fetch has completed.\n      return;\n    }\n\n    if (manyArray) {\n      manyArray.notify();\n\n      //We need to notifyPropertyChange in the adding case because we need to make sure\n      //we fetch the newly added record in case it is unloaded\n      //TODO(Igor): Consider whether we could do this only if the record state is unloaded\n      assert(`Expected options to exist on relationship meta`, meta.options);\n      assert(`Expected async to exist on relationship meta options`, 'async' in meta.options);\n      if (meta.options.async) {\n        record.notifyPropertyChange(key);\n      }\n    }\n  }\n}\n\nfunction notifyAttribute(store: Store, identifier: StableRecordIdentifier, key: string, record: Model) {\n  const currentValue = cacheFor(record, key);\n  const cache = store.cache;\n  if (currentValue !== cache.getAttr(identifier, key)) {\n    record.notifyPropertyChange(key);\n  }\n}\n","import { assert } from '@ember/debug';\n\nimport type Store from '@ember-data/store';\nimport { storeFor } from '@ember-data/store';\nimport { recordIdentifierFor } from '@ember-data/store/-private';\nimport type { NotificationType } from '@ember-data/store/-private/managers/notification-manager';\nimport type RequestStateService from '@ember-data/store/-private/network/request-cache';\nimport type { RequestState } from '@ember-data/store/-private/network/request-cache';\nimport type { Cache } from '@ember-data/store/-types/q/cache';\nimport { cached, compat } from '@ember-data/tracking';\nimport { addToTransaction, defineSignal, getSignal, peekSignal, subscribe } from '@ember-data/tracking/-private';\nimport type { StableRecordIdentifier } from '@warp-drive/core-types';\n\nimport type Errors from './errors';\nimport type { MinimalLegacyRecord } from './model-methods';\n\nconst SOURCE_POINTER_REGEXP = /^\\/?data\\/(attributes|relationships)\\/(.*)/;\nconst SOURCE_POINTER_PRIMARY_REGEXP = /^\\/?data/;\nconst PRIMARY_ATTRIBUTE_KEY = 'base';\nfunction isInvalidError(error: unknown): error is Error & { isAdapterError: true; code: 'InvalidError' } {\n  return (\n    !!error &&\n    error instanceof Error &&\n    'isAdapterError' in error &&\n    error.isAdapterError === true &&\n    'code' in error &&\n    error.code === 'InvalidError'\n  );\n}\n\n/**\n * A decorator that caches a getter while\n * providing the ability to bust that cache\n * when we so choose in a way that notifies\n * tracking systems.\n *\n * @internal\n */\nexport function tagged<T extends object, K extends keyof T & string>(_target: T, key: K, desc: PropertyDescriptor) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const getter = desc.get as (this: T) => unknown;\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const setter = desc.set as (this: T, v: unknown) => void;\n\n  desc.get = function (this: T) {\n    const signal = getSignal(this, key, true);\n    subscribe(signal);\n\n    if (signal.shouldReset) {\n      signal.shouldReset = false;\n      signal.lastValue = getter.call(this);\n    }\n\n    return signal.lastValue;\n  };\n  desc.set = function (this: T, v: unknown) {\n    getSignal(this, key, true); // ensure signal is setup in case we want to use it.\n    // probably notify here but not yet.\n    setter.call(this, v);\n  };\n  compat(desc);\n  return desc;\n}\n\nexport function notifySignal<T extends object, K extends keyof T & string>(obj: T, key: K) {\n  const signal = peekSignal(obj, key);\n  if (signal) {\n    signal.shouldReset = true;\n    addToTransaction(signal);\n  }\n}\n\n/**\nHistorically EmberData managed a state machine\nfor each record, the localState for which\nwas reflected onto Model.\n\nThis implements the flags and stateName for backwards compat\nwith the state tree that used to be possible (listed below).\n\nstateName and dirtyType are candidates for deprecation.\n\nroot\n  empty\n    deleted    // hidden from stateName\n    preloaded  // hidden from stateName\n\n  loading\n     empty     // hidden from stateName\n     preloaded // hidden from stateName\n\n  loaded\n    saved\n    updated\n      uncommitted\n      invalid\n      inFlight\n    created\n      uncommitted\n      invalid\n      inFlight\n\n  deleted\n    saved\n      new      // hidden from stateName\n    uncommitted\n    invalid\n    inFlight\n\n  @internal\n*/\nexport default class RecordState {\n  declare store: Store;\n  declare identifier: StableRecordIdentifier;\n  declare record: MinimalLegacyRecord;\n  declare rs: RequestStateService;\n\n  declare pendingCount: number;\n  declare fulfilledCount: number;\n  declare rejectedCount: number;\n  declare cache: Cache;\n  declare _errorRequests: RequestState[];\n  declare _lastError: RequestState | null;\n  declare handler: object;\n\n  constructor(record: MinimalLegacyRecord) {\n    const store = storeFor(record)!;\n    const identity = recordIdentifierFor(record);\n\n    this.identifier = identity;\n    this.record = record;\n    this.cache = store.cache;\n\n    this.pendingCount = 0;\n    this.fulfilledCount = 0;\n    this.rejectedCount = 0;\n    this._errorRequests = [];\n    this._lastError = null;\n\n    const requests = store.getRequestStateService();\n    const notifications = store.notifications;\n\n    const handleRequest = (req: RequestState) => {\n      if (req.type === 'mutation') {\n        switch (req.state) {\n          case 'pending':\n            this.isSaving = true;\n            break;\n          case 'rejected':\n            this.isSaving = false;\n            this._lastError = req;\n            if (!(req.response && isInvalidError(req.response.data))) {\n              this._errorRequests.push(req);\n            }\n\n            notifyErrorsStateChanged(this);\n            break;\n          case 'fulfilled':\n            this._errorRequests = [];\n            this._lastError = null;\n            this.isSaving = false;\n            this.notify('isDirty');\n            notifyErrorsStateChanged(this);\n            break;\n        }\n      } else {\n        switch (req.state) {\n          case 'pending':\n            this.pendingCount++;\n            this.notify('isLoading');\n            break;\n          case 'rejected':\n            this.pendingCount--;\n            this._lastError = req;\n            if (!(req.response && isInvalidError(req.response.data))) {\n              this._errorRequests.push(req);\n            }\n            this.notify('isLoading');\n            notifyErrorsStateChanged(this);\n            break;\n          case 'fulfilled':\n            this.pendingCount--;\n            this.fulfilledCount++;\n            this.notify('isLoading');\n            this.notify('isDirty');\n            notifyErrorsStateChanged(this);\n            this._errorRequests = [];\n            this._lastError = null;\n            break;\n        }\n      }\n    };\n\n    requests.subscribeForRecord(identity, handleRequest);\n\n    // we instantiate lazily\n    // so we grab anything we don't have yet\n    const lastRequest = requests.getLastRequestForRecord(identity);\n    if (lastRequest) {\n      handleRequest(lastRequest);\n    }\n\n    this.handler = notifications.subscribe(\n      identity,\n      (identifier: StableRecordIdentifier, type: NotificationType, key?: string) => {\n        switch (type) {\n          case 'state':\n            this.notify('isSaved');\n            this.notify('isNew');\n            this.notify('isDeleted');\n            this.notify('isDirty');\n            break;\n          case 'attributes':\n            this.notify('isEmpty');\n            this.notify('isDirty');\n            break;\n          case 'errors':\n            this.updateInvalidErrors(this.record.errors);\n            this.notify('isValid');\n            break;\n        }\n      }\n    );\n  }\n\n  destroy() {\n    storeFor(this.record)!.notifications.unsubscribe(this.handler);\n  }\n\n  notify(key: keyof this & string) {\n    notifySignal(this, key);\n  }\n\n  updateInvalidErrors(errors: Errors) {\n    assert(\n      `Expected the Cache instance for ${this.identifier.lid}  to implement getErrors(identifier)`,\n      typeof this.cache.getErrors === 'function'\n    );\n    const jsonApiErrors = this.cache.getErrors(this.identifier);\n\n    errors.clear();\n\n    for (let i = 0; i < jsonApiErrors.length; i++) {\n      const error = jsonApiErrors[i];\n\n      if (error.source && error.source.pointer) {\n        const keyMatch = error.source.pointer.match(SOURCE_POINTER_REGEXP);\n        let key: string | undefined;\n\n        if (keyMatch) {\n          key = keyMatch[2];\n        } else if (error.source.pointer.search(SOURCE_POINTER_PRIMARY_REGEXP) !== -1) {\n          key = PRIMARY_ATTRIBUTE_KEY;\n        }\n\n        if (key) {\n          const errMsg = error.detail || error.title;\n          assert(`Expected field error to have a detail or title to use as the message`, errMsg);\n          errors.add(key, errMsg);\n        }\n      }\n    }\n  }\n\n  cleanErrorRequests() {\n    this.notify('isValid');\n    this.notify('isError');\n    this.notify('adapterError');\n    this._errorRequests = [];\n    this._lastError = null;\n  }\n\n  declare isSaving: boolean;\n\n  @tagged\n  get isLoading() {\n    return !this.isLoaded && this.pendingCount > 0 && this.fulfilledCount === 0;\n  }\n\n  @tagged\n  get isLoaded() {\n    if (this.isNew) {\n      return true;\n    }\n    return this.fulfilledCount > 0 || !this.isEmpty;\n  }\n\n  @tagged\n  get isSaved() {\n    const rd = this.cache;\n    if (this.isDeleted) {\n      assert(`Expected Cache to implement isDeletionCommitted()`, typeof rd.isDeletionCommitted === 'function');\n      return rd.isDeletionCommitted(this.identifier);\n    }\n    if (this.isNew || this.isEmpty || !this.isValid || this.isDirty || this.isLoading) {\n      return false;\n    }\n    return true;\n  }\n\n  @tagged\n  get isEmpty() {\n    const rd = this.cache;\n    // TODO this is not actually an RFC'd concept. Determine the\n    // correct heuristic to replace this with.\n    assert(`Expected Cache to implement isEmpty()`, typeof rd.isEmpty === 'function');\n    return !this.isNew && rd.isEmpty(this.identifier);\n  }\n\n  @tagged\n  get isNew() {\n    const rd = this.cache;\n    assert(`Expected Cache to implement isNew()`, typeof rd.isNew === 'function');\n    return rd.isNew(this.identifier);\n  }\n\n  @tagged\n  get isDeleted() {\n    const rd = this.cache;\n    assert(`Expected Cache to implement isDeleted()`, typeof rd.isDeleted === 'function');\n    return rd.isDeleted(this.identifier);\n  }\n\n  @tagged\n  get isValid() {\n    return this.record.errors.length === 0;\n  }\n\n  @tagged\n  get isDirty() {\n    const rd = this.cache;\n    if (this.isEmpty || rd.isDeletionCommitted(this.identifier) || (this.isDeleted && this.isNew)) {\n      return false;\n    }\n    return this.isDeleted || this.isNew || rd.hasChangedAttrs(this.identifier);\n  }\n\n  @tagged\n  get isError() {\n    const errorReq = this._errorRequests[this._errorRequests.length - 1];\n    if (!errorReq) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  @tagged\n  get adapterError() {\n    const request = this._lastError;\n    if (!request) {\n      return null;\n    }\n    return request.state === 'rejected' && request.response!.data;\n  }\n\n  @cached\n  get isPreloaded() {\n    return !this.isEmpty && this.isLoading;\n  }\n\n  @cached\n  get stateName() {\n    // we might be empty while loading so check this first\n    if (this.isLoading) {\n      return 'root.loading';\n\n      // got nothing yet or were unloaded\n    } else if (this.isEmpty) {\n      return 'root.empty';\n\n      // deleted substates\n    } else if (this.isDeleted) {\n      if (this.isSaving) {\n        return 'root.deleted.inFlight';\n      } else if (this.isSaved) {\n        // TODO ensure isSaved isn't true from previous requests\n        return 'root.deleted.saved';\n      } else if (!this.isValid) {\n        return 'root.deleted.invalid';\n      } else {\n        return 'root.deleted.uncommitted';\n      }\n\n      // loaded.created substates\n    } else if (this.isNew) {\n      if (this.isSaving) {\n        return 'root.loaded.created.inFlight';\n      } else if (!this.isValid) {\n        return 'root.loaded.created.invalid';\n      }\n      return 'root.loaded.created.uncommitted';\n\n      // loaded.updated substates\n    } else if (this.isSaving) {\n      return 'root.loaded.updated.inFlight';\n    } else if (!this.isValid) {\n      return 'root.loaded.updated.invalid';\n    } else if (this.isDirty) {\n      return 'root.loaded.updated.uncommitted';\n\n      // if nothing remains, we are loaded saved!\n    } else {\n      return 'root.loaded.saved';\n    }\n  }\n\n  @cached\n  get dirtyType() {\n    // we might be empty while loading so check this first\n    if (this.isLoading || this.isEmpty) {\n      return '';\n\n      // deleted substates\n    } else if (this.isDirty && this.isDeleted) {\n      return 'deleted';\n\n      // loaded.created substates\n    } else if (this.isNew) {\n      return 'created';\n\n      // loaded.updated substates\n    } else if (this.isSaving || !this.isValid || this.isDirty) {\n      return 'updated';\n\n      // if nothing remains, we are loaded saved!\n    } else {\n      return '';\n    }\n  }\n}\ndefineSignal(RecordState.prototype, 'isSaving', false);\n\nfunction notifyErrorsStateChanged(state: RecordState) {\n  state.notify('isValid');\n  state.notify('isError');\n  state.notify('adapterError');\n}\n","/**\n  @module @ember-data/model\n */\n\nimport { assert, warn } from '@ember/debug';\nimport EmberObject from '@ember/object';\n\nimport { DEBUG } from '@ember-data/env';\nimport { HAS_DEBUG_PACKAGE } from '@ember-data/packages';\nimport { recordIdentifierFor, storeFor } from '@ember-data/store';\nimport { coerceId } from '@ember-data/store/-private';\nimport { compat } from '@ember-data/tracking';\nimport { defineSignal } from '@ember-data/tracking/-private';\nimport { RecordStore } from '@warp-drive/core-types/symbols';\n\nimport Errors from './errors';\nimport { LEGACY_SUPPORT } from './legacy-relationships-support';\nimport {\n  belongsTo,\n  changedAttributes,\n  createSnapshot,\n  deleteRecord,\n  destroyRecord,\n  hasMany,\n  reload,\n  rollbackAttributes,\n  save,\n  serialize,\n  unloadRecord,\n} from './model-methods';\nimport notifyChanges from './notify-changes';\nimport RecordState, { notifySignal, tagged } from './record-state';\n\nfunction findPossibleInverses(type, inverseType, name, relationshipsSoFar) {\n  const possibleRelationships = relationshipsSoFar || [];\n\n  const relationshipMap = inverseType.relationships;\n  if (!relationshipMap) {\n    return possibleRelationships;\n  }\n\n  const relationshipsForType = relationshipMap.get(type.modelName);\n  const relationships = Array.isArray(relationshipsForType)\n    ? relationshipsForType.filter((relationship) => {\n        const optionsForRelationship = relationship.options;\n\n        if (!optionsForRelationship.inverse && optionsForRelationship.inverse !== null) {\n          return true;\n        }\n\n        return name === optionsForRelationship.inverse;\n      })\n    : null;\n\n  if (relationships) {\n    possibleRelationships.push.apply(possibleRelationships, relationships);\n  }\n\n  //Recurse to support polymorphism\n  if (type.superclass) {\n    findPossibleInverses(type.superclass, inverseType, name, possibleRelationships);\n  }\n\n  return possibleRelationships;\n}\n\n/*\n * This decorator allows us to lazily compute\n * an expensive getter on first-access and thereafter\n * never recompute it.\n */\nfunction computeOnce(target, propertyName, desc) {\n  const cache = new WeakMap();\n  const getter = desc.get;\n  desc.get = function () {\n    let meta = cache.get(this);\n\n    if (!meta) {\n      meta = { hasComputed: false, value: undefined };\n      cache.set(this, meta);\n    }\n\n    if (!meta.hasComputed) {\n      meta.value = getter.call(this);\n      meta.hasComputed = true;\n    }\n\n    return meta.value;\n  };\n  return desc;\n}\n\n/**\n  Base class from which Models can be defined.\n\n  ```js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class User extends Model {\n    @attr name;\n  }\n  ```\n\n  Models are used both to define the static schema for a\n  particular resource type as well as the class to instantiate\n  to present that data from cache.\n\n  @class Model\n  @public\n  @extends Ember.EmberObject\n*/\nclass Model extends EmberObject {\n  ___private_notifications;\n\n  init(options = {}) {\n    if (DEBUG) {\n      if (!options._secretInit && !options._createProps) {\n        throw new Error(\n          'You should not call `create` on a model. Instead, call `store.createRecord` with the attributes you would like to set.'\n        );\n      }\n    }\n    const createProps = options._createProps;\n    const _secretInit = options._secretInit;\n    options._createProps = null;\n    options._secretInit = null;\n\n    const store = (this.store = _secretInit.store);\n    super.init(options);\n\n    this[RecordStore] = store;\n\n    const identity = _secretInit.identifier;\n    _secretInit.cb(this, _secretInit.cache, identity, _secretInit.store);\n\n    this.___recordState = DEBUG ? new RecordState(this) : null;\n\n    this.setProperties(createProps);\n\n    const notifications = store.notifications;\n    this.___private_notifications = notifications.subscribe(identity, (identifier, type, field) => {\n      notifyChanges(identifier, type, field, this, store);\n    });\n  }\n\n  destroy() {\n    const identifier = recordIdentifierFor(this);\n    this.___recordState?.destroy();\n    const store = storeFor(this);\n    store.notifications.unsubscribe(this.___private_notifications);\n    // Legacy behavior is to notify the relationships on destroy\n    // such that they \"clear\". It's uncertain this behavior would\n    // be good for a new model paradigm, likely cheaper and safer\n    // to simply not notify, for this reason the store does not itself\n    // notify individual changes once the delete has been signaled,\n    // this decision is left to model instances.\n\n    this.eachRelationship((name, meta) => {\n      if (meta.kind === 'belongsTo') {\n        this.notifyPropertyChange(name);\n      }\n    });\n    LEGACY_SUPPORT.get(this)?.destroy();\n    LEGACY_SUPPORT.delete(this);\n    LEGACY_SUPPORT.delete(identifier);\n\n    super.destroy();\n  }\n\n  /**\n    If this property is `true` the record is in the `empty`\n    state. Empty is the first state all records enter after they have\n    been created. Most records created by the store will quickly\n    transition to the `loading` state if data needs to be fetched from\n    the server or the `created` state if the record is created on the\n    client. A record can also enter the empty state if the adapter is\n    unable to locate the record.\n\n    @property isEmpty\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  @compat\n  get isEmpty() {\n    return this.currentState.isEmpty;\n  }\n\n  /**\n    If this property is `true` the record is in the `loading` state. A\n    record enters this state when the store asks the adapter for its\n    data. It remains in this state until the adapter provides the\n    requested data.\n\n    @property isLoading\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  @compat\n  get isLoading() {\n    return this.currentState.isLoading;\n  }\n\n  /**\n    If this property is `true` the record is in the `loaded` state. A\n    record enters this state when its data is populated. Most of a\n    record's lifecycle is spent inside substates of the `loaded`\n    state.\n\n    Example\n\n    ```javascript\n    let record = store.createRecord('model');\n    record.isLoaded; // true\n\n    store.findRecord('model', 1).then(function(model) {\n      model.isLoaded; // true\n    });\n    ```\n\n    @property isLoaded\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  @compat\n  get isLoaded() {\n    return this.currentState.isLoaded;\n  }\n\n  /**\n    If this property is `true` the record is in the `dirty` state. The\n    record has local changes that have not yet been saved by the\n    adapter. This includes records that have been created (but not yet\n    saved) or deleted.\n\n    Example\n\n    ```javascript\n    let record = store.createRecord('model');\n    record.hasDirtyAttributes; // true\n\n    store.findRecord('model', 1).then(function(model) {\n      model.hasDirtyAttributes; // false\n      model.set('foo', 'some value');\n      model.hasDirtyAttributes; // true\n    });\n    ```\n\n    @since 1.13.0\n    @property hasDirtyAttributes\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  @compat\n  get hasDirtyAttributes() {\n    return this.currentState.isDirty;\n  }\n\n  /**\n    If this property is `true` the record is in the `saving` state. A\n    record enters the saving state when `save` is called, but the\n    adapter has not yet acknowledged that the changes have been\n    persisted to the backend.\n\n    Example\n\n    ```javascript\n    let record = store.createRecord('model');\n    record.isSaving; // false\n    let promise = record.save();\n    record.isSaving; // true\n    promise.then(function() {\n      record.isSaving; // false\n    });\n    ```\n\n    @property isSaving\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  @compat\n  get isSaving() {\n    return this.currentState.isSaving;\n  }\n\n  /**\n    If this property is `true` the record is in the `deleted` state\n    and has been marked for deletion. When `isDeleted` is true and\n    `hasDirtyAttributes` is true, the record is deleted locally but the deletion\n    was not yet persisted. When `isSaving` is true, the change is\n    in-flight. When both `hasDirtyAttributes` and `isSaving` are false, the\n    change has persisted.\n\n    Example\n\n    ```javascript\n    let record = store.createRecord('model');\n    record.isDeleted;    // false\n    record.deleteRecord();\n\n    // Locally deleted\n    record.isDeleted;           // true\n    record.hasDirtyAttributes;  // true\n    record.isSaving;            // false\n\n    // Persisting the deletion\n    let promise = record.save();\n    record.isDeleted;    // true\n    record.isSaving;     // true\n\n    // Deletion Persisted\n    promise.then(function() {\n      record.isDeleted;          // true\n      record.isSaving;           // false\n      record.hasDirtyAttributes; // false\n    });\n    ```\n\n    @property isDeleted\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  @compat\n  get isDeleted() {\n    return this.currentState.isDeleted;\n  }\n\n  /**\n    If this property is `true` the record is in the `new` state. A\n    record will be in the `new` state when it has been created on the\n    client and the adapter has not yet report that it was successfully\n    saved.\n\n    Example\n\n    ```javascript\n    let record = store.createRecord('model');\n    record.isNew; // true\n\n    record.save().then(function(model) {\n      model.isNew; // false\n    });\n    ```\n\n    @property isNew\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  @compat\n  get isNew() {\n    return this.currentState.isNew;\n  }\n\n  /**\n    If this property is `true` the record is in the `valid` state.\n\n    A record will be in the `valid` state when the adapter did not report any\n    server-side validation failures.\n\n    @property isValid\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  @compat\n  get isValid() {\n    return this.currentState.isValid;\n  }\n\n  /**\n    If the record is in the dirty state this property will report what\n    kind of change has caused it to move into the dirty\n    state. Possible values are:\n\n    - `created` The record has been created by the client and not yet saved to the adapter.\n    - `updated` The record has been updated by the client and not yet saved to the adapter.\n    - `deleted` The record has been deleted by the client and not yet saved to the adapter.\n\n    Example\n\n    ```javascript\n    let record = store.createRecord('model');\n    record.dirtyType; // 'created'\n    ```\n\n    @property dirtyType\n    @public\n    @type {String}\n    @readOnly\n  */\n  @compat\n  get dirtyType() {\n    return this.currentState.dirtyType;\n  }\n\n  /**\n    If `true` the adapter reported that it was unable to save local\n    changes to the backend for any reason other than a server-side\n    validation error.\n\n    Example\n\n    ```javascript\n    record.isError; // false\n    record.set('foo', 'valid value');\n    record.save().then(null, function() {\n      record.isError; // true\n    });\n    ```\n\n    @property isError\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n  @compat\n  get isError() {\n    return this.currentState.isError;\n  }\n  set isError(v) {\n    if (DEBUG) {\n      throw new Error(`isError is not directly settable`);\n    }\n  }\n\n  /**\n    If `true` the store is attempting to reload the record from the adapter.\n\n    Example\n\n    ```javascript\n    record.isReloading; // false\n    record.reload();\n    record.isReloading; // true\n    ```\n\n    @property isReloading\n    @public\n    @type {Boolean}\n    @readOnly\n  */\n\n  /**\n    All ember models have an id property. This is an identifier\n    managed by an external source. These are always coerced to be\n    strings before being used internally. Note when declaring the\n    attributes for a model it is an error to declare an id\n    attribute.\n\n    ```javascript\n    let record = store.createRecord('model');\n    record.id; // null\n\n    store.findRecord('model', 1).then(function(model) {\n      model.id; // '1'\n    });\n    ```\n\n    @property id\n    @public\n    @type {String}\n  */\n  @tagged\n  get id() {\n    // this guard exists, because some dev-only deprecation code\n    // (addListener via validatePropertyInjections) invokes toString before the\n    // object is real.\n    if (DEBUG) {\n      try {\n        return recordIdentifierFor(this).id;\n      } catch {\n        return void 0;\n      }\n    }\n    return recordIdentifierFor(this).id;\n  }\n  set id(id) {\n    const normalizedId = coerceId(id);\n    const identifier = recordIdentifierFor(this);\n    const didChange = normalizedId !== identifier.id;\n    assert(\n      `Cannot set ${identifier.type} record's id to ${id}, because id is already ${identifier.id}`,\n      !didChange || identifier.id === null\n    );\n\n    if (normalizedId !== null && didChange) {\n      this.store._instanceCache.setRecordId(identifier, normalizedId);\n      this.store.notifications.notify(identifier, 'identity');\n    }\n  }\n\n  toString() {\n    return `<model::${this.constructor.modelName}:${this.id}>`;\n  }\n\n  /**\n    @property currentState\n    @private\n    @type {Object}\n  */\n  // TODO we can probably make this a computeOnce\n  // we likely do not need to notify the currentState root anymore\n  @tagged\n  get currentState() {\n    // descriptors are called with the wrong `this` context during mergeMixins\n    // when using legacy/classic ember classes. Basically: lazy in prod and eager in dev.\n    // so we do this to try to steer folks to the nicer \"dont user currentState\"\n    // error.\n    if (!DEBUG) {\n      if (!this.___recordState) {\n        this.___recordState = new RecordState(this);\n      }\n    }\n    return this.___recordState;\n  }\n  set currentState(_v) {\n    throw new Error('cannot set currentState');\n  }\n\n  /**\n    The store service instance which created this record instance\n\n   @property store\n    @public\n   */\n\n  /**\n    When the record is in the `invalid` state this object will contain\n    any errors returned by the adapter. When present the errors hash\n    contains keys corresponding to the invalid property names\n    and values which are arrays of Javascript objects with two keys:\n\n    - `message` A string containing the error message from the backend\n    - `attribute` The name of the property associated with this error message\n\n    ```javascript\n    record.errors.length; // 0\n    record.set('foo', 'invalid value');\n    record.save().catch(function() {\n      record.errors.foo;\n      // [{message: 'foo should be a number.', attribute: 'foo'}]\n    });\n    ```\n\n    The `errors` property is useful for displaying error messages to\n    the user.\n\n    ```handlebars\n    <label>Username: <Input @value={{@model.username}} /> </label>\n    {{#each @model.errors.username as |error|}}\n      <div class=\"error\">\n        {{error.message}}\n      </div>\n    {{/each}}\n    <label>Email: <Input @value={{@model.email}} /> </label>\n    {{#each @model.errors.email as |error|}}\n      <div class=\"error\">\n        {{error.message}}\n      </div>\n    {{/each}}\n    ```\n\n\n    You can also access the special `messages` property on the error\n    object to get an array of all the error strings.\n\n    ```handlebars\n    {{#each @model.errors.messages as |message|}}\n      <div class=\"error\">\n        {{message}}\n      </div>\n    {{/each}}\n    ```\n\n    @property errors\n    @public\n    @type {Errors}\n  */\n  @computeOnce\n  get errors() {\n    const errors = Errors.create({ __record: this });\n    this.currentState.updateInvalidErrors(errors);\n    return errors;\n  }\n\n  /**\n    This property holds the `AdapterError` object with which\n    last adapter operation was rejected.\n\n    @property adapterError\n    @public\n    @type {AdapterError}\n  */\n  @compat\n  get adapterError() {\n    return this.currentState.adapterError;\n  }\n  set adapterError(v) {\n    throw new Error(`adapterError is not directly settable`);\n  }\n\n  /**\n    Create a JSON representation of the record, using the serialization\n    strategy of the store's adapter.\n\n   `serialize` takes an optional hash as a parameter, currently\n    supported options are:\n\n   - `includeId`: `true` if the record's ID should be included in the\n      JSON representation.\n\n    @method serialize\n    @public\n    @param {Object} options\n    @return {Object} an object whose values are primitive JSON values only\n  */\n\n  /*\n    We hook the default implementation to ensure\n    our tagged properties are properly notified\n    as well. We still super for everything because\n    sync observers require a direct call occuring\n    to trigger their flush. We wouldn't need to\n    super in 4.0+ where sync observers are removed.\n   */\n  notifyPropertyChange(prop) {\n    notifySignal(this, prop);\n    super.notifyPropertyChange(prop);\n  }\n\n  /**\n    Marks the record as deleted but does not save it. You must call\n    `save` afterwards if you want to persist it. You might use this\n    method if you want to allow the user to still `rollbackAttributes()`\n    after a delete was made.\n\n    Example\n\n    ```js\n    import Component from '@glimmer/component';\n\n    export default class extends Component {\n      softDelete = () => {\n        this.args.model.deleteRecord();\n      }\n\n      confirm = () => {\n        this.args.model.save();\n      }\n\n      undo = () => {\n        this.args.model.rollbackAttributes();\n      }\n    }\n    ```\n\n    @method deleteRecord\n    @public\n  */\n\n  /**\n    Same as `deleteRecord`, but saves the record immediately.\n\n    Example\n\n    ```js\n    import Component from '@glimmer/component';\n\n    export default class extends Component {\n      delete = () => {\n        this.args.model.destroyRecord().then(function() {\n          this.transitionToRoute('model.index');\n        });\n      }\n    }\n    ```\n\n    If you pass an object on the `adapterOptions` property of the options\n    argument it will be passed to your adapter via the snapshot\n\n    ```js\n    record.destroyRecord({ adapterOptions: { subscribe: false } });\n    ```\n\n    ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n\n    export default class PostAdapter extends MyCustomAdapter {\n      deleteRecord(store, type, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n\n    @method destroyRecord\n    @public\n    @param {Object} options\n    @return {Promise} a promise that will be resolved when the adapter returns\n    successfully or rejected if the adapter returns with an error.\n  */\n\n  /**\n    Unloads the record from the store. This will not send a delete request\n    to your server, it just unloads the record from memory.\n\n    @method unloadRecord\n    @public\n  */\n\n  /**\n    Returns an object, whose keys are changed properties, and value is\n    an [oldProp, newProp] array.\n\n    The array represents the diff of the canonical state with the local state\n    of the model. Note: if the model is created locally, the canonical state is\n    empty since the adapter hasn't acknowledged the attributes yet:\n\n    Example\n\n    ```app/models/mascot.js\n    import Model, { attr } from '@ember-data/model';\n\n    export default class MascotModel extends Model {\n      @attr('string') name;\n      @attr('boolean', {\n        defaultValue: false\n      })\n      isAdmin;\n    }\n    ```\n\n    ```javascript\n    let mascot = store.createRecord('mascot');\n\n    mascot.changedAttributes(); // {}\n\n    mascot.set('name', 'Tomster');\n    mascot.changedAttributes(); // { name: [undefined, 'Tomster'] }\n\n    mascot.set('isAdmin', true);\n    mascot.changedAttributes(); // { isAdmin: [undefined, true], name: [undefined, 'Tomster'] }\n\n    mascot.save().then(function() {\n      mascot.changedAttributes(); // {}\n\n      mascot.set('isAdmin', false);\n      mascot.changedAttributes(); // { isAdmin: [true, false] }\n    });\n    ```\n\n    @method changedAttributes\n    @public\n    @return {Object} an object, whose keys are changed properties,\n      and value is an [oldProp, newProp] array.\n  */\n\n  /**\n    If the model `hasDirtyAttributes` this function will discard any unsaved\n    changes. If the model `isNew` it will be removed from the store.\n\n    Example\n\n    ```javascript\n    record.name; // 'Untitled Document'\n    record.set('name', 'Doc 1');\n    record.name; // 'Doc 1'\n    record.rollbackAttributes();\n    record.name; // 'Untitled Document'\n    ```\n\n    @since 1.13.0\n    @method rollbackAttributes\n    @public\n  */\n\n  /**\n    @method _createSnapshot\n    @private\n  */\n  // TODO @deprecate in favor of a public API or examples of how to test successfully\n\n  /**\n    Save the record and persist any changes to the record to an\n    external source via the adapter.\n\n    Example\n\n    ```javascript\n    record.set('name', 'Tomster');\n    record.save().then(function() {\n      // Success callback\n    }, function() {\n      // Error callback\n    });\n    ```\n\n   If you pass an object using the `adapterOptions` property of the options\n   argument it will be passed to your adapter via the snapshot.\n\n    ```js\n    record.save({ adapterOptions: { subscribe: false } });\n    ```\n\n    ```app/adapters/post.js\n    import MyCustomAdapter from './custom-adapter';\n\n    export default class PostAdapter extends MyCustomAdapter {\n      updateRecord(store, type, snapshot) {\n        if (snapshot.adapterOptions.subscribe) {\n          // ...\n        }\n        // ...\n      }\n    }\n    ```\n\n    @method save\n    @public\n    @param {Object} options\n    @return {Promise} a promise that will be resolved when the adapter returns\n    successfully or rejected if the adapter returns with an error.\n  */\n\n  /**\n    Reload the record from the adapter.\n\n    This will only work if the record has already finished loading.\n\n    Example\n\n    ```js\n    import Component from '@glimmer/component';\n\n    export default class extends Component {\n      async reload = () => {\n        await this.args.model.reload();\n        // do something with the reloaded model\n      }\n    }\n    ```\n\n    @method reload\n    @public\n    @param {Object} options optional, may include `adapterOptions` hash which will be passed to adapter request\n\n   @return {Promise} a promise that will be resolved with the record when the\n    adapter returns successfully or rejected if the adapter returns\n    with an error.\n  */\n\n  attr() {\n    assert(\n      'The `attr` method is not available on Model, a Snapshot was probably expected. Are you passing a Model instead of a Snapshot to your serializer?',\n      false\n    );\n  }\n\n  /**\n    Get the reference for the specified belongsTo relationship.\n\n    For instance, given the following model\n\n    ```app/models/blog-post.js\n    import Model, { belongsTo } from '@ember-data/model';\n\n    export default class BlogPost extends Model {\n      @belongsTo('user', { async: true, inverse: null }) author;\n    }\n    ```\n\n    Then the reference for the author relationship would be\n    retrieved from a record instance like so:\n\n    ```js\n    blogPost.belongsTo('author');\n    ```\n\n    A `BelongsToReference` is a low-level API that allows access\n    and manipulation of a belongsTo relationship.\n\n    It is especially useful when you're dealing with `async` relationships\n    as it allows synchronous access to the relationship data if loaded, as\n    well as APIs for loading, reloading the data or accessing available\n    information without triggering a load.\n\n    It may also be useful when using `sync` relationships that need to be\n    loaded/reloaded with more precise timing than marking the\n    relationship as `async` and relying on autofetch would have allowed.\n\n    However,keep in mind that marking a relationship as `async: false` will introduce\n    bugs into your application if the data is not always guaranteed to be available\n    by the time the relationship is accessed. Ergo, it is recommended when using this\n    approach to utilize `links` for unloaded relationship state instead of identifiers.\n\n    Reference APIs are entangled with the relationship's underlying state,\n    thus any getters or cached properties that utilize these will properly\n    invalidate if the relationship state changes.\n\n    References are \"stable\", meaning that multiple calls to retrieve the reference\n    for a given relationship will always return the same HasManyReference.\n\n    @method belongsTo\n    @public\n    @param {String} name of the relationship\n    @since 2.5.0\n    @return {BelongsToReference} reference for this relationship\n  */\n\n  /**\n    Get the reference for the specified hasMany relationship.\n\n    For instance, given the following model\n\n    ```app/models/blog-post.js\n    import Model, { hasMany } from '@ember-data/model';\n\n    export default class BlogPost extends Model {\n      @hasMany('comment', { async: true, inverse: null }) comments;\n    }\n    ```\n\n    Then the reference for the comments relationship would be\n    retrieved from a record instance like so:\n\n    ```js\n    blogPost.hasMany('comments');\n    ```\n\n    A `HasManyReference` is a low-level API that allows access\n    and manipulation of a hasMany relationship.\n\n    It is especially useful when you are dealing with `async` relationships\n    as it allows synchronous access to the relationship data if loaded, as\n    well as APIs for loading, reloading the data or accessing available\n    information without triggering a load.\n\n    It may also be useful when using `sync` relationships with `@ember-data/model`\n    that need to be loaded/reloaded with more precise timing than marking the\n    relationship as `async` and relying on autofetch would have allowed.\n\n    However,keep in mind that marking a relationship as `async: false` will introduce\n    bugs into your application if the data is not always guaranteed to be available\n    by the time the relationship is accessed. Ergo, it is recommended when using this\n    approach to utilize `links` for unloaded relationship state instead of identifiers.\n\n    Reference APIs are entangled with the relationship's underlying state,\n    thus any getters or cached properties that utilize these will properly\n    invalidate if the relationship state changes.\n\n    References are \"stable\", meaning that multiple calls to retrieve the reference\n    for a given relationship will always return the same HasManyReference.\n\n    @method hasMany\n    @public\n    @param {String} name of the relationship\n    @since 2.5.0\n    @return {HasManyReference} reference for this relationship\n  */\n\n  /**\n   Given a callback, iterates over each of the relationships in the model,\n   invoking the callback with the name of each relationship and its relationship\n   descriptor.\n\n\n   The callback method you provide should have the following signature (all\n   parameters are optional):\n\n   ```javascript\n   function(name, descriptor);\n   ```\n\n   - `name` the name of the current property in the iteration\n   - `descriptor` the meta object that describes this relationship\n\n   The relationship descriptor argument is an object with the following properties.\n\n   - **name** <span class=\"type\">String</span> the name of this relationship on the Model\n   - **kind** <span class=\"type\">String</span> \"hasMany\" or \"belongsTo\"\n   - **options** <span class=\"type\">Object</span> the original options hash passed when the relationship was declared\n   - **parentType** <span class=\"type\">Model</span> the type of the Model that owns this relationship\n   - **type** <span class=\"type\">String</span> the type name of the related Model\n\n   Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n\n   Example\n\n   ```app/serializers/application.js\n   import JSONSerializer from '@ember-data/serializer/json';\n\n   export default class ApplicationSerializer extends JSONSerializer {\n      serialize(record, options) {\n      let json = {};\n\n      record.eachRelationship(function(name, descriptor) {\n        if (descriptor.kind === 'hasMany') {\n          let serializedHasManyName = name.toUpperCase() + '_IDS';\n          json[serializedHasManyName] = record.get(name).map(r => r.id);\n        }\n      });\n\n      return json;\n    }\n  }\n   ```\n\n   @method eachRelationship\n    @public\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */\n  eachRelationship(callback, binding) {\n    this.constructor.eachRelationship(callback, binding);\n  }\n\n  relationshipFor(name) {\n    return this.constructor.relationshipsByName.get(name);\n  }\n\n  inverseFor(name) {\n    return this.constructor.inverseFor(name, storeFor(this));\n  }\n\n  eachAttribute(callback, binding) {\n    this.constructor.eachAttribute(callback, binding);\n  }\n\n  static isModel = true;\n\n  /**\n    Create should only ever be called by the store. To create an instance of a\n    `Model` in a dirty state use `store.createRecord`.\n\n   To create instances of `Model` in a clean state, use `store.push`\n\n    @method create\n    @private\n    @static\n  */\n\n  /**\n   Represents the model's class name as a string. This can be used to look up the model's class name through\n   `Store`'s modelFor method.\n\n   `modelName` is generated for you by EmberData. It will be a lowercased, dasherized string.\n   For example:\n\n   ```javascript\n   store.modelFor('post').modelName; // 'post'\n   store.modelFor('blog-post').modelName; // 'blog-post'\n   ```\n\n   The most common place you'll want to access `modelName` is in your serializer's `payloadKeyFromModelName` method. For example, to change payload\n   keys to underscore (instead of dasherized), you might use the following code:\n\n   ```javascript\n   import RESTSerializer from '@ember-data/serializer/rest';\n   import { underscore } from '<app-name>/utils/string-utils';\n\n   export default const PostSerializer = RESTSerializer.extend({\n     payloadKeyFromModelName(modelName) {\n       return underscore(modelName);\n     }\n   });\n   ```\n   @property modelName\n    @public\n   @type String\n   @readonly\n   @static\n  */\n  static modelName = null;\n\n  /*\n   These class methods below provide relationship\n   introspection abilities about relationships.\n\n   A note about the computed properties contained here:\n\n   **These properties are effectively sealed once called for the first time.**\n   To avoid repeatedly doing expensive iteration over a model's fields, these\n   values are computed once and then cached for the remainder of the runtime of\n   your application.\n\n   If your application needs to modify a class after its initial definition\n   (for example, using `reopen()` to add additional attributes), make sure you\n   do it before using your model with the store, which uses these properties\n   extensively.\n   */\n\n  /**\n   For a given relationship name, returns the model type of the relationship.\n\n   For example, if you define a model like this:\n\n   ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n\n   export default class PostModel extends Model {\n     @hasMany('comment') comments;\n   }\n   ```\n\n   Calling `store.modelFor('post').typeForRelationship('comments', store)` will return `Comment`.\n\n   @method typeForRelationship\n    @public\n   @static\n   @param {String} name the name of the relationship\n   @param {store} store an instance of Store\n   @return {Model} the type of the relationship, or undefined\n   */\n  static typeForRelationship(name, store) {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    const relationship = this.relationshipsByName.get(name);\n    return relationship && store.modelFor(relationship.type);\n  }\n\n  @computeOnce\n  static get inverseMap() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n    return Object.create(null);\n  }\n\n  /**\n   Find the relationship which is the inverse of the one asked for.\n\n   For example, if you define models like this:\n\n   ```app/models/post.js\n   import Model, { hasMany } from '@ember-data/model';\n\n   export default class PostModel extends Model {\n      @hasMany('message') comments;\n    }\n   ```\n\n   ```app/models/message.js\n   import Model, { belongsTo } from '@ember-data/model';\n\n   export default class MessageModel extends Model {\n      @belongsTo('post') owner;\n    }\n   ```\n\n   ``` js\n   store.modelFor('post').inverseFor('comments', store) // { type: App.Message, name: 'owner', kind: 'belongsTo' }\n   store.modelFor('message').inverseFor('owner', store) // { type: App.Post, name: 'comments', kind: 'hasMany' }\n   ```\n\n   @method inverseFor\n    @public\n   @static\n   @param {String} name the name of the relationship\n   @param {Store} store\n   @return {Object} the inverse relationship, or null\n   */\n  static inverseFor(name, store) {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n    const inverseMap = this.inverseMap;\n    if (inverseMap[name]) {\n      return inverseMap[name];\n    } else {\n      const inverse = this._findInverseFor(name, store);\n      inverseMap[name] = inverse;\n      return inverse;\n    }\n  }\n\n  //Calculate the inverse, ignoring the cache\n  static _findInverseFor(name, store) {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    const relationship = this.relationshipsByName.get(name);\n    const { options } = relationship;\n    const isPolymorphic = options.polymorphic;\n\n    //If inverse is manually specified to be null, like  `comments: hasMany('message', { inverse: null })`\n    const isExplicitInverseNull = options.inverse === null;\n    const isAbstractType =\n      !isExplicitInverseNull && isPolymorphic && !store.getSchemaDefinitionService().doesTypeExist(relationship.type);\n\n    if (isExplicitInverseNull || isAbstractType) {\n      assert(\n        `No schema for the abstract type '${relationship.type}' for the polymorphic relationship '${name}' on '${this.modelName}' was provided by the SchemaDefinitionService.`,\n        !isPolymorphic || isExplicitInverseNull\n      );\n      return null;\n    }\n\n    let fieldOnInverse, inverseKind, inverseRelationship, inverseOptions;\n    const inverseSchema = this.typeForRelationship(name, store);\n\n    // if the type does not exist and we are not polymorphic\n    //If inverse is specified manually, return the inverse\n    if (options.inverse !== undefined) {\n      fieldOnInverse = options.inverse;\n      inverseRelationship = inverseSchema && inverseSchema.relationshipsByName.get(fieldOnInverse);\n\n      assert(\n        `We found no field named '${fieldOnInverse}' on the schema for '${inverseSchema.modelName}' to be the inverse of the '${name}' relationship on '${this.modelName}'. This is most likely due to a missing field on your model definition.`,\n        inverseRelationship\n      );\n\n      // TODO probably just return the whole inverse here\n      inverseKind = inverseRelationship.kind;\n      inverseOptions = inverseRelationship.options;\n    } else {\n      //No inverse was specified manually, we need to use a heuristic to guess one\n      if (relationship.type === relationship.parentModelName) {\n        warn(\n          `Detected a reflexive relationship named '${name}' on the schema for '${relationship.type}' without an inverse option. Look at https://guides.emberjs.com/current/models/relationships/#toc_reflexive-relations for how to explicitly specify inverses.`,\n          false,\n          {\n            id: 'ds.model.reflexive-relationship-without-inverse',\n          }\n        );\n      }\n\n      let possibleRelationships = findPossibleInverses(this, inverseSchema, name);\n\n      if (possibleRelationships.length === 0) {\n        return null;\n      }\n\n      if (DEBUG) {\n        const filteredRelationships = possibleRelationships.filter((possibleRelationship) => {\n          const optionsForRelationship = possibleRelationship.options;\n          return name === optionsForRelationship.inverse;\n        });\n\n        assert(\n          \"You defined the '\" +\n            name +\n            \"' relationship on \" +\n            this +\n            ', but you defined the inverse relationships of type ' +\n            inverseSchema.toString() +\n            ' multiple times. Look at https://guides.emberjs.com/current/models/relationships/#toc_explicit-inverses for how to explicitly specify inverses',\n          filteredRelationships.length < 2\n        );\n      }\n\n      const explicitRelationship = possibleRelationships.find((relationship) => relationship.options.inverse === name);\n      if (explicitRelationship) {\n        possibleRelationships = [explicitRelationship];\n      }\n\n      assert(\n        \"You defined the '\" +\n          name +\n          \"' relationship on \" +\n          this +\n          ', but multiple possible inverse relationships of type ' +\n          this +\n          ' were found on ' +\n          inverseSchema +\n          '. Look at https://guides.emberjs.com/current/models/relationships/#toc_explicit-inverses for how to explicitly specify inverses',\n        possibleRelationships.length === 1\n      );\n\n      fieldOnInverse = possibleRelationships[0].name;\n      inverseKind = possibleRelationships[0].kind;\n      inverseOptions = possibleRelationships[0].options;\n    }\n\n    // ensure inverse is properly configured\n    if (DEBUG) {\n      if (isPolymorphic) {\n        assert(\n          `Relationships that satisfy polymorphic relationships MUST define which abstract-type they are satisfying using 'as'. The field '${fieldOnInverse}' on type '${inverseSchema.modelName}' is misconfigured.`,\n          inverseOptions.as\n        );\n        assert(\n          `options.as should match the expected type of the polymorphic relationship. Expected field '${fieldOnInverse}' on type '${inverseSchema.modelName}' to specify '${relationship.type}' but found '${inverseOptions.as}'`,\n          !!inverseOptions.as && relationship.type === inverseOptions.as\n        );\n      }\n    }\n\n    // ensure we are properly configured\n    if (DEBUG) {\n      if (inverseOptions.polymorphic) {\n        assert(\n          `Relationships that satisfy polymorphic relationships MUST define which abstract-type they are satisfying using 'as'. The field '${name}' on type '${this.modelName}' is misconfigured.`,\n          options.as\n        );\n        assert(\n          `options.as should match the expected type of the polymorphic relationship. Expected field '${name}' on type '${this.modelName}' to specify '${inverseRelationship.type}' but found '${options.as}'`,\n          !!options.as && inverseRelationship.type === options.as\n        );\n      }\n    }\n\n    assert(\n      `The ${inverseSchema.modelName}:${fieldOnInverse} relationship declares 'inverse: null', but it was resolved as the inverse for ${this.modelName}:${name}.`,\n      inverseOptions.inverse !== null\n    );\n\n    return {\n      type: inverseSchema,\n      name: fieldOnInverse,\n      kind: inverseKind,\n      options: inverseOptions,\n    };\n  }\n\n  /**\n   The model's relationships as a map, keyed on the type of the\n   relationship. The value of each entry is an array containing a descriptor\n   for each relationship with that type, describing the name of the relationship\n   as well as the type.\n\n   For example, given the following model definition:\n\n   ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n      @hasMany('post') posts;\n    }\n   ```\n\n   This computed property would return a map describing these\n   relationships, like this:\n\n   ```javascript\n   import Blog from 'app/models/blog';\n   import User from 'app/models/user';\n   import Post from 'app/models/post';\n\n   let relationships = Blog.relationships;\n   relationships.user;\n   //=> [ { name: 'users', kind: 'hasMany' },\n   //     { name: 'owner', kind: 'belongsTo' } ]\n   relationships.post;\n   //=> [ { name: 'posts', kind: 'hasMany' } ]\n   ```\n\n   @property relationships\n    @public\n   @static\n   @type Map\n   @readOnly\n   */\n\n  @computeOnce\n  static get relationships() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    const map = new Map();\n    const relationshipsByName = this.relationshipsByName;\n\n    // Loop through each computed property on the class\n    relationshipsByName.forEach((desc) => {\n      const { type } = desc;\n\n      if (!map.has(type)) {\n        map.set(type, []);\n      }\n\n      map.get(type).push(desc);\n    });\n\n    return map;\n  }\n\n  /**\n   A hash containing lists of the model's relationships, grouped\n   by the relationship kind. For example, given a model with this\n   definition:\n\n   ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n\n      @hasMany('post') posts;\n    }\n   ```\n\n   This property would contain the following:\n\n   ```javascript\n   import Blog from 'app/models/blog';\n\n   let relationshipNames = Blog.relationshipNames;\n   relationshipNames.hasMany;\n   //=> ['users', 'posts']\n   relationshipNames.belongsTo;\n   //=> ['owner']\n   ```\n\n   @property relationshipNames\n    @public\n   @static\n   @type Object\n   @readOnly\n   */\n  @computeOnce\n  static get relationshipNames() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n    const names = {\n      hasMany: [],\n      belongsTo: [],\n    };\n\n    this.eachComputedProperty((name, meta) => {\n      if (meta.kind === 'hasMany' || meta.kind === 'belongsTo') {\n        names[meta.kind].push(name);\n      }\n    });\n\n    return names;\n  }\n\n  /**\n   An array of types directly related to a model. Each type will be\n   included once, regardless of the number of relationships it has with\n   the model.\n\n   For example, given a model with this definition:\n\n   ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n\n      @hasMany('post') posts;\n    }\n   ```\n\n   This property would contain the following:\n\n   ```javascript\n   import Blog from 'app/models/blog';\n\n   let relatedTypes = Blog.relatedTypes');\n   //=> ['user', 'post']\n   ```\n\n   @property relatedTypes\n   @public\n   @static\n   @type Array\n   @readOnly\n   */\n  @computeOnce\n  static get relatedTypes() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    const types = [];\n\n    const rels = this.relationshipsObject;\n    const relationships = Object.keys(rels);\n\n    // create an array of the unique types involved\n    // in relationships\n    for (let i = 0; i < relationships.length; i++) {\n      const name = relationships[i];\n      const meta = rels[name];\n      const modelName = meta.type;\n\n      if (types.indexOf(modelName) === -1) {\n        types.push(modelName);\n      }\n    }\n\n    return types;\n  }\n\n  /**\n   A map whose keys are the relationships of a model and whose values are\n   relationship descriptors.\n\n   For example, given a model with this\n   definition:\n\n   ```app/models/blog.js\n   import Model, { belongsTo, hasMany } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n\n      @hasMany('post') posts;\n    }\n   ```\n\n   This property would contain the following:\n\n   ```javascript\n   import Blog from 'app/models/blog';\n\n   let relationshipsByName = Blog.relationshipsByName;\n   relationshipsByName.users;\n   //=> { name: 'users', kind: 'hasMany', type: 'user', options: Object }\n   relationshipsByName.owner;\n   //=> { name: 'owner', kind: 'belongsTo', type: 'user', options: Object }\n   ```\n\n   @property relationshipsByName\n    @public\n   @static\n   @type Map\n   @readOnly\n   */\n  @computeOnce\n  static get relationshipsByName() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n    const map = new Map();\n    const rels = this.relationshipsObject;\n    const relationships = Object.keys(rels);\n\n    for (let i = 0; i < relationships.length; i++) {\n      const name = relationships[i];\n      const value = rels[name];\n\n      map.set(value.name, value);\n    }\n\n    return map;\n  }\n\n  @computeOnce\n  static get relationshipsObject() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    const relationships = Object.create(null);\n    const modelName = this.modelName;\n    this.eachComputedProperty((name, meta) => {\n      if (meta.kind === 'hasMany' || meta.kind === 'belongsTo') {\n        // TODO deprecate key being here\n        meta.key = name;\n        meta.name = name;\n        meta.parentModelName = modelName;\n        relationships[name] = meta;\n\n        assert(\n          `You should not specify both options.as and options.inverse as null on ${modelName}.${meta.name}, as if there is no inverse field there is no abstract type to conform to. You may have intended for this relationship to be polymorphic, or you may have mistakenly set inverse to null.`,\n          !(meta.options.inverse === null && meta.options.as?.length > 0)\n        );\n      }\n    });\n    return relationships;\n  }\n\n  /**\n   A map whose keys are the fields of the model and whose values are strings\n   describing the kind of the field. A model's fields are the union of all of its\n   attributes and relationships.\n\n   For example:\n\n   ```app/models/blog.js\n   import Model, { attr, belongsTo, hasMany } from '@ember-data/model';\n\n   export default class BlogModel extends Model {\n      @hasMany('user') users;\n      @belongsTo('user') owner;\n\n      @hasMany('post') posts;\n\n      @attr('string') title;\n    }\n   ```\n\n   ```js\n   import Blog from 'app/models/blog'\n\n   let fields = Blog.fields;\n   fields.forEach(function(kind, field) {\n      // do thing\n    });\n\n   // prints:\n   // users, hasMany\n   // owner, belongsTo\n   // posts, hasMany\n   // title, attribute\n   ```\n\n   @property fields\n    @public\n   @static\n   @type Map\n   @readOnly\n   */\n  @computeOnce\n  static get fields() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n    const map = new Map();\n\n    this.eachComputedProperty((name, meta) => {\n      if (meta.kind === 'hasMany' || meta.kind === 'belongsTo') {\n        map.set(name, meta.kind);\n      } else if (meta.kind === 'attribute') {\n        map.set(name, 'attribute');\n      }\n    });\n\n    return map;\n  }\n\n  /**\n   Given a callback, iterates over each of the relationships in the model,\n   invoking the callback with the name of each relationship and its relationship\n   descriptor.\n\n   @method eachRelationship\n    @public\n   @static\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */\n  static eachRelationship(callback, binding) {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    this.relationshipsByName.forEach((relationship, name) => {\n      callback.call(binding, name, relationship);\n    });\n  }\n\n  /**\n   Given a callback, iterates over each of the types related to a model,\n   invoking the callback with the related type's class. Each type will be\n   returned just once, regardless of how many different relationships it has\n   with a model.\n\n   @method eachRelatedType\n    @public\n   @static\n   @param {Function} callback the callback to invoke\n   @param {any} binding the value to which the callback's `this` should be bound\n   */\n  static eachRelatedType(callback, binding) {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    const relationshipTypes = this.relatedTypes;\n\n    for (let i = 0; i < relationshipTypes.length; i++) {\n      const type = relationshipTypes[i];\n      callback.call(binding, type);\n    }\n  }\n\n  static determineRelationshipType(knownSide, store) {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    const knownKey = knownSide.name;\n    const knownKind = knownSide.kind;\n    const inverse = this.inverseFor(knownKey, store);\n    // let key;\n\n    if (!inverse) {\n      return knownKind === 'belongsTo' ? 'oneToNone' : 'manyToNone';\n    }\n\n    // key = inverse.name;\n    const otherKind = inverse.kind;\n\n    if (otherKind === 'belongsTo') {\n      return knownKind === 'belongsTo' ? 'oneToOne' : 'manyToOne';\n    } else {\n      return knownKind === 'belongsTo' ? 'oneToMany' : 'manyToMany';\n    }\n  }\n\n  /**\n   A map whose keys are the attributes of the model (properties\n   described by attr) and whose values are the meta object for the\n   property.\n\n   Example\n\n   ```app/models/person.js\n   import Model, { attr } from '@ember-data/model';\n\n   export default class PersonModel extends Model {\n      @attr('string') firstName;\n      @attr('string') lastName;\n      @attr('date') birthday;\n    }\n   ```\n\n   ```javascript\n   import Person from 'app/models/person'\n\n   let attributes = Person.attributes\n\n   attributes.forEach(function(meta, name) {\n      // do thing\n    });\n\n   // prints:\n   // firstName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"firstName\"}\n   // lastName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"lastName\"}\n   // birthday {type: \"date\", kind: 'attribute', options: Object, parentType: function, name: \"birthday\"}\n   ```\n\n   @property attributes\n    @public\n   @static\n   @type {Map}\n   @readOnly\n   */\n  @computeOnce\n  static get attributes() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    const map = new Map();\n\n    this.eachComputedProperty((name, meta) => {\n      if (meta.kind === 'attribute') {\n        assert(\n          \"You may not set `id` as an attribute on your model. Please remove any lines that look like: `id: attr('<type>')` from \" +\n            this.toString(),\n          name !== 'id'\n        );\n\n        // TODO deprecate key being here\n        meta.key = name;\n        meta.name = name;\n        map.set(name, meta);\n      }\n    });\n\n    return map;\n  }\n\n  /**\n   A map whose keys are the attributes of the model (properties\n   described by attr) and whose values are type of transformation\n   applied to each attribute. This map does not include any\n   attributes that do not have an transformation type.\n\n   Example\n\n   ```app/models/person.js\n   import Model, { attr } from '@ember-data/model';\n\n   export default class PersonModel extends Model {\n      @attr firstName;\n      @attr('string') lastName;\n      @attr('date') birthday;\n    }\n   ```\n\n   ```javascript\n   import Person from 'app/models/person';\n\n   let transformedAttributes = Person.transformedAttributes\n\n   transformedAttributes.forEach(function(field, type) {\n      // do thing\n    });\n\n   // prints:\n   // lastName string\n   // birthday date\n   ```\n\n   @property transformedAttributes\n    @public\n   @static\n   @type {Map}\n   @readOnly\n   */\n  @computeOnce\n  static get transformedAttributes() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    const map = new Map();\n\n    this.eachAttribute((name, meta) => {\n      if (meta.type) {\n        map.set(name, meta.type);\n      }\n    });\n\n    return map;\n  }\n\n  /**\n   Iterates through the attributes of the model, calling the passed function on each\n   attribute.\n\n   The callback method you provide should have the following signature (all\n   parameters are optional):\n\n   ```javascript\n   function(name, meta);\n   ```\n\n   - `name` the name of the current property in the iteration\n   - `meta` the meta object for the attribute property in the iteration\n\n   Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n\n   Example\n\n   ```javascript\n   import Model, { attr } from '@ember-data/model';\n\n   class PersonModel extends Model {\n      @attr('string') firstName;\n      @attr('string') lastName;\n      @attr('date') birthday;\n    }\n\n   PersonModel.eachAttribute(function(name, meta) {\n      // do thing\n    });\n\n   // prints:\n   // firstName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"firstName\"}\n   // lastName {type: \"string\", kind: 'attribute', options: Object, parentType: function, name: \"lastName\"}\n   // birthday {type: \"date\", kind: 'attribute', options: Object, parentType: function, name: \"birthday\"}\n   ```\n\n   @method eachAttribute\n    @public\n   @param {Function} callback The callback to execute\n   @param {Object} [binding] the value to which the callback's `this` should be bound\n   @static\n   */\n  static eachAttribute(callback, binding) {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    this.attributes.forEach((meta, name) => {\n      callback.call(binding, name, meta);\n    });\n  }\n\n  /**\n   Iterates through the transformedAttributes of the model, calling\n   the passed function on each attribute. Note the callback will not be\n   called for any attributes that do not have an transformation type.\n\n   The callback method you provide should have the following signature (all\n   parameters are optional):\n\n   ```javascript\n   function(name, type);\n   ```\n\n   - `name` the name of the current property in the iteration\n   - `type` a string containing the name of the type of transformed\n   applied to the attribute\n\n   Note that in addition to a callback, you can also pass an optional target\n   object that will be set as `this` on the context.\n\n   Example\n\n   ```javascript\n   import Model, { attr } from '@ember-data/model';\n\n   let Person = Model.extend({\n      firstName: attr(),\n      lastName: attr('string'),\n      birthday: attr('date')\n    });\n\n   Person.eachTransformedAttribute(function(name, type) {\n      // do thing\n    });\n\n   // prints:\n   // lastName string\n   // birthday date\n   ```\n\n   @method eachTransformedAttribute\n    @public\n   @param {Function} callback The callback to execute\n   @param {Object} [binding] the value to which the callback's `this` should be bound\n   @static\n   */\n  static eachTransformedAttribute(callback, binding) {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    this.transformedAttributes.forEach((type, name) => {\n      callback.call(binding, name, type);\n    });\n  }\n\n  /**\n   Returns the name of the model class.\n\n   @method toString\n    @public\n   @static\n   */\n  static toString() {\n    assert(\n      `Accessing schema information on Models without looking up the model via the store is disallowed.`,\n      this.modelName\n    );\n\n    return `model:${this.modelName}`;\n  }\n}\n\nModel.prototype.save = save;\nModel.prototype.destroyRecord = destroyRecord;\nModel.prototype.unloadRecord = unloadRecord;\nModel.prototype.hasMany = hasMany;\nModel.prototype.belongsTo = belongsTo;\nModel.prototype.serialize = serialize;\nModel.prototype._createSnapshot = createSnapshot;\nModel.prototype.deleteRecord = deleteRecord;\nModel.prototype.changedAttributes = changedAttributes;\nModel.prototype.rollbackAttributes = rollbackAttributes;\nModel.prototype.reload = reload;\n\ndefineSignal(Model.prototype, 'isReloading', false);\n\n// this is required to prevent `init` from passing\n// the values initialized during create to `setUnknownProperty`\nModel.prototype._createProps = null;\nModel.prototype._secretInit = null;\n\nif (HAS_DEBUG_PACKAGE) {\n  /**\n   Provides info about the model for debugging purposes\n   by grouping the properties into more semantic groups.\n\n   Meant to be used by debugging tools such as the Chrome Ember Extension.\n\n   - Groups all attributes in \"Attributes\" group.\n   - Groups all belongsTo relationships in \"Belongs To\" group.\n   - Groups all hasMany relationships in \"Has Many\" group.\n   - Groups all flags in \"Flags\" group.\n   - Flags relationship CPs as expensive properties.\n\n   @method _debugInfo\n   @for Model\n   @private\n   */\n  Model.prototype._debugInfo = function () {\n    const relationships = {};\n    const expensiveProperties = [];\n\n    const identifier = recordIdentifierFor(this);\n    const schema = this.store.getSchemaDefinitionService();\n    const attrDefs = schema.attributesDefinitionFor(identifier);\n    const relDefs = schema.relationshipsDefinitionFor(identifier);\n\n    const attributes = Object.keys(attrDefs);\n    attributes.unshift('id');\n\n    const groups = [\n      {\n        name: 'Attributes',\n        properties: attributes,\n        expand: true,\n      },\n    ];\n\n    Object.keys(relDefs).forEach((name) => {\n      const relationship = relDefs[name];\n\n      let properties = relationships[relationship.kind];\n\n      if (properties === undefined) {\n        properties = relationships[relationship.kind] = [];\n        groups.push({\n          name: relationship.kind,\n          properties,\n          expand: true,\n        });\n      }\n      properties.push(name);\n      expensiveProperties.push(name);\n    });\n\n    groups.push({\n      name: 'Flags',\n      properties: ['isLoaded', 'hasDirtyAttributes', 'isSaving', 'isDeleted', 'isError', 'isNew', 'isValid'],\n    });\n\n    return {\n      propertyInfo: {\n        // include all other mixins / properties (not just the grouped ones)\n        includeOtherProperties: true,\n        groups: groups,\n        // don't pre-calculate unless cached\n        expensiveProperties: expensiveProperties,\n      },\n    };\n  };\n}\n\nif (DEBUG) {\n  const lookupDescriptor = function lookupDescriptor(obj, keyName) {\n    let current = obj;\n    do {\n      const descriptor = Object.getOwnPropertyDescriptor(current, keyName);\n      if (descriptor !== undefined) {\n        return descriptor;\n      }\n      current = Object.getPrototypeOf(current);\n    } while (current !== null);\n    return null;\n  };\n\n  Model.reopen({\n    init() {\n      this._super(...arguments);\n\n      const ourDescriptor = lookupDescriptor(Model.prototype, 'currentState');\n      const theirDescriptor = lookupDescriptor(this, 'currentState');\n      const realState = this.___recordState;\n      if (ourDescriptor.get !== theirDescriptor.get || realState !== this.currentState) {\n        throw new Error(\n          `'currentState' is a reserved property name on instances of classes extending Model. Please choose a different property name for ${this.constructor.toString()}`\n        );\n      }\n\n      const ID_DESCRIPTOR = lookupDescriptor(Model.prototype, 'id');\n      const idDesc = lookupDescriptor(this, 'id');\n\n      if (idDesc.get !== ID_DESCRIPTOR.get) {\n        throw new Error(\n          `You may not set 'id' as an attribute on your model. Please remove any lines that look like: \\`id: attr('<type>')\\` from ${this.constructor.toString()}`\n        );\n      }\n    },\n  });\n\n  Model.reopen = function deprecatedReopen() {\n    assert(`Model.reopen is deprecated. Use Foo extends Model to extend your class instead.`);\n  };\n\n  Model.reopenClass = function deprecatedReopenClass() {\n    assert(\n      `Model.reopenClass is deprecated. Use Foo extends Model to add static methods and properties to your class instead.`\n    );\n  };\n}\n\nexport default Model;\n"],"names":["RelatedCollection","RecordArray","constructor","options","isLoaded","isAsync","isPolymorphic","identifier","key","MUTATE","target","receiver","prop","args","_SIGNAL","Reflect","set","mutateReplaceRelatedRecords","index","prior","value","mutateReplaceRelatedRecord","newValues","extractIdentifiersFromRecords","assertNoDuplicates","currentState","push","macroCondition","getOwnConfig","deprecations","DEPRECATE_MANY_ARRAY_DUPLICATES","seen","Set","unique","forEach","item","recordIdentifierFor","has","add","newArgs","Array","from","result","apply","length","mutateAddToRelatedRecords","mutateRemoveFromRelatedRecords","unshift","mutateSortRelatedRecords","map","start","deleteCount","adds","SOURCE","splice","current","concat","slice","assert","notify","signal","ARRAY_SIGNAL","shouldReset","notifyArray","reload","_manager","reloadHasMany","createRecord","hash","store","modelName","record","destroy","prototype","cache","_inverseIsAsync","DEPRECATED_CLASS_NAME","assertRecordPassedToHasMany","records","extractIdentifierFromRecord","recordOrPromiseRecord","collection","callback","reason","state","size","duplicates","filter","currentValue","currentIndex","indexOf","deprecate","type","id","lid","r","isStableIdentifier","sort","a","b","localeCompare","join","for","until","since","enabled","available","Error","operationInfo","mutate","op","field","mutation","addToTransaction","_applyDecoratedDescriptor","property","decorators","descriptor","context","desc","Object","keys","enumerable","configurable","initializer","writable","reverse","reduce","decorator","call","undefined","defineProperty","PromiseObject","ObjectProxy","extend","PromiseProxyMixin","Extended","PromiseBelongsTo","_dec","computed","_class","legacySupport","_belongsToState","ref","referenceFor","meta","content","reloadBelongsTo","cached","getOwnPropertyDescriptor","PromiseManyArray","promise","_update","isDestroyed","DEPRECATE_COMPUTED_CHAINS","cb","then","s","f","catch","finally","links","tapPromise","create","compat","defineSignal","get","proxy","isPending","isSettled","isFulfilled","isRejected","Promise","resolve","error","assertPolymorphicType","env","DEBUG","parentIdentifier","parentDefinition","addedIdentifier","inverseIsImplicit","getSchemaDefinitionService","relationshipsDefinitionFor","inverseKey","as","isResourceIdentiferWithRelatedLinks","Boolean","related","HasManyReference","graph","hasManyRelationship","___token","___identifier","___relatedTokenMap","definition","notifications","subscribe","_","bucket","notifiedKey","_ref","Map","unsubscribe","token","clear","identifiers","resource","_resource","data","resourceIdentifier","identifierCache","getOrCreateRecordIdentifier","delete","getRelationship","remoteType","ids","link","href","doc","skipFetch","dataDoc","isArray","isResourceData","isMaybeResource","_push","i","relationshipMeta","added","newData","_join","load","_isLoaded","hasRelationshipDataProperty","hasReceivedData","relationship","getData","every","_instanceCache","recordIsLoaded","support","LEGACY_SUPPORT","loaded","getManyArray","fetchSyncRel","areAllInverseRecordsLoaded","getHasMany","object","k","BelongsToReference","belongsToRelationship","___relatedToken","peekRecord","getBelongsTo","lookupLegacySupport","isDestroying","LegacySupport","storeFor","peekCache","packages","HAS_JSON_API_PACKAGE","graphFor","importSync","_manyArrayCache","_relationshipPromisesCache","_relationshipProxyCache","_pending","references","_syncArray","array","jsonApi","_getCurrentState","fastPush","_findBelongsTo","_findBelongsToByJsonApiResource","handleCompletedRelationshipRequest","e","loadingPromise","isBelongsTo","hasFailedLoadAttempt","shouldForceReload","_updatePromiseProxyFor","relatedIdentifier","getRecord","toReturn","setDirtyBelongsTo","manyArray","inverseIsAsync","manager","allowMutation","fetchAsyncHasMany","_findHasManyByJsonApiResource","anyUnloaded","kind","promiseProxy","name","reference","actualRelationshipKind","relationshipKind","upgradeStore","adapter","adapterFor","isStale","hasDematerializedInverse","isEmpty","allInverseRecordsAreLoaded","shouldFindViaLink","findHasMany","inverseType","request","useLink","cacheOptions","Symbol","preferLocalCache","hasLocalPartialData","attemptLocalCache","hasData","future","localDataIsEmpty","resourceIsLocal","recordExt","isHasMany","_flush","_graph","relationshipData","unloaded","find","instanceCache","_initializerDefineProperty","ArrayProxyWithCustomOverrides","ArrayProxy","Errors","_dec2","mapBy","_dec3","_dec4","not","_descriptor","_descriptor2","errorsByAttributeName","errorsFor","attribute","errors","A","unknownProperty","messages","_findOrCreateMessages","addObjects","__record","notifyPropertyChange","messagesArray","_messages","message","err","findBy","remove","rejectBy","setObjects","replace","attributes","rollbackAttributes","isNew","RecordStore","rollbackAttrs","cleanErrorRequests","unloadRecord","belongsTo","hasMany","isReloading","changedAttributes","changedAttrs","serialize","serializeRecord","deleteRecord","save","isDeleted","saveRecord","destroyRecord","createSnapshot","_fetchManager","FetchManager","notifyChanges","notifyAttribute","eachAttribute","relationshipsByName","notifyRelationship","eachRelationship","hasPromise","async","cacheFor","getAttr","SOURCE_POINTER_REGEXP","SOURCE_POINTER_PRIMARY_REGEXP","PRIMARY_ATTRIBUTE_KEY","isInvalidError","isAdapterError","code","tagged","_target","getter","setter","getSignal","lastValue","v","notifySignal","obj","peekSignal","RecordState","identity","pendingCount","fulfilledCount","rejectedCount","_errorRequests","_lastError","requests","getRequestStateService","handleRequest","req","isSaving","response","notifyErrorsStateChanged","subscribeForRecord","lastRequest","getLastRequestForRecord","handler","updateInvalidErrors","getErrors","jsonApiErrors","source","pointer","keyMatch","match","search","errMsg","detail","title","isLoading","isSaved","rd","isDeletionCommitted","isValid","isDirty","hasChangedAttrs","isError","errorReq","adapterError","isPreloaded","stateName","dirtyType","findPossibleInverses","relationshipsSoFar","possibleRelationships","relationshipMap","relationships","relationshipsForType","optionsForRelationship","inverse","superclass","computeOnce","propertyName","WeakMap","hasComputed","Model","_class2","EmberObject","___private_notifications","init","_secretInit","_createProps","createProps","___recordState","setProperties","hasDirtyAttributes","normalizedId","coerceId","didChange","setRecordId","toString","_v","attr","binding","relationshipFor","inverseFor","typeForRelationship","modelFor","inverseMap","_findInverseFor","polymorphic","isExplicitInverseNull","isAbstractType","doesTypeExist","fieldOnInverse","inverseKind","inverseRelationship","inverseOptions","inverseSchema","parentModelName","warn","filteredRelationships","possibleRelationship","explicitRelationship","relationshipNames","names","eachComputedProperty","relatedTypes","types","rels","relationshipsObject","fields","eachRelatedType","relationshipTypes","determineRelationshipType","knownSide","knownKey","knownKind","otherKind","transformedAttributes","eachTransformedAttribute","isModel","_createSnapshot","includeDataAdapter","_debugInfo","expensiveProperties","schema","attrDefs","attributesDefinitionFor","relDefs","groups","properties","expand","propertyInfo","includeOtherProperties","lookupDescriptor","keyName","getPrototypeOf","reopen","_super","arguments","ourDescriptor","theirDescriptor","realState","ID_DESCRIPTOR","idDesc","deprecatedReopen","reopenClass","deprecatedReopenClass"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,iBAAiB,SAASC,WAAW,CAAC;AAEzD;AACF;AACA;AACA;AACA;;AAIE;AACF;AACA;AACA;AACA;;AAIE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUE;AACF;AACA;AACA;AACA;AACA;;AAIE;;EAMAC,WAAWA,CAACC,OAA4B,EAAE;IACxC,KAAK,CAACA,OAAkD,CAAC,CAAA;AACzD,IAAA,IAAI,CAACC,QAAQ,GAAGD,OAAO,CAACC,QAAQ,IAAI,KAAK,CAAA;AACzC,IAAA,IAAI,CAACC,OAAO,GAAGF,OAAO,CAACE,OAAO,IAAI,KAAK,CAAA;AACvC,IAAA,IAAI,CAACC,aAAa,GAAGH,OAAO,CAACG,aAAa,IAAI,KAAK,CAAA;AACnD,IAAA,IAAI,CAACC,UAAU,GAAGJ,OAAO,CAACI,UAAU,CAAA;AACpC,IAAA,IAAI,CAACC,GAAG,GAAGL,OAAO,CAACK,GAAG,CAAA;AACxB,GAAA;EAEA,CAACC,MAAM,CACLC,CAAAA,MAAgC,EAChCC,QAAgD,EAChDC,IAAY,EACZC,IAAe,EACfC,OAAe,EACN;AACT,IAAA,QAAQF,IAAI;AACV,MAAA,KAAK,UAAU;AAAE,QAAA;UACfG,OAAO,CAACC,GAAG,CAACN,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAA;AAChCO,UAAAA,2BAA2B,CAAC,IAAI,EAAE,EAAE,EAAEH,OAAO,CAAC,CAAA;AAC9C,UAAA,OAAO,IAAI,CAAA;AACb,SAAA;AACA,MAAA,KAA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;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOEhB,EAAAA,IAAIA,GAAgB;IAClB,IAAIA,IAAiB,GAAG,IAAI,CAAA;AAC5B,IAAA,MAAM8D,QAAQ,GAAG,IAAI,CAACC,SAAS,EAAE,CAAA;AACjC,IAAA,IAAID,QAAQ,IAAIA,QAAQ,CAAC9D,IAAI,IAAI,OAAO8D,QAAQ,CAAC9D,IAAI,KAAK,QAAQ,EAAE;MAClEA,IAAI,GAAG8D,QAAQ,CAAC9D,IAAI,CAAA;AACtB,KAAA;AACA,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAmBE,EAAA,MAAMvH,IAAIA,CACRiM,GAA0D,EAC1DC,SAAmB,EACQ;IAC3B,MAAM;AAAEvJ,MAAAA,KAAAA;AAAM,KAAC,GAAG,IAAI,CAAA;IACtB,MAAMwJ,OAAO,GAAGrL,KAAK,CAACsL,OAAO,CAACH,GAAG,CAAC,GAAG;AAAEV,MAAAA,IAAI,EAAEU,GAAAA;AAAI,KAAC,GAAGA,GAAG,CAAA;IACxD,MAAMI,cAAc,GAAGvL,KAAK,CAACsL,OAAO,CAACD,OAAO,CAACZ,IAAI,CAAC,IAAIY,OAAO,CAACZ,IAAI,CAACrK,MAAM,GAAG,CAAC,IAAIoL,eAAe,CAACH,OAAO,CAACZ,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOEhB,EAAAA,IAAIA,GAAgB;IAClB,IAAIA,IAAiB,GAAG,IAAI,CAAA;AAC5B,IAAA,MAAM8D,QAAQ,GAAG,IAAI,CAACC,SAAS,EAAE,CAAA;AACjC,IAAA,IAAID,QAAQ,IAAIA,QAAQ,CAAC9D,IAAI,IAAI,OAAO8D,QAAQ,CAAC9D,IAAI,KAAK,QAAQ,EAAE;MAClEA,IAAI,GAAG8D,QAAQ,CAAC9D,IAAI,CAAA;AACtB,KAAA;AACA,IAAA,OAAOA,IAAI,CAAA;AACb,GAAA;AAEA+D,EAAAA,SAASA,GAAG;IACV,IAAI,CAACP,IAAI,CAAC;AACV,IAAA,MAAM/H,KAAK,GAAG,IAAI,CAACL,KAAK,CAACK,KAAK,CAAA;IAC9B,OAAOA,KAAK,CAAC4I,eAAe,CAAC,IAAI,CAACrB,aAAa,EAAE,IAAI,CAACzL,GAAG,CAAC,CAAA;AAC5D,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQE+M,EAAAA,UAAUA,GAAkB;AAC1B,IAAA,MAAMnM,KAAK,GAAG,IAAI,CAAC4L,SAAS,EAAE,CAAA;AAC9B,IAAA,IAAItB,mCAAmC,CAACtK,KAAK,CAAC,EAAE;AAC9C,MAAA,OAAO,MAAM,CAAA;AACf,KAAA;AACA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBE,EAAA,MAAMM,IAAIA,CAACiM,GAA2B,EAAEC,SAAmB,EAAyC;IAClG,MAAM;AAAEvJ,MAAAA,KAAAA;AAAM,KAAC,GAAG,IAAI,CAAA;IACtB,MAAM0J,cAAc,GAAGJ,GAAG,CAACV,IAAI,IAAIe,eAAe,CAACL,GAAG,CAACV,IAAI,CAAC,CAAA;AAC5D,IAAA,MAAMmB,KAAK,GAAGL,cAAc,GACvB1J,KAAK,CAAC4J,KAAK,CAACN,GAAG,EAAE,IAAI,CAAC,GACvBA,GAAG,CAACV,IAAI,GACL5I,KAAK,CAAC8I,eAAe,CAACC,2BAA2B,CAACO,GAAG,CAACV,IAAI,CAAC,GAC5D,IAAI,CAAA;IACV,MAAM;AAAE1M,MAAAA,UAAAA;KAAY,GAAG,IAAI,CAACmP,qBAAqB,CAAA;AAEjD,IAAA,IAAA/N,cAAA,CAAAC,YAAA,GAAAoJ,GAAA,CAAAC,KAAA,CAAW,EAAA;AACT,MAAA,IAAImD,KAAK,EAAE;AACTrD,QAAAA,qBAAqB,CAACxK,UAAU,EAAE,IAAI,CAACmP,qBAAqB,CAACvD,UAAU,EAAEiC,KAAK,EAAE/J,KAAK,CAAC,CAAA;AACxF,OAAA;AACF,KAAA;IAEA,MAAMgK,OAAmC,GAAG,EAAE,CAAA;;AAE9C;IACA,IAAIV,GAAG,CAACV,IAAI,IAAIU,GAAG,CAACV,IAAI,KAAK,IAAI,EAAE;MACjCoB,OAAO,CAACpB,IAAI,GAAGmB,KAAK,CAAA;AACtB,KAAA;IACA,IAAI,OAAO,IAAIT,GAAG,EAAE;AAClBU,MAAAA,OAAO,CAACpE,KAAK,GAAG0D,GAAG,CAAC1D,KAAK,CAAA;AAC3B,KAAA;IACA,IAAI,MAAM,IAAI0D,GAAG,EAAE;AACjBU,MAAAA,OAAO,CAACpF,IAAI,GAAG0E,GAAG,CAAC1E,IAAI,CAAA;AACzB,KAAA;IACA5E,KAAK,CAACiK,KAAK,CAAC,MAAM;AAChB,MAAA,IAAI,CAACxC,KAAK,CAACpK,IAAI,CAAC;AACdoF,QAAAA,EAAE,EAAE,oBAAoB;AACxBvC,QAAAA,MAAM,EAAEhE,UAAU;QAClBwG,KAAK,EAAE,IAAI,CAACvG,GAAG;AACfY,QAAAA,KAAK,EAAEiN,OAAAA;AACT,OAAC,CAAC,CAAA;AACJ,KAAC,CAAC,CAAA;IAEF,IAAI,CAACT,SAAS,EAAE,OAAO,IAAI,CAACW,IAAI,EAAE,CAAA;AACpC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQEnN,EAAAA,KAAKA,GAA0B;AAC7B,IAAA,MAAM2L,QAAQ,GAAG,IAAI,CAACC,SAAS,EAAE,CAAA;AACjC,IAAA,OAAOD,QAAQ,IAAIA,QAAQ,CAACE,IAAI,GAAG,IAAI,CAAC5I,KAAK,CAACuL,UAAU,CAAC7C,QAAQ,CAACE,IAAI,CAAC,GAAG,IAAI,CAAA;AAChF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAYE,MAAMsB,IAAIA,CAACpO,OAAiC,EAAkC;IAC5E,MAAM6O,OAAsB,GAAIC,cAAc,CAAgD3E,GAAG,CAC/F,IAAI,CAAC2B,aACP,CAAE,CAAA;IACF,MAAMmD,YAAY,GAChB,CAAC,IAAI,CAACM,qBAAqB,CAACvD,UAAU,CAAC9L,OAAO,IAAI,CAACgP,0BAA0B,CAAC,IA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,YAAY,EAAEN,UAAU,CAACM,YAAY;IACrCE,QAAQ,EAAER,UAAU,CAACQ,QAAQ;AAC7BzG,IAAAA,KAAK,EAAEiG,UAAU,CAACO,WAAW,GAAGP,UAAU,CAACO,WAAW,CAACK,IAAI,CAACX,OAAO,CAAC,GAAG,KAAK,CAAA;AAC9E,GAAC,CAAC,CAAA;AACJ;;;;ACGA;AACA;AACA;;AAUA;AACA;AACA;AACA,MAAMmN,6BAA6B,GAAGC,UAAsE,CAAA;;AAE5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1EA,IA2EMC,MAAM,IAAAjM,IAAA,GAOTC,QAAQ,EAAE,EAAAiM,KAAA,GA2DVC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC,EAAAC,KAAA,GAQ3BnM,QAAQ,EAAE,EAAAoM,KAAA,GAkCVC,GAAG,CAAC,QAAQ,CAAC,GAAApM,QAAA,GA5GhB,MAAM+L,MAAM,SAASF,6BAA6B,CAAkB;AAAAvU,EAAAA,WAAAA,CAAA,GAAAW,IAAA,EAAA;AAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA,CAAA;AAkDlE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbE2T,IAAAA,0BAAA,mBAAAS,WAAA,EAAA,IAAA,CAAA,CAAA;AAyCA;AACF;AACA;AACA;AACA;AACA;AACA;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AANET,IAAAA,0BAAA,kBAAAU,YAAA,EAAA,IAAA,CAAA,CAAA;AAAA,GAAA;AAlGA;AACF;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AY,CAACyY,QAAQ,CAAA;AACnC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAOE,IACI3C,SAASA,GAAG;AACd,IAAA,OAAO,IAAI,CAAC9V,YAAY,CAAC8V,SAAS,CAAA;AACpC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAKE,IACId,KAAKA,GAAG;AACV,IAAA,OAAO,IAAI,CAAChV,YAAY,CAACgV,KAAK,CAAA;AAChC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGE,IACI+E,OAAOA,GAAG;AACZ,IAAA,OAAO,IAAI,CAAC/Z,YAAY,CAAC+Z,OAAO,CAAA;AAClC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAKE,IACIQ,SAASA,GAAG;AACd,IAAA,OAAO,IAAI,CAACva,YAAY,CAACua,SAAS,CAAA;AACpC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAIE,IACIL,OAAOA,GAAG;AACZ,IAAA,OAAO,IAAI,CAACla,YAAY,CAACka,OAAO,CAAA;AAClC,GAAA;EACA,IAAIA,OAAOA,CAACxC,CAAC,EAAE;AACb,IAAA,IAAAxX,cAAA,CAAAC,YAAA,GAAAoJ,GAAA,CAAAC,KAAA,CAAW,EAAA;AACT,MAAA,MAAM,IAAItE,KAAK,CAAE,CAAA,gCAAA,CAAiC,CAAC,CAAA;AACrD,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;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A,KAAK,CAACiV,oBAAoB,CAACjV,IAAI,CAAC,CAAA;AAClC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUE;AACF;AACA;AACA;AACA;AACA;;AAGE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAaE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACE;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQEmd,EAAAA,IAAIA,GAAG;AACLra,IAAAA,MAAM,CACJ,kJAAkJ,EAClJ,KACF,CAAC,CAAA;AACH,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAcE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAcE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAcEwU,EAAAA,gBAAgBA,CAAChT,QAAQ,EAAE8Y,OAAO,EAAE;IAClC,IAAI,CAAC9d,WAAW,CAACgY,gBAAgB,CAAChT,QAAQ,EAAE8Y,OAAO,CAAC,CAAA;AACtD,GAAA;EAEAC,eAAeA,CAAC1L,IAAI,EAAE;IACpB,OAAO,IAAI,CAACrS,WAAW,CAAC8X,mBAAmB,CAAC1N,GAAG,CAACiI,IAAI,CAAC,CAAA;AACvD,GAAA;EAEA2L,UAAUA,CAAC3L,IAAI,EAAE;AACf,IAAA,OAAO,IAAI,CAACrS,WAAW,CAACge,UAAU,CAAC3L,IAAI,EAAEtC,UAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;AAC1D,GAAA;AAEA8H,EAAAA,aAAaA,CAAC7S,QAAQ,EAAE8Y,OAAO,EAAE;IAC/B,IAAI,CAAC9d,WAAW,CAAC6X,aAAa,CAAC7S,QAAQ,EAAE8Y,OAAO,CAAC,CAAA;AACnD,GAAA;AAgDA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAME,EAAA,OAAOG,mBAAmBA,CAAC5L,IAAI,EAAElO,KAAK,EAAE;AACtCX,IAAAA,MAAM,CACH,CAAiG,gGAAA,CAAA,EAClG,IAAI,CAACY,SACP,CAAC,CAAA;IAED,MAAMqK,YAAY,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","x_google_ignoreList":[1,9]}