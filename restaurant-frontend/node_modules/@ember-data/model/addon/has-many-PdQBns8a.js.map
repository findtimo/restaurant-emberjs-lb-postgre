{"version":3,"file":"has-many-PdQBns8a.js","sources":["../src/-private/attr.js","../src/-private/belongs-to.js","../src/-private/has-many.js"],"sourcesContent":["import { assert } from '@ember/debug';\nimport { computed } from '@ember/object';\n\nimport { DEBUG } from '@ember-data/env';\nimport { recordIdentifierFor } from '@ember-data/store';\nimport { peekCache } from '@ember-data/store/-private';\n\nimport { computedMacroWithOptionalParams } from './util';\n\n/**\n  @module @ember-data/model\n*/\n\n/**\n  `attr` defines an attribute on a [Model](/ember-data/release/classes/Model).\n  By default, attributes are passed through as-is, however you can specify an\n  optional type to have the value automatically transformed.\n  Ember Data ships with four basic transform types: `string`, `number`,\n  `boolean` and `date`. You can define your own transforms by subclassing\n  [Transform](/ember-data/release/classes/Transform).\n\n  Note that you cannot use `attr` to define an attribute of `id`.\n\n  `attr` takes an optional hash as a second parameter, currently\n  supported options are:\n\n  - `defaultValue`: Pass a string or a function to be called to set the attribute\n  to a default value if and only if the key is absent from the payload response.\n\n  Example\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('string') username;\n    @attr('string') email;\n    @attr('boolean', { defaultValue: false }) verified;\n  }\n  ```\n\n  Default value can also be a function. This is useful it you want to return\n  a new object for each attribute.\n\n  ```app/models/user.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @attr('string') username;\n    @attr('string') email;\n\n    @attr({\n      defaultValue() {\n        return {};\n      }\n    })\n    settings;\n  }\n  ```\n\n  The `options` hash is passed as second argument to a transforms'\n  `serialize` and `deserialize` method. This allows to configure a\n  transformation and adapt the corresponding value, based on the config:\n\n  ```app/models/post.js\n  import Model, { attr } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @attr('text', {\n      uppercase: true\n    })\n    text;\n  }\n  ```\n\n  ```app/transforms/text.js\n  export default class TextTransform {\n    serialize(value, options) {\n      if (options.uppercase) {\n        return value.toUpperCase();\n      }\n\n      return value;\n    }\n\n    deserialize(value) {\n      return value;\n    }\n\n    static create() {\n      return new this();\n    }\n  }\n  ```\n\n  @method attr\n  @public\n  @static\n  @for @ember-data/model\n  @param {String|Object} type the attribute type\n  @param {Object} options a hash of options\n  @return {Attribute}\n*/\nfunction attr(type, options) {\n  if (typeof type === 'object') {\n    options = type;\n    type = undefined;\n  } else {\n    options = options || {};\n  }\n\n  const meta = {\n    type: type,\n    kind: 'attribute',\n    isAttribute: true,\n    options: options,\n    key: null,\n  };\n\n  return computed({\n    get(key) {\n      if (DEBUG) {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(\n            `'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your attr on ${this.constructor.toString()}`\n          );\n        }\n      }\n      if (this.isDestroyed || this.isDestroying) {\n        return;\n      }\n      return peekCache(this).getAttr(recordIdentifierFor(this), key);\n    },\n    set(key, value) {\n      if (DEBUG) {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(\n            `'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your attr on ${this.constructor.toString()}`\n          );\n        }\n      }\n      assert(\n        `Attempted to set '${key}' on the deleted record ${recordIdentifierFor(this)}`,\n        !this.currentState.isDeleted\n      );\n      const identifier = recordIdentifierFor(this);\n      const cache = peekCache(this);\n\n      const currentValue = cache.getAttr(identifier, key);\n      if (currentValue !== value) {\n        cache.setAttr(identifier, key, value);\n\n        if (!this.isValid) {\n          const { errors } = this;\n          if (errors.get(key)) {\n            errors.remove(key);\n            this.currentState.cleanErrorRequests();\n          }\n        }\n      }\n\n      return value;\n    },\n  }).meta(meta);\n}\n\nexport default computedMacroWithOptionalParams(attr);\n","import { assert, warn } from '@ember/debug';\nimport { computed } from '@ember/object';\n\nimport { DEBUG } from '@ember-data/env';\n\nimport { lookupLegacySupport } from './legacy-relationships-support';\nimport { computedMacroWithOptionalParams, normalizeModelName } from './util';\n\n/**\n  @module @ember-data/model\n*/\n\n/**\n  `belongsTo` is used to define One-To-One and One-To-Many\n  relationships on a [Model](/ember-data/release/classes/Model).\n\n\n  `belongsTo` takes an optional hash as a second parameter, currently\n  supported options are:\n\n  - `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n  - `inverse`: A string used to identify the inverse property on a\n    related model in a One-To-Many relationship. See [Explicit Inverses](#explicit-inverses)\n  - `polymorphic` A boolean value to mark the relationship as polymorphic\n\n  #### One-To-One\n  To declare a one-to-one relationship between two models, use\n  `belongsTo`:\n\n  ```app/models/user.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class UserModel extends Model {\n    @belongsTo('profile') profile;\n  }\n  ```\n\n  ```app/models/profile.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class ProfileModel extends Model {\n    @belongsTo('user') user;\n  }\n  ```\n\n  #### One-To-Many\n\n  To declare a one-to-many relationship between two models, use\n  `belongsTo` in combination with `hasMany`, like this:\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment', { async: false, inverse: 'post' }) comments;\n  }\n  ```\n\n  ```app/models/comment.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class CommentModel extends Model {\n    @belongsTo('post', { async: false, inverse: 'comments' }) post;\n  }\n  ```\n\n  #### Sync relationships\n\n  Ember Data resolves sync relationships with the related resources\n  available in its local store, hence it is expected these resources\n  to be loaded before or along-side the primary resource.\n\n  ```app/models/comment.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class CommentModel extends Model {\n    @belongsTo('post', {\n      async: false,\n      inverse: null\n    })\n    post;\n  }\n  ```\n\n  In contrast to async relationship, accessing a sync relationship\n  will always return the record (Model instance) for the existing\n  local resource, or null. But it will error on access when\n  a related resource is known to exist and it has not been loaded.\n\n  ```\n  let post = comment.post;\n\n  ```\n\n  @method belongsTo\n  @public\n  @static\n  @for @ember-data/model\n  @param {String} modelName (optional) type of the relationship\n  @param {Object} options (optional) a hash of options\n  @return {Ember.computed} relationship\n*/\nfunction belongsTo(modelName, options) {\n  const opts = options;\n  const userEnteredModelName = modelName;\n\n  assert(\n    `Expected options.async from @belongsTo('${userEnteredModelName}', options) to be a boolean`,\n    opts && typeof opts.async === 'boolean'\n  );\n  assert(\n    `Expected options.inverse from @belongsTo('${userEnteredModelName}', options) to be either null or the string type of the related resource.`,\n    opts.inverse === null || (typeof opts.inverse === 'string' && opts.inverse.length > 0)\n  );\n\n  const meta = {\n    type: normalizeModelName(userEnteredModelName),\n    isRelationship: true,\n    options: opts,\n    kind: 'belongsTo',\n    name: '<Unknown BelongsTo>',\n    key: null,\n  };\n\n  return computed({\n    get(key) {\n      // this is a legacy behavior we may not carry into a new model setup\n      // it's better to error on disconnected records so users find errors\n      // in their logic.\n      if (this.isDestroying || this.isDestroyed) {\n        return null;\n      }\n      const support = lookupLegacySupport(this);\n\n      if (DEBUG) {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(\n            `'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your belongsTo on ${this.constructor.toString()}`\n          );\n        }\n        if (Object.prototype.hasOwnProperty.call(opts, 'serialize')) {\n          warn(\n            `You provided a serialize option on the \"${key}\" property in the \"${support.identifier.type}\" class, this belongs in the serializer. See Serializer and it's implementations https://api.emberjs.com/ember-data/release/classes/Serializer`,\n            false,\n            {\n              id: 'ds.model.serialize-option-in-belongs-to',\n            }\n          );\n        }\n\n        if (Object.prototype.hasOwnProperty.call(opts, 'embedded')) {\n          warn(\n            `You provided an embedded option on the \"${key}\" property in the \"${support.identifier.type}\" class, this belongs in the serializer. See EmbeddedRecordsMixin https://api.emberjs.com/ember-data/release/classes/EmbeddedRecordsMixin`,\n            false,\n            {\n              id: 'ds.model.embedded-option-in-belongs-to',\n            }\n          );\n        }\n      }\n\n      return support.getBelongsTo(key);\n    },\n    set(key, value) {\n      const support = lookupLegacySupport(this);\n      if (DEBUG) {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(\n            `'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your belongsTo on ${this.constructor.toString()}`\n          );\n        }\n      }\n      this.store._join(() => {\n        support.setDirtyBelongsTo(key, value);\n      });\n\n      return support.getBelongsTo(key);\n    },\n  }).meta(meta);\n}\n\nexport default computedMacroWithOptionalParams(belongsTo);\n","/**\n  @module @ember-data/model\n*/\nimport { assert, deprecate } from '@ember/debug';\nimport { computed } from '@ember/object';\nimport { dasherize } from '@ember/string';\n\nimport { singularize } from 'ember-inflector';\n\nimport { DEPRECATE_NON_STRICT_TYPES } from '@ember-data/deprecations';\nimport { DEBUG } from '@ember-data/env';\n\nimport { lookupLegacySupport } from './legacy-relationships-support';\nimport { computedMacroWithOptionalParams } from './util';\n\nfunction normalizeType(type) {\n  if (DEPRECATE_NON_STRICT_TYPES) {\n    const result = singularize(dasherize(type));\n\n    deprecate(\n      `The resource type '${type}' is not normalized. Update your application code to use '${result}' instead of '${type}'.`,\n      result === type,\n      {\n        id: 'ember-data:deprecate-non-strict-types',\n        until: '6.0',\n        for: 'ember-data',\n        since: {\n          available: '5.3',\n          enabled: '5.3',\n        },\n      }\n    );\n\n    return result;\n  }\n\n  return type;\n}\n\n/**\n  `hasMany` is used to define One-To-Many and Many-To-Many\n  relationships on a [Model](/ember-data/release/classes/Model).\n\n  `hasMany` takes an optional hash as a second parameter, currently\n  supported options are:\n\n  - `async`: A boolean value used to explicitly declare this to be an async relationship. The default is true.\n  - `inverse`: A string used to identify the inverse property on a related model.\n  - `polymorphic` A boolean value to mark the relationship as polymorphic\n\n  #### One-To-Many\n  To declare a one-to-many relationship between two models, use\n  `belongsTo` in combination with `hasMany`, like this:\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment') comments;\n  }\n  ```\n\n  ```app/models/comment.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class CommentModel extends Model {\n    @belongsTo('post') post;\n  }\n  ```\n\n  #### Many-To-Many\n  To declare a many-to-many relationship between two models, use\n  `hasMany`:\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('tag') tags;\n  }\n  ```\n\n  ```app/models/tag.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class TagModel extends Model {\n    @hasMany('post') posts;\n  }\n  ```\n\n  You can avoid passing a string as the first parameter. In that case Ember Data\n  will infer the type from the singularized key name.\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany tags;\n  }\n  ```\n\n  will lookup for a Tag type.\n\n  #### Explicit Inverses\n\n  Ember Data will do its best to discover which relationships map to\n  one another. In the one-to-many code above, for example, Ember Data\n  can figure out that changing the `comments` relationship should update\n  the `post` relationship on the inverse because post is the only\n  relationship to that model.\n\n  However, sometimes you may have multiple `belongsTo`/`hasMany` for the\n  same type. You can specify which property on the related model is\n  the inverse using `hasMany`'s `inverse` option:\n\n  ```app/models/comment.js\n  import Model, { belongsTo } from '@ember-data/model';\n\n  export default class CommentModel extends Model {\n    @belongsTo('post') onePost;\n    @belongsTo('post') twoPost\n    @belongsTo('post') redPost;\n    @belongsTo('post') bluePost;\n  }\n  ```\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment', {\n      inverse: 'redPost'\n    })\n    comments;\n  }\n  ```\n\n  You can also specify an inverse on a `belongsTo`, which works how\n  you'd expect.\n\n  #### Sync relationships\n\n  Ember Data resolves sync relationships with the related resources\n  available in its local store, hence it is expected these resources\n  to be loaded before or along-side the primary resource.\n\n  ```app/models/post.js\n  import Model, { hasMany } from '@ember-data/model';\n\n  export default class PostModel extends Model {\n    @hasMany('comment', {\n      async: false\n    })\n    comments;\n  }\n  ```\n\n  In contrast to async relationship, accessing a sync relationship\n  will always return a [ManyArray](/ember-data/release/classes/ManyArray) instance\n  containing the existing local resources. But it will error on access\n  when any of the known related resources have not been loaded.\n\n  ```\n  post.comments.forEach((comment) => {\n\n  });\n\n  ```\n\n  If you are using `links` with sync relationships, you have to use\n  `ref.reload` to fetch the resources.\n\n  @method hasMany\n  @public\n  @static\n  @for @ember-data/model\n  @param {String} type (optional) type of the relationship\n  @param {Object} options (optional) a hash of options\n  @return {Ember.computed} relationship\n*/\nfunction hasMany(type, options) {\n  assert(`Expected hasMany options.async to be a boolean`, options && typeof options.async === 'boolean');\n\n  // Metadata about relationships is stored on the meta of\n  // the relationship. This is used for introspection and\n  // serialization. Note that `key` is populated lazily\n  // the first time the CP is called.\n  const meta = {\n    type: normalizeType(type),\n    options,\n    isRelationship: true,\n    kind: 'hasMany',\n    name: '<Unknown BelongsTo>',\n    key: null,\n  };\n\n  return computed({\n    get(key) {\n      if (DEBUG) {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(\n            `'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your hasMany on ${this.constructor.toString()}`\n          );\n        }\n      }\n      if (this.isDestroying || this.isDestroyed) {\n        return [];\n      }\n      return lookupLegacySupport(this).getHasMany(key);\n    },\n    set(key, records) {\n      if (DEBUG) {\n        if (['currentState'].indexOf(key) !== -1) {\n          throw new Error(\n            `'${key}' is a reserved property name on instances of classes extending Model. Please choose a different property name for your hasMany on ${this.constructor.toString()}`\n          );\n        }\n      }\n      const support = lookupLegacySupport(this);\n      const manyArray = support.getManyArray(key);\n      assert(`You must pass an array of records to set a hasMany relationship`, Array.isArray(records));\n      this.store._join(() => {\n        manyArray.splice(0, manyArray.length, ...records);\n      });\n\n      return support.getHasMany(key);\n    },\n  }).meta(meta);\n}\n\nexport default computedMacroWithOptionalParams(hasMany);\n"],"names":["attr","type","options","undefined","meta","kind","isAttribute","key","computed","get","macroCondition","getOwnConfig","env","DEBUG","indexOf","Error","constructor","toString","isDestroyed","isDestroying","peekCache","getAttr","recordIdentifierFor","set","value","assert","currentState","isDeleted","identifier","cache","currentValue","setAttr","isValid","errors","remove","cleanErrorRequests","computedMacroWithOptionalParams","belongsTo","modelName","opts","userEnteredModelName","async","inverse","length","normalizeModelName","isRelationship","name","support","lookupLegacySupport","Object","prototype","hasOwnProperty","call","warn","id","getBelongsTo","store","_join","setDirtyBelongsTo","normalizeType","deprecations","DEPRECATE_NON_STRICT_TYPES","result","singularize","dasherize","deprecate","until","for","since","available","enabled","hasMany","getHasMany","records","manyArray","getManyArray","Array","isArray","splice"],"mappings":"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"}