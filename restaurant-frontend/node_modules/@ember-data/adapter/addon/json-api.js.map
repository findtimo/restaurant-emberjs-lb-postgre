{"version":3,"file":"json-api.js","sources":["../src/json-api.ts"],"sourcesContent":["/**\n  @module @ember-data/adapter/json-api\n */\nimport { assert } from '@ember/debug';\nimport { dasherize } from '@ember/string';\n\nimport { pluralize } from 'ember-inflector';\n\nimport type { Snapshot } from '@ember-data/legacy-compat/-private';\nimport type { AdapterPayload } from '@ember-data/legacy-compat/legacy-network-handler/minimum-adapter-interface';\nimport type Store from '@ember-data/store';\nimport type { ModelSchema } from '@ember-data/store/-types/q/ds-model';\nimport type { HTTPMethod } from '@warp-drive/core-types/request';\n\nimport { serializeIntoHash } from './-private';\nimport type { FetchRequestInit, JQueryRequestInit } from './rest';\nimport RESTAdapter from './rest';\n\n/**\n  ## Overview\n\n  <blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n  <p>\n    ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n    If starting a new app or thinking of implementing a new adapter, consider writing a\n    <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n  </p>\n  </blockquote>\n\n  The `JSONAPIAdapter` is an adapter whichtransforms the store's\n  requests into HTTP requests that follow the [JSON API format](http://jsonapi.org/format/).\n\n  ## JSON API Conventions\n\n  The JSONAPIAdapter uses JSON API conventions for building the URL\n  for a record and selecting the HTTP verb to use with a request. The\n  actions you can take on a record map onto the following URLs in the\n  JSON API adapter:\n\n<table>\n  <tr>\n    <th>\n      Action\n    </th>\n    <th>\n      HTTP Verb\n    </th>\n    <th>\n      URL\n    </th>\n  </tr>\n  <tr>\n    <th>\n      `store.findRecord('post', 123)`\n    </th>\n    <td>\n      GET\n    </td>\n    <td>\n      /posts/123\n    </td>\n  </tr>\n  <tr>\n    <th>\n      `store.findAll('post')`\n    </th>\n    <td>\n      GET\n    </td>\n    <td>\n      /posts\n    </td>\n  </tr>\n  <tr>\n    <th>\n      Update `postRecord.save()`\n    </th>\n    <td>\n      PATCH\n    </td>\n    <td>\n      /posts/123\n    </td>\n  </tr>\n  <tr>\n    <th>\n      Create `store.createRecord('post').save()`\n    </th>\n    <td>\n      POST\n    </td>\n    <td>\n      /posts\n    </td>\n  </tr>\n  <tr>\n    <th>\n      Delete `postRecord.destroyRecord()`\n    </th>\n    <td>\n      DELETE\n    </td>\n    <td>\n      /posts/123\n    </td>\n  </tr>\n</table>\n\n  ## Success and failure\n\n  The JSONAPIAdapter will consider a success any response with a\n  status code of the 2xx family (\"Success\"), as well as 304 (\"Not\n  Modified\"). Any other status code will be considered a failure.\n\n  On success, the request promise will be resolved with the full\n  response payload.\n\n  Failed responses with status code 422 (\"Unprocessable Entity\") will\n  be considered \"invalid\". The response will be discarded, except for\n  the `errors` key. The request promise will be rejected with a\n  `InvalidError`. This error object will encapsulate the saved\n  `errors` value.\n\n  Any other status codes will be treated as an adapter error. The\n  request promise will be rejected, similarly to the invalid case,\n  but with an instance of `AdapterError` instead.\n\n  ### Endpoint path customization\n\n  Endpoint paths can be prefixed with a `namespace` by setting the\n  namespace property on the adapter:\n\n  ```app/adapters/application.js\n  import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n  export default class ApplicationAdapter extends JSONAPIAdapter {\n    namespace = 'api/1';\n  }\n  ```\n  Requests for the `person` model would now target `/api/1/people/1`.\n\n  ### Host customization\n\n  An adapter can target other hosts by setting the `host` property.\n\n  ```app/adapters/application.js\n  import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n  export default class ApplicationAdapter extends JSONAPIAdapter {\n    host = 'https://api.example.com';\n  }\n  ```\n\n  Requests for the `person` model would now target\n  `https://api.example.com/people/1`.\n\n  @since 1.13.0\n  @class JSONAPIAdapter\n  @main @ember-data/adapter/json-api\n  @public\n  @constructor\n  @extends RESTAdapter\n*/\nclass JSONAPIAdapter extends RESTAdapter {\n  override _defaultContentType = 'application/vnd.api+json';\n\n  /**\n    @method ajaxOptions\n    @private\n    @param {String} url\n    @param {String} type The request type GET, POST, PUT, DELETE etc.\n    @param {Object} options\n    @return {Object}\n  */\n  override ajaxOptions(\n    url: string,\n    type: HTTPMethod,\n    options: JQueryAjaxSettings | RequestInit = {}\n  ): JQueryRequestInit | FetchRequestInit {\n    const hash = super.ajaxOptions(url, type, options) as FetchRequestInit;\n    const headers: HeadersInit = (hash.headers = hash.headers || {});\n    headers['Accept'] = (headers['Accept'] as string) || 'application/vnd.api+json';\n\n    return hash;\n  }\n\n  /**\n    By default the JSONAPIAdapter will send each find request coming from a `store.find`\n    or from accessing a relationship separately to the server. If your server supports passing\n    ids as a query string, you can set coalesceFindRequests to true to coalesce all find requests\n    within a single runloop.\n\n    For example, if you have an initial payload of:\n\n    ```javascript\n    {\n      data: {\n        id: 1,\n        type: 'post',\n        relationship: {\n          comments: {\n            data: [\n              { id: 1, type: 'comment' },\n              { id: 2, type: 'comment' }\n            ]\n          }\n        }\n      }\n    }\n    ```\n\n    By default calling `post.comments` will trigger the following requests(assuming the\n    comments haven't been loaded before):\n\n    ```\n    GET /comments/1\n    GET /comments/2\n    ```\n\n    If you set coalesceFindRequests to `true` it will instead trigger the following request:\n\n    ```\n    GET /comments?filter[id]=1,2\n    ```\n\n    Setting coalesceFindRequests to `true` also works for `store.find` requests and `belongsTo`\n    relationships accessed within the same runloop. If you set `coalesceFindRequests: true`\n\n    ```javascript\n    store.findRecord('comment', 1);\n    store.findRecord('comment', 2);\n    ```\n\n    will also send a request to: `GET /comments?filter[id]=1,2`\n\n    Note: Requests coalescing rely on URL building strategy. So if you override `buildURL` in your app\n    `groupRecordsForFindMany` more likely should be overridden as well in order for coalescing to work.\n\n    @property coalesceFindRequests\n    @public\n    @type {boolean}\n  */\n  override get coalesceFindRequests() {\n    const coalesceFindRequests = this._coalesceFindRequests;\n    if (typeof coalesceFindRequests === 'boolean') {\n      return coalesceFindRequests;\n    }\n    return (this._coalesceFindRequests = false);\n  }\n\n  override set coalesceFindRequests(value: boolean) {\n    this._coalesceFindRequests = value;\n  }\n\n  override findMany(store: Store, type: ModelSchema, ids: string[], snapshots: Snapshot[]): Promise<AdapterPayload> {\n    const url = this.buildURL(type.modelName, ids, snapshots, 'findMany');\n    return this.ajax(url, 'GET', { data: { filter: { id: ids.join(',') } } });\n  }\n\n  override pathForType(modelName: string): string {\n    const dasherized = dasherize(modelName);\n    return pluralize(dasherized);\n  }\n\n  override updateRecord(store: Store, schema: ModelSchema, snapshot: Snapshot): Promise<AdapterPayload> {\n    const data = serializeIntoHash(store, schema, snapshot);\n    const type = snapshot.modelName;\n    const id = snapshot.id;\n    assert(`Attempted to update the ${type} record, but the record has no id`, typeof id === 'string' && id.length > 0);\n\n    const url = this.buildURL(type, id, snapshot, 'updateRecord');\n\n    return this.ajax(url, 'PATCH', { data: data });\n  }\n}\n\nexport default JSONAPIAdapter;\n"],"names":["JSONAPIAdapter","RESTAdapter","constructor","args","_defaultContentType","ajaxOptions","url","type","options","hash","headers","coalesceFindRequests","_coalesceFindRequests","value","findMany","store","ids","snapshots","buildURL","modelName","ajax","data","filter","id","join","pathForType","dasherized","dasherize","pluralize","updateRecord","schema","snapshot","serializeIntoHash","assert","length"],"mappings":"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"}