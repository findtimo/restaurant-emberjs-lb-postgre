{"version":3,"file":"build-url-mixin-AgfAmsW-.js","sources":["../src/-private/build-url-mixin.ts"],"sourcesContent":["import Mixin from '@ember/object/mixin';\nimport { camelize } from '@ember/string';\n\nimport { pluralize } from 'ember-inflector';\n\nimport type { Snapshot, SnapshotRecordArray } from '@ember-data/legacy-compat/-private';\n\n/**\n  @module @ember-data/adapter\n*/\n\n/*\n The structure of this file is such because typing Mixins is hard. Here we've structured it in\n such a way as to maximize the type information that a consumer can utilize. There are simpler\n ways to type a mixin but we would not be able to provide the nice overload signature for buildURL\n*/\n// the interface must fully declare the function signatures that the individual functions\n// will also declare. If instead we try to keep them in sync by doing something like\n// `interface BuildURLMixin { buildURL: typeof buildURL }`\n// then an extending class overwriting one of the methods will break because typescript\n// thinks it is a switch from an instance prop (that is a method) to an instance method.\ninterface BuildURLMixin {\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: string,\n    snapshot: Snapshot,\n    requestType: 'findRecord'\n  ): string;\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: null,\n    snapshot: SnapshotRecordArray,\n    requestType: 'findAll'\n  ): string;\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: null,\n    snapshot: null,\n    requestType: 'query',\n    query: Record<string, unknown>\n  ): string;\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: null,\n    snapshot: null,\n    requestType: 'queryRecord',\n    query: Record<string, unknown>\n  ): string;\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: string[],\n    snapshot: Snapshot[],\n    requestType: 'findMany'\n  ): string;\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: string,\n    snapshot: Snapshot,\n    requestType: 'findHasMany'\n  ): string;\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: string,\n    snapshot: Snapshot,\n    requestType: 'findBelongsTo'\n  ): string;\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: string | null,\n    snapshot: Snapshot,\n    requestType: 'createRecord'\n  ): string;\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: string,\n    snapshot: Snapshot,\n    requestType: 'updateRecord'\n  ): string;\n  buildURL(\n    this: MixtBuildURLMixin,\n    modelName: string,\n    id: string,\n    snapshot: Snapshot,\n    requestType: 'deleteRecord'\n  ): string;\n  buildURL(this: MixtBuildURLMixin, modelName: string, id: string, snapshot: Snapshot): string;\n  _buildURL(this: MixtBuildURLMixin, modelName: string | null | undefined, id?: string | null): string;\n  urlForFindRecord(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;\n  urlForFindAll(this: MixtBuildURLMixin, modelName: string, snapshots: SnapshotRecordArray): string;\n  urlForQueryRecord(this: MixtBuildURLMixin, query: Record<string, unknown>, modelName: string): string;\n  urlForQuery(this: MixtBuildURLMixin, query: Record<string, unknown>, modelName: string): string;\n  urlForFindMany(this: MixtBuildURLMixin, ids: string[], modelName: string, snapshots: Snapshot[]): string;\n  urlForFindHasMany(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;\n  urlForFindBelongsTo(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;\n  urlForCreateRecord(this: MixtBuildURLMixin, modelName: string, snapshot: Snapshot): string;\n  urlForUpdateRecord(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;\n  urlForDeleteRecord(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string;\n  urlPrefix(this: MixtBuildURLMixin, path?: string | null, parentURL?: string): string;\n  pathForType(this: MixtBuildURLMixin, modelName: string): string;\n}\n\n// prevents the final constructed object from needing to add\n// host and namespace which are provided by the final consuming\n// class to the prototype which can result in overwrite errors\nexport interface MixtBuildURLMixin extends BuildURLMixin {\n  host: string | null;\n  namespace: string | null;\n}\n\n/**\n  ## Using BuildURLMixin\n\n  To use URL building, include the mixin when extending an adapter, and call `buildURL` where needed.\n  The default behaviour is designed for RESTAdapter.\n\n  ### Example\n\n  ```javascript\n  import Adapter, { BuildURLMixin } from '@ember-data/adapter';\n\n  export default class ApplicationAdapter extends Adapter.extend(BuildURLMixin) {\n    findRecord(store, type, id, snapshot) {\n      var url = this.buildURL(type.modelName, id, snapshot, 'findRecord');\n      return this.ajax(url, 'GET');\n    }\n  }\n  ```\n\n  ### Attributes\n\n  The `host` and `namespace` attributes will be used if defined, and are optional.\n\n  @class BuildURLMixin\n  @public\n*/\n/**\n    Builds a URL for a given type and optional ID.\n\n    By default, it pluralizes the type's name (for example, 'post'\n    becomes 'posts' and 'person' becomes 'people'). To override the\n    pluralization see [pathForType](./pathForType?anchor=pathForType).\n\n    If an ID is specified, it adds the ID to the path generated\n    for the type, separated by a `/`.\n\n    When called by `RESTAdapter.findMany()` the `id` and `snapshot` parameters\n    will be arrays of ids and snapshots.\n\n    @method buildURL\n    @public\n    @param {String} modelName\n    @param {(String|Array|Object)} id single id or array of ids or query\n    @param {(Snapshot|SnapshotRecordArray)} snapshot single snapshot or array of snapshots\n    @param {String} requestType\n    @param {Object} query object of query parameters to send for query requests.\n    @return {String} url\n  */\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: string,\n  snapshot: Snapshot,\n  requestType: 'findRecord'\n): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: null,\n  snapshot: SnapshotRecordArray,\n  requestType: 'findAll'\n): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: null,\n  snapshot: null,\n  requestType: 'query',\n  query: Record<string, unknown>\n): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: null,\n  snapshot: null,\n  requestType: 'queryRecord',\n  query: Record<string, unknown>\n): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: string[],\n  snapshot: Snapshot[],\n  requestType: 'findMany'\n): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: string,\n  snapshot: Snapshot,\n  requestType: 'findHasMany'\n): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: string,\n  snapshot: Snapshot,\n  requestType: 'findBelongsTo'\n): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: string | null,\n  snapshot: Snapshot,\n  requestType: 'createRecord'\n): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: string,\n  snapshot: Snapshot,\n  requestType: 'updateRecord'\n): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: string,\n  snapshot: Snapshot,\n  requestType: 'deleteRecord'\n): string;\nfunction buildURL(this: MixtBuildURLMixin, modelName: string, id: string, snapshot: Snapshot): string;\nfunction buildURL(\n  this: MixtBuildURLMixin,\n  modelName: string,\n  id: string | string[] | Record<string, unknown> | null,\n  snapshot: Snapshot | Snapshot[] | SnapshotRecordArray | null,\n  requestType?:\n    | 'findRecord'\n    | 'findAll'\n    | 'query'\n    | 'queryRecord'\n    | 'findMany'\n    | 'findHasMany'\n    | 'findBelongsTo'\n    | 'createRecord'\n    | 'updateRecord'\n    | 'deleteRecord',\n  query?: Record<string, unknown>\n): string {\n  /*\n      Switch statements in typescript don't currently narrow even when the function is implemented\n      with overloads.\n\n      We still extract this to stand alone so that we can provide nice overloads for calling signatures,\n      but we will still require all of this casting (or a ridiculous number of assertsthat narrow it down\n      for us).\n  */\n  switch (requestType) {\n    case 'findRecord':\n      return this.urlForFindRecord(id as string, modelName, snapshot as Snapshot);\n    case 'findAll':\n      return this.urlForFindAll(modelName, snapshot as SnapshotRecordArray);\n    case 'query':\n      return this.urlForQuery(query || {}, modelName);\n    case 'queryRecord':\n      return this.urlForQueryRecord(query || {}, modelName);\n    case 'findMany':\n      return this.urlForFindMany(id as string[], modelName, snapshot as Snapshot[]);\n    case 'findHasMany':\n      return this.urlForFindHasMany(id as string, modelName, snapshot as Snapshot);\n    case 'findBelongsTo':\n      return this.urlForFindBelongsTo(id as string, modelName, snapshot as Snapshot);\n    case 'createRecord':\n      return this.urlForCreateRecord(modelName, snapshot as Snapshot);\n    case 'updateRecord':\n      return this.urlForUpdateRecord(id as string, modelName, snapshot as Snapshot);\n    case 'deleteRecord':\n      return this.urlForDeleteRecord(id as string, modelName, snapshot as Snapshot);\n    default:\n      // this is the 'never' case but someone may call `buildURL` manually so\n      // we try to do something for them.\n      return this._buildURL(modelName, id as string | null);\n  }\n}\n\n/**\n    @method _buildURL\n    @private\n    @param {String} modelName\n    @param {String} id\n    @return {String} url\n  */\nfunction _buildURL(this: MixtBuildURLMixin, modelName: string | null | undefined, id?: string | null): string {\n  let path: string;\n  const url: string[] = [];\n  const { host } = this;\n  const prefix = this.urlPrefix();\n\n  if (modelName) {\n    path = this.pathForType(modelName);\n    if (path) {\n      url.push(path);\n    }\n  }\n\n  if (id) {\n    url.push(encodeURIComponent(id));\n  }\n  if (prefix) {\n    url.unshift(prefix);\n  }\n\n  let urlString = url.join('/');\n  if (!host && urlString && urlString.charAt(0) !== '/') {\n    urlString = '/' + urlString;\n  }\n\n  return urlString;\n}\n\n/**\n   Builds a URL for a `store.findRecord(type, id)` call.\n\n   Example:\n\n   ```app/adapters/user.js\n   import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n   export default class ApplicationAdapter extends JSONAPIAdapter {\n     urlForFindRecord(id, modelName, snapshot) {\n       let baseUrl = this.buildURL(modelName, id, snapshot);\n       return `${baseUrl}/users/${snapshot.adapterOptions.user_id}/playlists/${id}`;\n     }\n   }\n   ```\n\n   @method urlForFindRecord\n   @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n\n   */\nfunction urlForFindRecord(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string {\n  return this._buildURL(modelName, id);\n}\n\n/**\n   Builds a URL for a `store.findAll(type)` call.\n\n   Example:\n\n   ```app/adapters/comment.js\n   import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n   export default class ApplicationAdapter extends JSONAPIAdapter {\n     urlForFindAll(modelName, snapshot) {\n       let baseUrl = this.buildURL(modelName);\n       return `${baseUrl}/data/comments.json`;\n     }\n   }\n   ```\n\n   @method urlForFindAll\n    @public\n   @param {String} modelName\n   @param {SnapshotRecordArray} snapshot\n   @return {String} url\n   */\nfunction urlForFindAll(this: MixtBuildURLMixin, modelName: string, snapshots: SnapshotRecordArray): string {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for a `store.query(type, query)` call.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     host = 'https://api.github.com';\n     urlForQuery (query, modelName) {\n       switch(modelName) {\n         case 'repo':\n           return `https://api.github.com/orgs/${query.orgId}/repos`;\n         default:\n           return super.urlForQuery(...arguments);\n       }\n     }\n   }\n   ```\n\n   @method urlForQuery\n    @public\n   @param {Object} query\n   @param {String} modelName\n   @return {String} url\n   */\nfunction urlForQuery(this: MixtBuildURLMixin, query: Record<string, unknown>, modelName: string): string {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for a `store.queryRecord(type, query)` call.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForQueryRecord({ slug }, modelName) {\n       let baseUrl = this.buildURL();\n       return `${baseUrl}/${encodeURIComponent(slug)}`;\n     }\n   }\n   ```\n\n   @method urlForQueryRecord\n    @public\n   @param {Object} query\n   @param {String} modelName\n   @return {String} url\n   */\nfunction urlForQueryRecord(this: MixtBuildURLMixin, query: Record<string, unknown>, modelName: string): string {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for coalescing multiple `store.findRecord(type, id)`\n   records into 1 request when the adapter's `coalesceFindRequests`\n   property is `true`.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForFindMany(ids, modelName) {\n       let baseUrl = this.buildURL();\n       return `${baseUrl}/coalesce`;\n     }\n   }\n   ```\n\n   @method urlForFindMany\n    @public\n   @param {Array} ids\n   @param {String} modelName\n   @param {Array} snapshots\n   @return {String} url\n   */\nfunction urlForFindMany(this: MixtBuildURLMixin, ids: string[], modelName: string, snapshots: Snapshot[]): string {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for fetching an async `hasMany` relationship when a URL\n   is not provided by the server.\n\n   Example:\n\n   ```app/adapters/application.js\n   import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n   export default class ApplicationAdapter extends JSONAPIAdapter {\n     urlForFindHasMany(id, modelName, snapshot) {\n       let baseUrl = this.buildURL(modelName, id);\n       return `${baseUrl}/relationships`;\n     }\n   }\n   ```\n\n   @method urlForFindHasMany\n    @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForFindHasMany(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string {\n  return this._buildURL(modelName, id);\n}\n\n/**\n   Builds a URL for fetching an async `belongsTo` relationship when a url\n   is not provided by the server.\n\n   Example:\n\n   ```app/adapters/application.js\n   import JSONAPIAdapter from '@ember-data/adapter/json-api';\n\n   export default class ApplicationAdapter extends JSONAPIAdapter {\n     urlForFindBelongsTo(id, modelName, snapshot) {\n       let baseUrl = this.buildURL(modelName, id);\n       return `${baseUrl}/relationships`;\n     }\n   }\n   ```\n\n   @method urlForFindBelongsTo\n    @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForFindBelongsTo(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string {\n  return this._buildURL(modelName, id);\n}\n\n/**\n   Builds a URL for a `record.save()` call when the record was created\n   locally using `store.createRecord()`.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForCreateRecord(modelName, snapshot) {\n       return super.urlForCreateRecord(...arguments) + '/new';\n     }\n   }\n   ```\n\n   @method urlForCreateRecord\n    @public\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForCreateRecord(this: MixtBuildURLMixin, modelName: string, snapshot: Snapshot): string {\n  return this._buildURL(modelName);\n}\n\n/**\n   Builds a URL for a `record.save()` call when the record has been updated locally.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForUpdateRecord(id, modelName, snapshot) {\n       return `/${id}/feed?access_token=${snapshot.adapterOptions.token}`;\n     }\n   }\n   ```\n\n   @method urlForUpdateRecord\n    @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForUpdateRecord(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string {\n  return this._buildURL(modelName, id);\n}\n\n/**\n   Builds a URL for a `record.save()` call when the record has been deleted locally.\n\n   Example:\n\n   ```app/adapters/application.js\n   import RESTAdapter from '@ember-data/adapter/rest';\n\n   export default class ApplicationAdapter extends RESTAdapter {\n     urlForDeleteRecord(id, modelName, snapshot) {\n       return super.urlForDeleteRecord(...arguments) + '/destroy';\n     }\n   }\n   ```\n\n   @method urlForDeleteRecord\n    @public\n   @param {String} id\n   @param {String} modelName\n   @param {Snapshot} snapshot\n   @return {String} url\n   */\nfunction urlForDeleteRecord(this: MixtBuildURLMixin, id: string, modelName: string, snapshot: Snapshot): string {\n  return this._buildURL(modelName, id);\n}\n\n/**\n    @method urlPrefix\n    @private\n    @param {String} path\n    @param {String} parentURL\n    @return {String} urlPrefix\n  */\nfunction urlPrefix(this: MixtBuildURLMixin, path?: string | null, parentURL?: string): string {\n  const { namespace } = this;\n  let { host } = this;\n\n  if (!host || host === '/') {\n    host = '';\n  }\n\n  if (path) {\n    // Protocol relative url\n    if (/^\\/\\//.test(path) || /http(s)?:\\/\\//.test(path)) {\n      // Do nothing, the full host is already included.\n      return path;\n\n      // Absolute path\n    } else if (path.charAt(0) === '/') {\n      return `${host}${path}`;\n      // Relative path\n    } else {\n      return `${parentURL}/${path}`;\n    }\n  }\n\n  // No path provided\n  const url: string[] = [];\n  if (host) {\n    url.push(host);\n  }\n  if (namespace) {\n    url.push(namespace);\n  }\n  return url.join('/');\n}\n\n/**\n    Determines the pathname for a given type.\n\n    By default, it pluralizes the type's name (for example,\n    'post' becomes 'posts' and 'person' becomes 'people').\n\n    ### Pathname customization\n\n    For example, if you have an object `LineItem` with an\n    endpoint of `/line_items/`.\n\n    ```app/adapters/application.js\n    import RESTAdapter from '@ember-data/adapter/rest';\n    import { decamelize, pluralize } from '<app-name>/utils/string-utils';\n\n    export default class ApplicationAdapter extends RESTAdapter {\n      pathForType(modelName) {\n        var decamelized = decamelize(modelName);\n        return pluralize(decamelized);\n      }\n    }\n    ```\n\n    @method pathForType\n    @public\n    @param {String} modelName\n    @return {String} path\n  **/\nfunction pathForType(this: MixtBuildURLMixin, modelName: string): string {\n  const camelized = camelize(modelName);\n  return pluralize(camelized);\n}\n\n// we build it this way vs casting to BuildURLMixin so that any\n// changes to the interface surface as errors here.\nconst mixinProps: BuildURLMixin = {\n  buildURL,\n  _buildURL,\n  urlForFindRecord,\n  urlForFindAll,\n  urlForQueryRecord,\n  urlForQuery,\n  urlForFindMany,\n  urlForFindHasMany,\n  urlForFindBelongsTo,\n  urlForCreateRecord,\n  urlForDeleteRecord,\n  urlForUpdateRecord,\n  urlPrefix,\n  pathForType,\n};\n\nexport default Mixin.create(mixinProps);\n"],"names":["buildURL","modelName","id","snapshot","requestType","query","urlForFindRecord","urlForFindAll","urlForQuery","urlForQueryRecord","urlForFindMany","urlForFindHasMany","urlForFindBelongsTo","urlForCreateRecord","urlForUpdateRecord","urlForDeleteRecord","_buildURL","path","url","host","prefix","urlPrefix","pathForType","push","encodeURIComponent","unshift","urlString","join","charAt","snapshots","ids","parentURL","namespace","test","camelized","camelize","pluralize","mixinProps","Mixin","create"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASpB,gBAAgBA,CAA0BJ,EAAU,EAAED,SAAiB,EAAEE,QAAkB,EAAU;AAC5G,EAAA,OAAO,IAAI,CAACa,SAAS,CAACf,SAAS,EAAEC,EAAE,CAAC,CAAA;AACtC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,aAAaA,CAA0BN,SAAiB,EAAE4B,SAA8B,EAAU;AACzG,EAAA,OAAO,IAAI,CAACb,SAAS,CAACf,SAAS,CAAC,CAAA;AAClC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,WAAWA,CAA0BH,KAA8B,EAAEJ,SAAiB,EAAU;AACvG,EAAA,OAAO,IAAI,CAACe,SAAS,CAACf,SAAS,CAAC,CAAA;AAClC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,iBAAiBA,CAA0BJ,KAA8B,EAAEJ,SAAiB,EAAU;AAC7G,EAAA,OAAO,IAAI,CAACe,SAAS,CAACf,SAAS,CAAC,CAAA;AAClC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASS,cAAcA,CAA0BoB,GAAa,EAAE7B,SAAiB,EAAE4B,SAAqB,EAAU;AAChH,EAAA,OAAO,IAAI,CAACb,SAAS,CAACf,SAAS,CAAC,CAAA;AAClC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,iBAAiBA,CAA0BT,EAAU,EAAED,SAAiB,EAAEE,QAAkB,EAAU;AAC7G,EAAA,OAAO,IAAI,CAACa,SAAS,CAACf,SAAS,EAAEC,EAAE,CAAC,CAAA;AACtC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,mBAAmBA,CAA0BV,EAAU,EAAED,SAAiB,EAAEE,QAAkB,EAAU;AAC/G,EAAA,OAAO,IAAI,CAACa,SAAS,CAACf,SAAS,EAAEC,EAAE,CAAC,CAAA;AACtC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,kBAAkBA,CAA0BZ,SAAiB,EAAEE,QAAkB,EAAU;AAClG,EAAA,OAAO,IAAI,CAACa,SAAS,CAACf,SAAS,CAAC,CAAA;AAClC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,kBAAkBA,CAA0BZ,EAAU,EAAED,SAAiB,EAAEE,QAAkB,EAAU;AAC9G,EAAA,OAAO,IAAI,CAACa,SAAS,CAACf,SAAS,EAAEC,EAAE,CAAC,CAAA;AACtC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,kBAAkBA,CAA0Bb,EAAU,EAAED,SAAiB,EAAEE,QAAkB,EAAU;AAC9G,EAAA,OAAO,IAAI,CAACa,SAAS,CAACf,SAAS,EAAEC,EAAE,CAAC,CAAA;AACtC,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASmB,SAASA,CAA0BJ,IAAoB,EAAEc,SAAkB,EAAU;EAC5F,MAAM;AAAEC,IAAAA,SAAAA;AAAU,GAAC,GAAG,IAAI,CAAA;EAC1B,IAAI;AAAEb,IAAAA,IAAAA;AAAK,GAAC,GAAG,IAAI,CAAA;AAEnB,EAAA,IAAI,CAACA,IAAI,IAAIA,IAAI,KAAK,GAAG,EAAE;AACzBA,IAAAA,IAAI,GAAG,EAAE,CAAA;AACX,GAAA;AAEA,EAAA,IAAIF,IAAI,EAAE;AACR;AACA,IAAA,IAAI,OAAO,CAACgB,IAAI,CAAChB,IAAI,CAAC,IAAI,eAAe,CAACgB,IAAI,CAAChB,IAAI,CAAC,EAAE;AACpD;AACA,MAAA,OAAOA,IAAI,CAAA;;AAEX;KACD,MAAM,IAAIA,IAAI,CAACW,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;AACjC,MAAA,OAAQ,CAAET,EAAAA,IAAK,CAAEF,EAAAA,IAAK,CAAC,CAAA,CAAA;AACvB;AACF,KAAC,MAAM;AACL,MAAA,OAAQ,CAAEc,EAAAA,SAAU,CAAGd,CAAAA,EAAAA,IAAK,CAAC,CAAA,CAAA;AAC/B,KAAA;AACF,GAAA;;AAEA;EACA,MAAMC,GAAa,GAAG,EAAE,CAAA;AACxB,EAAA,IAAIC,IAAI,EAAE;AACRD,IAAAA,GAAG,CAACK,IAAI,CAACJ,IAAI,CAAC,CAAA;AAChB,GAAA;AACA,EAAA,IAAIa,SAAS,EAAE;AACbd,IAAAA,GAAG,CAACK,IAAI,CAACS,SAAS,CAAC,CAAA;AACrB,GAAA;AACA,EAAA,OAAOd,GAAG,CAACS,IAAI,CAAC,GAAG,CAAC,CAAA;AACtB,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,WAAWA,CAA0BrB,SAAiB,EAAU;AACvE,EAAA,MAAMiC,SAAS,GAAGC,QAAQ,CAAClC,SAAS,CAAC,CAAA;EACrC,OAAOmC,SAAS,CAACF,SAAS,CAAC,CAAA;AAC7B,CAAA;;AAEA;AACA;AACA,MAAMG,UAAyB,GAAG;EAChCrC,QAAQ;EACRgB,SAAS;EACTV,gBAAgB;EAChBC,aAAa;EACbE,iBAAiB;EACjBD,WAAW;EACXE,cAAc;EACdC,iBAAiB;EACjBC,mBAAmB;EACnBC,kBAAkB;EAClBE,kBAAkB;EAClBD,kBAAkB;EAClBO,SAAS;AACTC,EAAAA,WAAAA;AACF,CAAC,CAAA;AAED,oBAAegB,KAAK,CAACC,MAAM,CAACF,UAAU,CAAC;;;;"}