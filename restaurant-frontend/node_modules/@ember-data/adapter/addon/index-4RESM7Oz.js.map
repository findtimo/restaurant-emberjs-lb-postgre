{"version":3,"file":"index-4RESM7Oz.js","sources":["../../../node_modules/.pnpm/@babel+runtime@7.23.9/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty.js","../../../node_modules/.pnpm/@babel+runtime@7.23.9/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor.js","../src/index.ts"],"sourcesContent":["export default function _initializerDefineProperty(target, property, descriptor, context) {\n  if (!descriptor) return;\n  Object.defineProperty(target, property, {\n    enumerable: descriptor.enumerable,\n    configurable: descriptor.configurable,\n    writable: descriptor.writable,\n    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0\n  });\n}","export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {\n  var desc = {};\n  Object.keys(descriptor).forEach(function (key) {\n    desc[key] = descriptor[key];\n  });\n  desc.enumerable = !!desc.enumerable;\n  desc.configurable = !!desc.configurable;\n  if ('value' in desc || desc.initializer) {\n    desc.writable = true;\n  }\n  desc = decorators.slice().reverse().reduce(function (desc, decorator) {\n    return decorator(target, property, desc) || desc;\n  }, desc);\n  if (context && desc.initializer !== void 0) {\n    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n    desc.initializer = undefined;\n  }\n  if (desc.initializer === void 0) {\n    Object.defineProperty(target, property, desc);\n    desc = null;\n  }\n  return desc;\n}","/**\n  ## Overview\n\n  <blockquote style=\"margin: 1em; padding: .1em 1em .1em 1em; border-left: solid 1em #E34C32; background: #e0e0e0;\">\n  <p>\n    ⚠️ <strong>This is LEGACY documentation</strong> for a feature that is no longer encouraged to be used.\n    If starting a new app or thinking of implementing a new adapter, consider writing a\n    <a href=\"/ember-data/release/classes/%3CInterface%3E%20Handler\">Handler</a> instead to be used with the <a href=\"https://github.com/emberjs/data/tree/main/packages/request#readme\">RequestManager</a>\n  </p>\n  </blockquote>\n\n  In order to properly fetch and update data, EmberData\n  needs to understand how to connect to your API.\n\n  `Adapters` accept various kinds of requests from the store\n  and manage fulfillment of the request from your API.\n\n  ### Request Flow\n\n  When the store decides it needs to issue a request it uses the\n  following flow to manage the request and process the data.\n\n  - find the appropriate adapter\n  - issue the request to the adapter\n  - await the adapter's response\n    - if an error occurs reject with the error\n    - if no error\n      - if there is response data\n        - pass the response data to the appropriate serializer\n        - update the cache using the JSON:API formatted data from the serializer's response\n      - return the primary record(s) associated with the request\n\n  ### Request Errors\n\n  When a request errors and your adapter does not have the ability to recover from the error,\n  you may either reject the promise returned by your adapter method with the error or simply\n  throw the error.\n\n  If the request was for a `createRecord` `updateRecord` or `deleteRecord` special rules\n  apply to how this error will affect the state of the store and additional properties on\n  the `Error` class may be used. See the documentation for these methods in\n  [<Interface> Adapter](/ember-data/release/classes/%3CInterface%3E%20Adapter) for more information.\n\n  ### Implementing an Adapter\n\n  There are seven required adapter methods, one for each of\n  the primary request types that EmberData issues.\n\n  They are:\n\n  - findRecord\n  - findAll\n  - queryRecord\n  - query\n  - createRecord\n  - updateRecord\n  - deleteRecord\n\n  Each of these request types has a matching store method that triggers it\n  and matching `requestType` that is passed to the serializer's\n  `normalizeResponse` method.\n\n  If your app only reads data but never writes data, it is not necessary\n  to implement the methods for create, update, and delete. This extends to\n  all of the store's find methods with the exception of `findRecord` (`findAll`,\n  `query`, `queryRecord`): if you do not use the store method in your app then\n  your Adapter does not need the method.\n\n  ```ts\n  async function fetchData(url, options = {}) {\n    let response = await fetch(url, options);\n    return response.toJSON();\n  }\n\n  export default class ApplicationAdapter {\n    findRecord(_, { modelName }, id) {\n      return fetchData(`./${modelName}s/${id}`);\n    }\n\n    static create() {\n      return new this();\n    }\n  }\n  ```\n\n  ### Adapter Resolution\n\n  `store.adapterFor(name)` will lookup adapters defined in `app/adapters/` and\n  return an instance.\n\n  `adapterFor` first attempts to find an adapter with an exact match on `name`,\n  then falls back to checking for the presence of an adapter named `application`.\n\n  If no adapter is found, an error will be thrown.\n\n  ```ts\n  store.adapterFor('author');\n\n  // lookup paths (in order) =>\n  //   app/adapters/author.js\n  //   app/adapters/application.js\n  ```\n\n  Most requests in EmberData are made with respect to a particular `type` (or `modelName`)\n  (e.g., \"get me the full collection of **books**\" or \"get me the **employee** whose id is 37\"). We\n  refer to this as the **primary** resource `type`.\n\n  `adapterFor` is used by the store to find an adapter with a name matching that of the primary\n  resource `type` for the request, which then falls back to the `application` adapter.\n\n  It is recommended that applications define only a single `application` adapter and serializer\n  where possible, only implementing an adapter specific to the `type` when absolutely necessary.\n\n  If you need to support multiple API versions for the same type, the per-type strategy for\n  defining adapters might not be adequate.\n\n  If you have multiple APIs or multiple API versions and the single application adapter and per-type\n  strategy does not suite your needs, one strategy is to write an `application` adapter and serializer\n  that make use of `options` to specify the desired format when making a request, then forwards to the\n  request to the desired adapter or serializer as needed.\n\n  ```app/adapters/application.js\n  export default class Adapter extends EmberObject {\n    findRecord(store, schema, id, snapshot) {\n      let { apiVersion } = snapshot.adapterOptions;\n      return this.adapterFor(`-api-${apiVersion}`).findRecord(store, schema, id, snapshot);\n    }\n  }\n  ```\n\n  ### Overriding `Store.adapterFor`\n\n  ```js\n  import Store from '@ember-data/store';\n  import Adapter from '@ember-data/adapter/json-api';\n\n  class extends Store {\n    #adapter = new Adapter();\n\n    adapterFor() {\n      return this.#adapter;\n    }\n  }\n  ```\n\n\nNote: If you are using Ember and would like to make use of `service` injections in your adapter, you will want to additionally `setOwner` for the Adapter.\n\n  ```js\n  import Store from '@ember-data/store';\n  import Adapter from '@ember-data/adapter/json-api';\n  import { getOwner, setOwner } from '@ember/owner';\n\n  class extends Store {\n    #adapter = null;\n\n    adapterFor() {\n      let adapter = this.#adapter;\n      if (!adapter) {\n        const owner = getOwner(this);\n        adapter = new Adapter();\n        setOwner(adapter, owner);\n        this.#adapter = adapter;\n      }\n\n      return adapter;\n    }\n  }\n  ```\n\nBy default when using with Ember you only need to implement this hook if you want your adapter usage to be statically analyzeable. *Ember***Data** will attempt to resolve adapters using Ember's resolver. To provide a single Adapter for your application like the above you would provide it as the default export of the file `app/adapters/application.{js/ts}`\n\n  ### Using an Adapter\n\n  Any adapter in `app/adapters/` can be looked up by `name` using `store.adapterFor(name)`.\n\n  ### Default Adapters\n\n  Applications whose API's structure endpoint URLs *very close to* or *exactly* the **REST**\n  or **JSON:API** convention, the `@ember-data/adapter` package contains implementations\n  these applications can extend.\n\n  Many applications will find writing their own adapter to be allow greater flexibility,\n  customization, and maintenance than attempting to override methods in these adapters.\n\n  @module @ember-data/adapter\n  @main @ember-data/adapter\n*/\n\nimport { assert } from '@ember/debug';\nimport EmberObject from '@ember/object';\nimport { inject as service } from '@ember/service';\n\nimport { DEBUG } from '@ember-data/env';\nimport type { Snapshot, SnapshotRecordArray } from '@ember-data/legacy-compat/-private';\nimport type {\n  AdapterPayload,\n  MinimumAdapterInterface,\n} from '@ember-data/legacy-compat/legacy-network-handler/minimum-adapter-interface';\nimport type { SerializerOptions } from '@ember-data/legacy-compat/legacy-network-handler/minimum-serializer-interface';\nimport type Store from '@ember-data/store';\nimport type { ModelSchema } from '@ember-data/store/-types/q/ds-model';\n\n/**\n  An adapter is an object that receives requests from a store and\n  translates them into the appropriate action to take against your\n  persistence layer. The persistence layer is usually an HTTP API but\n  may be anything, such as the browser's local storage. Typically the\n  adapter is not invoked directly instead its functionality is accessed\n  through the `store`.\n\n  > ⚠️ CAUTION you likely want the docs for [<Interface> Adapter](/ember-data/release/classes/%3CInterface%3E%20Adapter)\n  > as extending this abstract class is unnecessary.\n\n  ### Creating an Adapter\n\n  Create a new subclass of `Adapter` in the `app/adapters` folder:\n\n  ```app/adapters/application.js\n  import Adapter from '@ember-data/adapter';\n\n  export default Adapter.extend({\n    // ...your code here\n  });\n  ```\n\n  Model-specific adapters can be created by putting your adapter\n  class in an `app/adapters/` + `model-name` + `.js` file of the application.\n\n  ```app/adapters/post.js\n  import Adapter from '@ember-data/adapter';\n\n  export default Adapter.extend({\n    // ...Post-specific adapter code goes here\n  });\n  ```\n\n  `Adapter` is an abstract base class that you should override in your\n  application to customize it for your backend. The minimum set of methods\n  that you should implement is:\n\n    * `findRecord()`\n    * `createRecord()`\n    * `updateRecord()`\n    * `deleteRecord()`\n    * `findAll()`\n    * `query()`\n\n  To improve the network performance of your application, you can optimize\n  your adapter by overriding these lower-level methods:\n\n    * `findMany()`\n\n\n  For an example of the implementation, see `RESTAdapter`, the\n  included REST adapter.\n\n  @class Adapter\n  @public\n  @extends Ember.EmberObject\n*/\nexport default class Adapter extends EmberObject implements MinimumAdapterInterface {\n  @service declare store: Store;\n\n  declare _coalesceFindRequests: boolean;\n\n  /**\n    The `findRecord()` method is invoked when the store is asked for a record that\n    has not previously been loaded. In response to `findRecord()` being called, you\n    should query your persistence layer for a record with the given ID. The `findRecord`\n    method should return a promise that will resolve to a JavaScript object that will be\n    normalized by the serializer.\n\n    Here is an example of the `findRecord` implementation:\n\n    ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n\n    export default class ApplicationAdapter extends Adapter {\n      findRecord(store, type, id, snapshot) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.getJSON(`/${type.modelName}/${id}`).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n\n    @method findRecord\n    @param {Store} store\n    @param {Model} type\n    @param {String} id\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  findRecord(store: Store, type: ModelSchema, id: string, snapshot: Snapshot): Promise<AdapterPayload> {\n    if (DEBUG) {\n      throw new Error('You subclassed the Adapter class but missing a findRecord override');\n    }\n  }\n\n  /**\n    The `findAll()` method is used to retrieve all records for a given type.\n\n    Example\n\n    ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n\n    export default class ApplicationAdapter extends Adapter {\n      findAll(store, type) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.getJSON(`/${type.modelName}`).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n\n    @method findAll\n    @param {Store} store\n    @param {Model} type\n    @param {null} neverSet a value is never provided to this argument\n    @param {SnapshotRecordArray} snapshotRecordArray\n    @return {Promise} promise\n    @public\n  */\n  findAll(\n    store: Store,\n    type: ModelSchema,\n    neverSet: null,\n    snapshotRecordArray: SnapshotRecordArray\n    // @ts-expect-error\n  ): Promise<AdapterPayload> {\n    if (DEBUG) {\n      throw new Error('You subclassed the Adapter class but missing a findAll override');\n    }\n  }\n\n  /**\n    This method is called when you call `query` on the store.\n\n    Example\n\n    ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n\n    export default class ApplicationAdapter extends Adapter {\n      query(store, type, query) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.getJSON(`/${type.modelName}`, query).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n\n    @method query\n    @param {Store} store\n    @param {Model} type\n    @param {Object} query\n    @param {Collection} recordArray\n    @param {Object} adapterOptions\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  query(store: Store, type: ModelSchema, query): Promise<AdapterPayload> {\n    if (DEBUG) {\n      throw new Error('You subclassed the Adapter class but missing a query override');\n    }\n  }\n\n  /**\n    The `queryRecord()` method is invoked when the store is asked for a single\n    record through a query object.\n\n    In response to `queryRecord()` being called, you should always fetch fresh\n    data. Once found, you can asynchronously call the store's `push()` method\n    to push the record into the store.\n\n    Here is an example `queryRecord` implementation:\n\n    Example\n\n    ```app/adapters/application.js\n    import Adapter, { BuildURLMixin } from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n\n    export default class ApplicationAdapter extends Adapter.extend(BuildURLMixin) {\n      queryRecord(store, type, query) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.getJSON(`/${type.modelName}`, query).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n\n    @method queryRecord\n    @param {Store} store\n    @param {subclass of Model} type\n    @param {Object} query\n    @param {Object} adapterOptions\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  queryRecord(store: Store, type: ModelSchema, query, adapterOptions): Promise<AdapterPayload> {\n    if (DEBUG) {\n      throw new Error('You subclassed the Adapter class but missing a queryRecord override');\n    }\n  }\n\n  /**\n    If the globally unique IDs for your records should be generated on the client,\n    implement the `generateIdForRecord()` method. This method will be invoked\n    each time you create a new record, and the value returned from it will be\n    assigned to the record's `primaryKey`.\n\n    Most traditional REST-like HTTP APIs will not use this method. Instead, the ID\n    of the record will be set by the server, and your adapter will update the store\n    with the new ID when it calls `didCreateRecord()`. Only implement this method if\n    you intend to generate record IDs on the client-side.\n\n    The `generateIdForRecord()` method will be invoked with the requesting store as\n    the first parameter and the newly created record as the second parameter:\n\n    ```javascript\n    import Adapter from '@ember-data/adapter';\n    import { v4 } from 'uuid';\n\n    export default class ApplicationAdapter extends Adapter {\n      generateIdForRecord(store, type, inputProperties) {\n        return v4();\n      }\n    }\n    ```\n\n    @method generateIdForRecord\n    @param {Store} store\n    @param {Model} type   the Model class of the record\n    @param {Object} inputProperties a hash of properties to set on the\n      newly created record.\n    @return {(String|Number)} id\n    @public\n  */\n\n  /**\n    Proxies to the serializer's `serialize` method.\n\n    Example\n\n    ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n\n    export default class ApplicationAdapter extends Adapter {\n      createRecord(store, type, snapshot) {\n        let data = this.serialize(snapshot, { includeId: true });\n        let url = `/${type.modelName}`;\n\n        // ...\n      }\n    }\n    ```\n\n    @method serialize\n    @param {Snapshot} snapshot\n    @param {Object}   options\n    @return {Object} serialized snapshot\n    @public\n  */\n  serialize(snapshot: Snapshot, options: SerializerOptions): Record<string, unknown> {\n    const serialized = snapshot.serialize(options);\n    assert(\n      `Your adapter's serialize method must return an object, but it returned ${typeof serialized}`,\n      serialized && typeof serialized === 'object'\n    );\n    return serialized as Record<string, unknown>;\n  }\n\n  /**\n    Implement this method in a subclass to handle the creation of\n    new records.\n\n    Serializes the record and sends it to the server.\n\n    Example\n\n    ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n\n    export default class ApplicationAdapter extends Adapter {\n      createRecord(store, type, snapshot) {\n        let data = this.serialize(snapshot, { includeId: true });\n\n        return new RSVP.Promise(function (resolve, reject) {\n          $.ajax({\n            type: 'POST',\n            url: `/${type.modelName}`,\n            dataType: 'json',\n            data: data\n          }).then(function (data) {\n            resolve(data);\n          }, function (jqXHR) {\n            jqXHR.then = null; // tame jQuery's ill mannered promises\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n\n    @method createRecord\n    @param {Store} store\n    @param {Model} type   the Model class of the record\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  createRecord(store: Store, type: ModelSchema, snapshot: Snapshot): Promise<AdapterPayload> {\n    if (DEBUG) {\n      throw new Error('You subclassed the Adapter class but missing a createRecord override');\n    }\n  }\n\n  /**\n    Implement this method in a subclass to handle the updating of\n    a record.\n\n    Serializes the record update and sends it to the server.\n\n    The updateRecord method is expected to return a promise that will\n    resolve with the serialized record. This allows the backend to\n    inform the Ember Data store the current state of this record after\n    the update. If it is not possible to return a serialized record\n    the updateRecord promise can also resolve with `undefined` and the\n    Ember Data store will assume all of the updates were successfully\n    applied on the backend.\n\n    Example\n\n    ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n\n    export default class ApplicationAdapter extends Adapter {\n      updateRecord(store, type, snapshot) {\n        let data = this.serialize(snapshot, { includeId: true });\n        let id = snapshot.id;\n\n        return new RSVP.Promise(function(resolve, reject) {\n          $.ajax({\n            type: 'PUT',\n            url: `/${type.modelName}/${id}`,\n            dataType: 'json',\n            data: data\n          }).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            jqXHR.then = null; // tame jQuery's ill mannered promises\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n\n    @method updateRecord\n    @param {Store} store\n    @param {Model} type   the Model class of the record\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  updateRecord(store: Store, type: ModelSchema, snapshot: Snapshot): Promise<AdapterPayload> {\n    if (DEBUG) {\n      throw new Error('You subclassed the Adapter class but missing a updateRecord override');\n    }\n  }\n\n  /**\n    Implement this method in a subclass to handle the deletion of\n    a record.\n\n    Sends a delete request for the record to the server.\n\n    Example\n\n    ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n\n    export default class ApplicationAdapter extends Adapter {\n      deleteRecord(store, type, snapshot) {\n        let data = this.serialize(snapshot, { includeId: true });\n        let id = snapshot.id;\n\n        return new RSVP.Promise(function(resolve, reject) {\n          $.ajax({\n            type: 'DELETE',\n            url: `/${type.modelName}/${id}`,\n            dataType: 'json',\n            data: data\n          }).then(function(data) {\n            resolve(data)\n          }, function(jqXHR) {\n            jqXHR.then = null; // tame jQuery's ill mannered promises\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n\n    @method deleteRecord\n    @param {Store} store\n    @param {Model} type   the Model class of the record\n    @param {Snapshot} snapshot\n    @return {Promise} promise\n    @public\n  */\n  // @ts-expect-error\n  deleteRecord(store: Store, type: ModelSchema, snapshot: Snapshot): Promise<AdapterPayload> {\n    if (DEBUG) {\n      throw new Error('You subclassed the Adapter class but missing a deleteRecord override');\n    }\n  }\n\n  /**\n    By default the store will try to coalesce all `findRecord` calls within the same runloop\n    into as few requests as possible by calling groupRecordsForFindMany and passing it into a findMany call.\n    You can opt out of this behaviour by either not implementing the findMany hook or by setting\n    coalesceFindRequests to false.\n\n    @property coalesceFindRequests\n    @public\n    @type {boolean}\n  */\n  get coalesceFindRequests() {\n    const coalesceFindRequests = this._coalesceFindRequests;\n    if (typeof coalesceFindRequests === 'boolean') {\n      return coalesceFindRequests;\n    }\n    return (this._coalesceFindRequests = true);\n  }\n\n  set coalesceFindRequests(value: boolean) {\n    this._coalesceFindRequests = value;\n  }\n\n  /**\n    The store will call `findMany` instead of multiple `findRecord`\n    requests to find multiple records at once if coalesceFindRequests\n    is true.\n\n    ```app/adapters/application.js\n    import Adapter from '@ember-data/adapter';\n    import RSVP from 'RSVP';\n    import $ from 'jquery';\n\n    export default class ApplicationAdapter extends Adapter {\n      findMany(store, type, ids, snapshots) {\n        return new RSVP.Promise(function(resolve, reject) {\n          $.ajax({\n            type: 'GET',\n            url: `/${type.modelName}/`,\n            dataType: 'json',\n            data: { filter: { id: ids.join(',') } }\n          }).then(function(data) {\n            resolve(data);\n          }, function(jqXHR) {\n            jqXHR.then = null; // tame jQuery's ill mannered promises\n            reject(jqXHR);\n          });\n        });\n      }\n    }\n    ```\n\n    @method findMany\n    @param {Store} store\n    @param {Model} type   the Model class of the records\n    @param {Array}    ids\n    @param {Array} snapshots\n    @return {Promise} promise\n    @public\n  */\n\n  /**\n    Organize records into groups, each of which is to be passed to separate\n    calls to `findMany`.\n\n    For example, if your API has nested URLs that depend on the parent, you will\n    want to group records by their parent.\n\n    The default implementation returns the records as a single group.\n\n    @method groupRecordsForFindMany\n    @public\n    @param {Store} store\n    @param {Array} snapshots\n    @return {Array}  an array of arrays of records, each of which is to be\n                      loaded separately by `findMany`.\n  */\n  groupRecordsForFindMany(store: Store, snapshots: Snapshot[]): Snapshot[][] {\n    return [snapshots];\n  }\n\n  /**\n    This method is used by the store to determine if the store should\n    reload a record from the adapter when a record is requested by\n    `store.findRecord`.\n\n    If this method returns `true`, the store will re-fetch a record from\n    the adapter. If this method returns `false`, the store will resolve\n    immediately using the cached record.\n\n    For example, if you are building an events ticketing system, in which users\n    can only reserve tickets for 20 minutes at a time, and want to ensure that\n    in each route you have data that is no more than 20 minutes old you could\n    write:\n\n    ```javascript\n    shouldReloadRecord(store, ticketSnapshot) {\n      let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');\n      let timeDiff = moment().diff(lastAccessedAt, 'minutes');\n\n      if (timeDiff > 20) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    ```\n\n    This method would ensure that whenever you do `store.findRecord('ticket',\n    id)` you will always get a ticket that is no more than 20 minutes old. In\n    case the cached version is more than 20 minutes old, `findRecord` will not\n    resolve until you fetched the latest version.\n\n    By default this hook returns `false`, as most UIs should not block user\n    interactions while waiting on data update.\n\n    Note that, with default settings, `shouldBackgroundReloadRecord` will always\n    re-fetch the records in the background even if `shouldReloadRecord` returns\n    `false`. You can override `shouldBackgroundReloadRecord` if this does not\n    suit your use case.\n\n    @since 1.13.0\n    @method shouldReloadRecord\n    @param {Store} store\n    @param {Snapshot} snapshot\n    @return {Boolean}\n    @public\n  */\n  shouldReloadRecord(store: Store, snapshot: Snapshot): boolean {\n    return false;\n  }\n\n  /**\n    This method is used by the store to determine if the store should\n    reload all records from the adapter when records are requested by\n    `store.findAll`.\n\n    If this method returns `true`, the store will re-fetch all records from\n    the adapter. If this method returns `false`, the store will resolve\n    immediately using the cached records.\n\n    For example, if you are building an events ticketing system, in which users\n    can only reserve tickets for 20 minutes at a time, and want to ensure that\n    in each route you have data that is no more than 20 minutes old you could\n    write:\n\n    ```javascript\n    shouldReloadAll(store, snapshotArray) {\n      let snapshots = snapshotArray.snapshots();\n\n      return snapshots.any((ticketSnapshot) => {\n        let lastAccessedAt = ticketSnapshot.attr('lastAccessedAt');\n        let timeDiff = moment().diff(lastAccessedAt, 'minutes');\n\n        if (timeDiff > 20) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    }\n    ```\n\n    This method would ensure that whenever you do `store.findAll('ticket')` you\n    will always get a list of tickets that are no more than 20 minutes old. In\n    case a cached version is more than 20 minutes old, `findAll` will not\n    resolve until you fetched the latest versions.\n\n    By default, this method returns `true` if the passed `snapshotRecordArray`\n    is empty (meaning that there are no records locally available yet),\n    otherwise, it returns `false`.\n\n    Note that, with default settings, `shouldBackgroundReloadAll` will always\n    re-fetch all the records in the background even if `shouldReloadAll` returns\n    `false`. You can override `shouldBackgroundReloadAll` if this does not suit\n    your use case.\n\n    @since 1.13.0\n    @method shouldReloadAll\n    @param {Store} store\n    @param {SnapshotRecordArray} snapshotRecordArray\n    @return {Boolean}\n    @public\n  */\n  shouldReloadAll(store: Store, snapshotRecordArray: SnapshotRecordArray): boolean {\n    return !snapshotRecordArray.length;\n  }\n\n  /**\n    This method is used by the store to determine if the store should\n    reload a record after the `store.findRecord` method resolves a\n    cached record.\n\n    This method is *only* checked by the store when the store is\n    returning a cached record.\n\n    If this method returns `true` the store will re-fetch a record from\n    the adapter.\n\n    For example, if you do not want to fetch complex data over a mobile\n    connection, or if the network is down, you can implement\n    `shouldBackgroundReloadRecord` as follows:\n\n    ```javascript\n    shouldBackgroundReloadRecord(store, snapshot) {\n      let { downlink, effectiveType } = navigator.connection;\n\n      return downlink > 0 && effectiveType === '4g';\n    }\n    ```\n\n    By default, this hook returns `true` so the data for the record is updated\n    in the background.\n\n    @since 1.13.0\n    @method shouldBackgroundReloadRecord\n    @param {Store} store\n    @param {Snapshot} snapshot\n    @return {Boolean}\n    @public\n  */\n  shouldBackgroundReloadRecord(store: Store, snapshot: Snapshot): boolean {\n    return true;\n  }\n\n  /**\n    This method is used by the store to determine if the store should\n    reload a record array after the `store.findAll` method resolves\n    with a cached record array.\n\n    This method is *only* checked by the store when the store is\n    returning a cached record array.\n\n    If this method returns `true` the store will re-fetch all records\n    from the adapter.\n\n    For example, if you do not want to fetch complex data over a mobile\n    connection, or if the network is down, you can implement\n    `shouldBackgroundReloadAll` as follows:\n\n    ```javascript\n    shouldBackgroundReloadAll(store, snapshotArray) {\n      let { downlink, effectiveType } = navigator.connection;\n\n      return downlink > 0 && effectiveType === '4g';\n    }\n    ```\n\n    By default this method returns `true`, indicating that a background reload\n    should always be triggered.\n\n    @since 1.13.0\n    @method shouldBackgroundReloadAll\n    @param {Store} store\n    @param {SnapshotRecordArray} snapshotRecordArray\n    @return {Boolean}\n    @public\n  */\n  shouldBackgroundReloadAll(store: Store, snapshotRecordArray: SnapshotRecordArray): boolean {\n    return true;\n  }\n}\n\nexport { BuildURLMixin } from './-private';\n"],"names":["_initializerDefineProperty","target","property","descriptor","context","Object","defineProperty","enumerable","configurable","writable","value","initializer","call","_applyDecoratedDescriptor","decorators","desc","keys","forEach","key","slice","reverse","reduce","decorator","undefined","Adapter","_class","EmberObject","constructor","args","_descriptor","findRecord","store","type","id","snapshot","macroCondition","getOwnConfig","env","DEBUG","Error","findAll","neverSet","snapshotRecordArray","query","queryRecord","adapterOptions","serialize","options","serialized","assert","createRecord","updateRecord","deleteRecord","coalesceFindRequests","_coalesceFindRequests","groupRecordsForFindMany","snapshots","shouldReloadRecord","shouldReloadAll","length","shouldBackgroundReloadRecord","shouldBackgroundReloadAll","prototype","service"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAKEC,OAAOA,CACLT,KAAY,EACZC,IAAiB,EACjBS,QAAc,EACdC,mBAAwC,EAEf;AACzB,IAAA,IAAAP,cAAA,CAAAC,YAAA,GAAAC,GAAA,CAAAC,KAAA,CAAW,EAAA;AACT,MAAA,MAAM,IAAIC,KAAK,CAAC,iEAAiE,CAAC,CAAA;AACpF,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKE;AACAI,EAAAA,KAAKA,CAACZ,KAAY,EAAEC,IAAiB,EAAEW,KAAK,EAA2B;AACrE,IAAA,IAAAR,cAAA,CAAAC,YAAA,GAAAC,GAAA,CAAAC,KAAA,CAAW,EAAA;AACT,MAAA,MAAM,IAAIC,KAAK,CAAC,+DAA+D,CAAC,CAAA;AAClF,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOE;EACAK,WAAWA,CAACb,KAAY,EAAEC,IAAiB,EAAEW,KAAK,EAAEE,cAAc,EAA2B;AAC3F,IAAA,IAAAV,cAAA,CAAAC,YAAA,GAAAC,GAAA,CAAAC,KAAA,CAAW,EAAA;AACT,MAAA,MAAM,IAAIC,KAAK,CAAC,qEAAqE,CAAC,CAAA;AACxF,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMEO,EAAAA,SAASA,CAACZ,QAAkB,EAAEa,OAA0B,EAA2B;AACjF,IAAA,MAAMC,UAAU,GAAGd,QAAQ,CAACY,SAAS,CAACC,OAAO,CAAC,CAAA;AAC9CE,IAAAA,MAAM,CACH,CAAA,uEAAA,EAAyE,OAAOD,UAAW,CAAC,CAAA,EAC7FA,UAAU,IAAI,OAAOA,UAAU,KAAK,QACtC,CAAC,CAAA;AACD,IAAA,OAAOA,UAAU,CAAA;AACnB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOE;AACAE,EAAAA,YAAYA,CAACnB,KAAY,EAAEC,IAAiB,EAAEE,QAAkB,EAA2B;AACzF,IAAA,IAAAC,cAAA,CAAAC,YAAA,GAAAC,GAAA,CAAAC,KAAA,CAAW,EAAA;AACT,MAAA,MAAM,IAAIC,KAAK,CAAC,sEAAsE,CAAC,CAAA;AACzF,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQE;AACAY,EAAAA,YAAYA,CAACpB,KAAY,EAAEC,IAAiB,EAAEE,QAAkB,EAA2B;AACzF,IAAA,IAAAC,cAAA,CAAAC,YAAA,GAAAC,GAAA,CAAAC,KAAA,CAAW,EAAA;AACT,MAAA,MAAM,IAAIC,KAAK,CAAC,sEAAsE,CAAC,CAAA;AACzF,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOE;AACAa,EAAAA,YAAYA,CAACrB,KAAY,EAAEC,IAAiB,EAAEE,QAAkB,EAA2B;AACzF,IAAA,IAAAC,cAAA,CAAAC,YAAA,GAAAC,GAAA,CAAAC,KAAA,CAAW,EAAA;AACT,MAAA,MAAM,IAAIC,KAAK,CAAC,sEAAsE,CAAC,CAAA;AACzF,KAAA;AACF,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEE,IAAIc,oBAAoBA,GAAG;AACzB,IAAA,MAAMA,oBAAoB,GAAG,IAAI,CAACC,qBAAqB,CAAA;AACvD,IAAA,IAAI,OAAOD,oBAAoB,KAAK,SAAS,EAAE;AAC7C,MAAA,OAAOA,oBAAoB,CAAA;AAC7B,KAAA;AACA,IAAA,OAAQ,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAAA;AAC3C,GAAA;EAEA,IAAID,oBAAoBA,CAAC3C,KAAc,EAAE;IACvC,IAAI,CAAC4C,qBAAqB,GAAG5C,KAAK,CAAA;AACpC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE6C,EAAAA,uBAAuBA,CAACxB,KAAY,EAAEyB,SAAqB,EAAgB;IACzE,OAAO,CAACA,SAAS,CAAC,CAAA;AACpB,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASEC,EAAAA,kBAAkBA,CAAC1B,KAAY,EAAEG,QAAkB,EAAW;AAC5D,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUEwB,EAAAA,eAAeA,CAAC3B,KAAY,EAAEW,mBAAwC,EAAW;IAC/E,OAAO,CAACA,mBAAmB,CAACiB,MAAM,CAAA;AACpC,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQEC,EAAAA,4BAA4BA,CAAC7B,KAAY,EAAEG,QAAkB,EAAW;AACtE,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQE2B,EAAAA,yBAAyBA,CAAC9B,KAAY,EAAEW,mBAAwC,EAAW;AACzF,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AACF,CAAC,GAAAb,WAAA,GAAAhB,yBAAA,CAAAY,MAAA,CAAAqC,SAAA,EAAA,OAAA,EAAA,CA9oBEC,MAAO,CAAA,EAAA;EAAAvD,YAAA,EAAA,IAAA;EAAAD,UAAA,EAAA,IAAA;EAAAE,QAAA,EAAA,IAAA;EAAAE,WAAA,EAAA,IAAA;AAAA,CAAA,CAAA,GAAAc,MAAA;;;;","x_google_ignoreList":[0,1]}