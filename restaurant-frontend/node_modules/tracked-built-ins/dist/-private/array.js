import { _ as _classPrivateFieldGet } from '../classPrivateFieldGet-0e0d6742.js';
import { createStorage, getValue, setValue } from 'ember-tracked-storage-polyfill';

function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
const ARRAY_GETTER_METHODS = new Set([Symbol.iterator, 'concat', 'entries', 'every', 'filter', 'find', 'findIndex', 'flat', 'flatMap', 'forEach', 'includes', 'indexOf', 'join', 'keys', 'lastIndexOf', 'map', 'reduce', 'reduceRight', 'slice', 'some', 'values']);

// For these methods, `Array` itself immediately gets the `.length` to return
// after invoking them.
const ARRAY_WRITE_THEN_READ_METHODS = new Set(['fill', 'push', 'unshift']);
function convertToInt(prop) {
  if (typeof prop === 'symbol') return null;
  const num = Number(prop);
  if (isNaN(num)) return null;
  return num % 1 === 0 ? num : null;
}
var _collection = /*#__PURE__*/new WeakMap();
var _storages = /*#__PURE__*/new WeakMap();
var _readStorageFor = /*#__PURE__*/new WeakSet();
var _dirtyStorageFor = /*#__PURE__*/new WeakSet();
class TrackedArray {
  /**
   * Creates an array from an iterable object.
   * @param iterable An iterable object to convert to an array.
   */

  /**
   * Creates an array from an iterable object.
   * @param iterable An iterable object to convert to an array.
   * @param mapfn A mapping function to call on every element of the array.
   * @param thisArg Value of 'this' used to invoke the mapfn.
   */

  static from(iterable, mapfn, thisArg) {
    return mapfn ? new TrackedArray(Array.from(iterable, mapfn, thisArg)) : new TrackedArray(Array.from(iterable));
  }
  static of(...arr) {
    return new TrackedArray(arr);
  }
  constructor(arr = []) {
    _classPrivateMethodInitSpec(this, _dirtyStorageFor);
    _classPrivateMethodInitSpec(this, _readStorageFor);
    _classPrivateFieldInitSpec(this, _collection, {
      writable: true,
      value: createStorage(null, () => false)
    });
    _classPrivateFieldInitSpec(this, _storages, {
      writable: true,
      value: new Map()
    });
    let clone = arr.slice();
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    let self = this;
    let boundFns = new Map();

    /**
      Flag to track whether we have *just* intercepted a call to `.push()` or
      `.unshift()`, since in those cases (and only those cases!) the `Array`
      itself checks `.length` to return from the function call.
     */
    let nativelyAccessingLengthFromPushOrUnshift = false;
    return new Proxy(clone, {
      get(target, prop /*, _receiver */) {
        let index = convertToInt(prop);
        if (index !== null) {
          _classPrivateMethodGet(self, _readStorageFor, _readStorageFor2).call(self, index);
          getValue(_classPrivateFieldGet(self, _collection));
          return target[index];
        }
        if (prop === 'length') {
          // If we are reading `.length`, it may be a normal user-triggered
          // read, or it may be a read triggered by Array itself. In the latter
          // case, it is because we have just done `.push()` or `.unshift()`; in
          // that case it is safe not to mark this as a *read* operation, since
          // calling `.push()` or `.unshift()` cannot otherwise be part of a
          // "read" operation safely, and if done during an *existing* read
          // (e.g. if the user has already checked `.length` *prior* to this),
          // that will still trigger the mutation-after-consumption assertion.
          if (nativelyAccessingLengthFromPushOrUnshift) {
            nativelyAccessingLengthFromPushOrUnshift = false;
          } else {
            getValue(_classPrivateFieldGet(self, _collection));
          }
          return target[prop];
        }

        // Here, track that we are doing a `.push()` or `.unshift()` by setting
        // the flag to `true` so that when the `.length` is read by `Array` (see
        // immediately above), it knows not to dirty the collection.
        if (ARRAY_WRITE_THEN_READ_METHODS.has(prop)) {
          nativelyAccessingLengthFromPushOrUnshift = true;
        }
        if (ARRAY_GETTER_METHODS.has(prop)) {
          let fn = boundFns.get(prop);
          if (fn === undefined) {
            fn = (...args) => {
              getValue(_classPrivateFieldGet(self, _collection));
              return target[prop](...args);
            };
            boundFns.set(prop, fn);
          }
          return fn;
        }
        return target[prop];
      },
      set(target, prop, value /*, _receiver */) {
        target[prop] = value;
        let index = convertToInt(prop);
        if (index !== null) {
          _classPrivateMethodGet(self, _dirtyStorageFor, _dirtyStorageFor2).call(self, index);
          setValue(_classPrivateFieldGet(self, _collection), null);
        } else if (prop === 'length') {
          setValue(_classPrivateFieldGet(self, _collection), null);
        }
        return true;
      },
      getPrototypeOf() {
        return TrackedArray.prototype;
      }
    });
  }
}

// This rule is correct in the general case, but it doesn't understand
// declaration merging, which is how we're using the interface here. This says
// `TrackedArray` acts just like `Array<T>`, but also has the properties
// declared via the `class` declaration above -- but without the cost of a
// subclass, which is much slower that the proxied array behavior. That is: a
// `TrackedArray` *is* an `Array`, just with a proxy in front of accessors and
// setters, rather than a subclass of an `Array` which would be de-optimized by
// the browsers.
//
// eslint-disable-next-line @typescript-eslint/no-empty-interface
function _readStorageFor2(index) {
  let storage = _classPrivateFieldGet(this, _storages).get(index);
  if (storage === undefined) {
    storage = createStorage(null, () => false);
    _classPrivateFieldGet(this, _storages).set(index, storage);
  }
  getValue(storage);
}
function _dirtyStorageFor2(index) {
  const storage = _classPrivateFieldGet(this, _storages).get(index);
  if (storage) {
    setValue(storage, null);
  }
}

// Ensure instanceof works correctly
Object.setPrototypeOf(TrackedArray.prototype, Array.prototype);

export { TrackedArray as default };
//# sourceMappingURL=array.js.map
