import { Dict } from '../core';
import InternalRouteInfo, { ModelFor, Route, UnresolvedRouteInfoByObject, UnresolvedRouteInfoByParam } from '../route-info';
import Router, { ParsedHandler } from '../router';
import { TransitionIntent } from '../transition-intent';
import TransitionState from '../transition-state';
export default class NamedTransitionIntent<R extends Route> extends TransitionIntent<R> {
    name: string;
    pivotHandler?: Route;
    contexts: ModelFor<R>[];
    queryParams: Dict<unknown>;
    preTransitionState?: TransitionState<R>;
    constructor(router: Router<R>, name: string, pivotHandler: Route | undefined, contexts?: ModelFor<R>[], queryParams?: Dict<unknown>, data?: {});
    applyToState(oldState: TransitionState<R>, isIntermediate: boolean): TransitionState<R>;
    applyToHandlers(oldState: TransitionState<R>, parsedHandlers: ParsedHandler[], targetRouteName: string, isIntermediate: boolean, checkingIfActive: boolean): TransitionState<R>;
    invalidateChildren(handlerInfos: InternalRouteInfo<R>[], invalidateIndex: number): void;
    getHandlerInfoForDynamicSegment(name: string, names: string[], objects: ModelFor<R>[], oldHandlerInfo: InternalRouteInfo<R>, _targetRouteName: string, i: number): UnresolvedRouteInfoByObject<R>;
    createParamHandlerInfo(name: string, names: string[], objects: unknown[], oldHandlerInfo: InternalRouteInfo<R>): UnresolvedRouteInfoByParam<R>;
}
