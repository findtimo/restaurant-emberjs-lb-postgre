define('@glimmer/global-context', ['exports', '@glimmer/env'], function (exports, env) { 'use strict';

  /**
   * This package contains global context functions for Glimmer. These functions
   * are set by the embedding environment and must be set before initial render.
   *
   * These functions should meet the following criteria:
   *
   * - Must be provided by the embedder, due to having framework specific
   *   behaviors (e.g. interop with classic Ember behaviors that should not be
   *   upstreamed) or to being out of scope for the VM (e.g. scheduling a
   *   revalidation)
   * - Never differ between render roots
   * - Never change over time
   *
   */

  exports.FEATURE_DEFAULT_HELPER_MANAGER = true; //////////

  /**
   * Schedules a VM revalidation.
   *
   * Note: this has a default value so that tags can warm themselves when first loaded.
   */

  exports.scheduleRevalidate = function scheduleRevalidate() {};
  var globalContextWasSet = false;
  function setGlobalContext(context) {
    var _a;

    if (env.DEBUG) {
      if (globalContextWasSet) {
        throw new Error('Attempted to set the global context twice. This should only be set once.');
      }

      globalContextWasSet = true;
    }

    exports.scheduleRevalidate = context.scheduleRevalidate;
    exports.scheduleDestroy = context.scheduleDestroy;
    exports.scheduleDestroyed = context.scheduleDestroyed;
    exports.toIterator = context.toIterator;
    exports.toBool = context.toBool;
    exports.getProp = context.getProp;
    exports.setProp = context.setProp;
    exports.getPath = context.getPath;
    exports.setPath = context.setPath;
    exports.warnIfStyleNotTrusted = context.warnIfStyleNotTrusted;
    exports.assert = context.assert;
    exports.deprecate = context.deprecate;

    if (typeof ((_a = context.FEATURES) === null || _a === void 0 ? void 0 : _a.DEFAULT_HELPER_MANAGER) === 'boolean') {
      exports.FEATURE_DEFAULT_HELPER_MANAGER = context.FEATURES.DEFAULT_HELPER_MANAGER;
    }
  }

  if (env.DEBUG) {
    exports.assertGlobalContextWasSet = function assertGlobalContextWasSet() {
      if (globalContextWasSet === false) {
        throw new Error('The global context for Glimmer VM was not set. You must set these global context functions to let Glimmer VM know how to accomplish certain operations. You can do this by importing `setGlobalContext` from `@glimmer/global-context`');
      }
    };

    exports.testOverrideGlobalContext = function testOverrideGlobalContext(context) {
      var originalGlobalContext = globalContextWasSet ? {
        scheduleRevalidate: exports.scheduleRevalidate,
        scheduleDestroy: exports.scheduleDestroy,
        scheduleDestroyed: exports.scheduleDestroyed,
        toIterator: exports.toIterator,
        toBool: exports.toBool,
        getProp: exports.getProp,
        setProp: exports.setProp,
        getPath: exports.getPath,
        setPath: exports.setPath,
        warnIfStyleNotTrusted: exports.warnIfStyleNotTrusted,
        assert: exports.assert,
        deprecate: exports.deprecate
      } : null;

      if (context === null) {
        globalContextWasSet = false;
      } else {
        globalContextWasSet = true;
      } // We use `undefined as any` here to unset the values when resetting the
      // context at the end of a test.


      exports.scheduleRevalidate = (context === null || context === void 0 ? void 0 : context.scheduleRevalidate) || undefined;
      exports.scheduleDestroy = (context === null || context === void 0 ? void 0 : context.scheduleDestroy) || undefined;
      exports.scheduleDestroyed = (context === null || context === void 0 ? void 0 : context.scheduleDestroyed) || undefined;
      exports.toIterator = (context === null || context === void 0 ? void 0 : context.toIterator) || undefined;
      exports.toBool = (context === null || context === void 0 ? void 0 : context.toBool) || undefined;
      exports.getProp = (context === null || context === void 0 ? void 0 : context.getProp) || undefined;
      exports.setProp = (context === null || context === void 0 ? void 0 : context.setProp) || undefined;
      exports.getPath = (context === null || context === void 0 ? void 0 : context.getPath) || undefined;
      exports.setPath = (context === null || context === void 0 ? void 0 : context.setPath) || undefined;
      exports.warnIfStyleNotTrusted = (context === null || context === void 0 ? void 0 : context.warnIfStyleNotTrusted) || undefined;
      exports.assert = (context === null || context === void 0 ? void 0 : context.assert) || undefined;
      exports.deprecate = (context === null || context === void 0 ? void 0 : context.deprecate) || undefined;
      return originalGlobalContext;
    };
  }

  exports.default = setGlobalContext;

  Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
