import { type Instance as PopperInstance, type Modifier as PopperModifier, type Options as PopperOptions } from '@popperjs/core';
declare const IS_POPPER_MODIFIER: unique symbol;
export interface CustomPopperOptions extends Omit<PopperOptions, 'modifiers'> {
    modifiers: PopperOptions['modifiers'] | Partial<PopperModifier<unknown, {
        [key: string]: unknown;
    }>>;
}
export type PopperModifierDescription = Partial<PopperModifier<unknown, {
    [key: string]: unknown;
}>> & {
    [IS_POPPER_MODIFIER]: true;
};
export declare function getPopperForElement(element: Element): PopperInstance;
export declare function setPopperForElement(element: Element, popperInstance: PopperInstance): void;
/**
 * Mark an object as a Popper modifier
 *
 * @param {object} configuration
 * @return {object}
 */
export declare function createModifier(configuration: CustomPopperOptions['modifiers']): PopperModifierDescription;
/**
 * Check whether an object is a Popper modifier
 *
 * @param {object} configuration
 * @return {boolean}
 */
export declare function isModifier(configuration: unknown): boolean;
export {};
//# sourceMappingURL=index.d.ts.map