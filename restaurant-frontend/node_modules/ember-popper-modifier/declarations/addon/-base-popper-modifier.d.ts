/// <reference types="ember-source/types/stable/@ember/owner" />
/// <reference types="ember-source/types/stable/@ember/controller/owner-ext" />
/// <reference types="ember-source/types/stable/@ember/routing/owner-ext" />
/// <reference types="ember-source/types/stable/@ember/service/owner-ext" />
import Modifier, { type ArgsFor } from 'ember-modifier';
import { type Instance as PopperInstance } from '@popperjs/core';
import { type CustomPopperOptions, type PopperModifierDescription } from './index';
import type Owner from '@ember/owner';
export interface PopperSignature {
    Args: {
        Positional: [
            HTMLElement,
            ...(Partial<CustomPopperOptions> | PopperModifierDescription)[]
        ];
        Named: Partial<CustomPopperOptions>;
    };
    Element: HTMLElement;
}
export default abstract class PopperModifier extends Modifier<PopperSignature> {
    popper: PopperInstance | null;
    primaryElement: HTMLElement | null;
    secondaryElement: HTMLElement | null;
    abstract get tooltipElement(): HTMLElement | null;
    abstract get referenceElement(): HTMLElement | null;
    modify(element: PopperSignature['Element'], positionalArgs: PopperSignature['Args']['Positional'], namedArgs: PopperSignature['Args']['Named']): void;
    constructor(owner: Owner, args: ArgsFor<PopperSignature>);
    cleanup: () => void;
}
//# sourceMappingURL=-base-popper-modifier.d.ts.map